
RS485Checker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007428  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080074e8  080074e8  000174e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007520  08007520  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007520  08007520  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007520  08007520  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007520  08007520  00017520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007524  08007524  00017524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000718  2000000c  08007534  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20000724  08007534  00020724  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b446  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033d1  00000000  00000000  0003b47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  0003e850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  0003fe78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bbef  00000000  00000000  00041348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d053  00000000  00000000  0005cf37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a452a  00000000  00000000  00079f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011e4b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050b4  00000000  00000000  0011e504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080074d0 	.word	0x080074d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080074d0 	.word	0x080074d0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fe36 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f815 	bl	8000256 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 fa04 	bl	8000638 <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f9e4 	bl	80005fc <MX_DMA_Init>
  MX_CAN_Init();
 8000234:	f000 f86e 	bl	8000314 <MX_CAN_Init>
  MX_I2C2_Init();
 8000238:	f000 f8a4 	bl	8000384 <MX_I2C2_Init>
  MX_SPI2_Init();
 800023c:	f000 f8e2 	bl	8000404 <MX_SPI2_Init>
  MX_TSC_Init();
 8000240:	f000 f942 	bl	80004c8 <MX_TSC_Init>
  MX_USB_PCD_Init();
 8000244:	f000 f9b4 	bl	80005b0 <MX_USB_PCD_Init>
  MX_TIM14_Init();
 8000248:	f000 f91a 	bl	8000480 <MX_TIM14_Init>
  MX_USART3_UART_Init();
 800024c:	f000 f980 	bl	8000550 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 8000250:	f007 f8e6 	bl	8007420 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000254:	e7fe      	b.n	8000254 <main+0x34>

08000256 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000256:	b590      	push	{r4, r7, lr}
 8000258:	b099      	sub	sp, #100	; 0x64
 800025a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025c:	242c      	movs	r4, #44	; 0x2c
 800025e:	193b      	adds	r3, r7, r4
 8000260:	0018      	movs	r0, r3
 8000262:	2334      	movs	r3, #52	; 0x34
 8000264:	001a      	movs	r2, r3
 8000266:	2100      	movs	r1, #0
 8000268:	f007 f929 	bl	80074be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	231c      	movs	r3, #28
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	0018      	movs	r0, r3
 8000272:	2310      	movs	r3, #16
 8000274:	001a      	movs	r2, r3
 8000276:	2100      	movs	r1, #0
 8000278:	f007 f921 	bl	80074be <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027c:	003b      	movs	r3, r7
 800027e:	0018      	movs	r0, r3
 8000280:	231c      	movs	r3, #28
 8000282:	001a      	movs	r2, r3
 8000284:	2100      	movs	r1, #0
 8000286:	f007 f91a 	bl	80074be <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800028a:	0021      	movs	r1, r4
 800028c:	187b      	adds	r3, r7, r1
 800028e:	2220      	movs	r2, #32
 8000290:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2201      	movs	r2, #1
 8000296:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2202      	movs	r2, #2
 800029c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	22c0      	movs	r2, #192	; 0xc0
 80002a2:	0252      	lsls	r2, r2, #9
 80002a4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2200      	movs	r2, #0
 80002aa:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2201      	movs	r2, #1
 80002b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	0018      	movs	r0, r3
 80002b6:	f003 faf3 	bl	80038a0 <HAL_RCC_OscConfig>
 80002ba:	1e03      	subs	r3, r0, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80002be:	f000 fa49 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c2:	211c      	movs	r1, #28
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2207      	movs	r2, #7
 80002c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2202      	movs	r2, #2
 80002ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2200      	movs	r2, #0
 80002da:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2101      	movs	r1, #1
 80002e0:	0018      	movs	r0, r3
 80002e2:	f003 fe63 	bl	8003fac <HAL_RCC_ClockConfig>
 80002e6:	1e03      	subs	r3, r0, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002ea:	f000 fa33 	bl	8000754 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002ee:	003b      	movs	r3, r7
 80002f0:	2280      	movs	r2, #128	; 0x80
 80002f2:	0292      	lsls	r2, r2, #10
 80002f4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80002f6:	003b      	movs	r3, r7
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002fc:	003b      	movs	r3, r7
 80002fe:	0018      	movs	r0, r3
 8000300:	f003 ffea 	bl	80042d8 <HAL_RCCEx_PeriphCLKConfig>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000308:	f000 fa24 	bl	8000754 <Error_Handler>
  }
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b019      	add	sp, #100	; 0x64
 8000312:	bd90      	pop	{r4, r7, pc}

08000314 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
void MX_CAN_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000318:	4b18      	ldr	r3, [pc, #96]	; (800037c <MX_CAN_Init+0x68>)
 800031a:	4a19      	ldr	r2, [pc, #100]	; (8000380 <MX_CAN_Init+0x6c>)
 800031c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 800031e:	4b17      	ldr	r3, [pc, #92]	; (800037c <MX_CAN_Init+0x68>)
 8000320:	220c      	movs	r2, #12
 8000322:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <MX_CAN_Init+0x68>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800032a:	4b14      	ldr	r3, [pc, #80]	; (800037c <MX_CAN_Init+0x68>)
 800032c:	2200      	movs	r2, #0
 800032e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000330:	4b12      	ldr	r3, [pc, #72]	; (800037c <MX_CAN_Init+0x68>)
 8000332:	22c0      	movs	r2, #192	; 0xc0
 8000334:	0312      	lsls	r2, r2, #12
 8000336:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000338:	4b10      	ldr	r3, [pc, #64]	; (800037c <MX_CAN_Init+0x68>)
 800033a:	2280      	movs	r2, #128	; 0x80
 800033c:	0352      	lsls	r2, r2, #13
 800033e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000340:	4b0e      	ldr	r3, [pc, #56]	; (800037c <MX_CAN_Init+0x68>)
 8000342:	2200      	movs	r2, #0
 8000344:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000346:	4b0d      	ldr	r3, [pc, #52]	; (800037c <MX_CAN_Init+0x68>)
 8000348:	2201      	movs	r2, #1
 800034a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 800034c:	4b0b      	ldr	r3, [pc, #44]	; (800037c <MX_CAN_Init+0x68>)
 800034e:	2201      	movs	r2, #1
 8000350:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000352:	4b0a      	ldr	r3, [pc, #40]	; (800037c <MX_CAN_Init+0x68>)
 8000354:	2201      	movs	r2, #1
 8000356:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000358:	4b08      	ldr	r3, [pc, #32]	; (800037c <MX_CAN_Init+0x68>)
 800035a:	2200      	movs	r2, #0
 800035c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800035e:	4b07      	ldr	r3, [pc, #28]	; (800037c <MX_CAN_Init+0x68>)
 8000360:	2200      	movs	r2, #0
 8000362:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000364:	4b05      	ldr	r3, [pc, #20]	; (800037c <MX_CAN_Init+0x68>)
 8000366:	0018      	movs	r0, r3
 8000368:	f000 fdc4 	bl	8000ef4 <HAL_CAN_Init>
 800036c:	1e03      	subs	r3, r0, #0
 800036e:	d001      	beq.n	8000374 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000370:	f000 f9f0 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000374:	46c0      	nop			; (mov r8, r8)
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	20000028 	.word	0x20000028
 8000380:	40006400 	.word	0x40006400

08000384 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000388:	4b1b      	ldr	r3, [pc, #108]	; (80003f8 <MX_I2C2_Init+0x74>)
 800038a:	4a1c      	ldr	r2, [pc, #112]	; (80003fc <MX_I2C2_Init+0x78>)
 800038c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800038e:	4b1a      	ldr	r3, [pc, #104]	; (80003f8 <MX_I2C2_Init+0x74>)
 8000390:	4a1b      	ldr	r2, [pc, #108]	; (8000400 <MX_I2C2_Init+0x7c>)
 8000392:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000394:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <MX_I2C2_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800039a:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <MX_I2C2_Init+0x74>)
 800039c:	2201      	movs	r2, #1
 800039e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a0:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <MX_I2C2_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003a6:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <MX_I2C2_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <MX_I2C2_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <MX_I2C2_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <MX_I2C2_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <MX_I2C2_Init+0x74>)
 80003c0:	0018      	movs	r0, r3
 80003c2:	f001 fd0b 	bl	8001ddc <HAL_I2C_Init>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80003ca:	f000 f9c3 	bl	8000754 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ce:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <MX_I2C2_Init+0x74>)
 80003d0:	2100      	movs	r1, #0
 80003d2:	0018      	movs	r0, r3
 80003d4:	f001 fd98 	bl	8001f08 <HAL_I2CEx_ConfigAnalogFilter>
 80003d8:	1e03      	subs	r3, r0, #0
 80003da:	d001      	beq.n	80003e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80003dc:	f000 f9ba 	bl	8000754 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <MX_I2C2_Init+0x74>)
 80003e2:	2100      	movs	r1, #0
 80003e4:	0018      	movs	r0, r3
 80003e6:	f001 fddb 	bl	8001fa0 <HAL_I2CEx_ConfigDigitalFilter>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003ee:	f000 f9b1 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000050 	.word	0x20000050
 80003fc:	40005800 	.word	0x40005800
 8000400:	20303e5d 	.word	0x20303e5d

08000404 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI2_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000408:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <MX_SPI2_Init+0x74>)
 800040a:	4a1c      	ldr	r2, [pc, #112]	; (800047c <MX_SPI2_Init+0x78>)
 800040c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800040e:	4b1a      	ldr	r3, [pc, #104]	; (8000478 <MX_SPI2_Init+0x74>)
 8000410:	2282      	movs	r2, #130	; 0x82
 8000412:	0052      	lsls	r2, r2, #1
 8000414:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000416:	4b18      	ldr	r3, [pc, #96]	; (8000478 <MX_SPI2_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <MX_SPI2_Init+0x74>)
 800041e:	22c0      	movs	r2, #192	; 0xc0
 8000420:	0092      	lsls	r2, r2, #2
 8000422:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <MX_SPI2_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800042a:	4b13      	ldr	r3, [pc, #76]	; (8000478 <MX_SPI2_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000430:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_SPI2_Init+0x74>)
 8000432:	2280      	movs	r2, #128	; 0x80
 8000434:	0092      	lsls	r2, r2, #2
 8000436:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_SPI2_Init+0x74>)
 800043a:	2208      	movs	r2, #8
 800043c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_SPI2_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_SPI2_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <MX_SPI2_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_SPI2_Init+0x74>)
 8000452:	2207      	movs	r2, #7
 8000454:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <MX_SPI2_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_SPI2_Init+0x74>)
 800045e:	2208      	movs	r2, #8
 8000460:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000462:	4b05      	ldr	r3, [pc, #20]	; (8000478 <MX_SPI2_Init+0x74>)
 8000464:	0018      	movs	r0, r3
 8000466:	f004 f835 	bl	80044d4 <HAL_SPI_Init>
 800046a:	1e03      	subs	r3, r0, #0
 800046c:	d001      	beq.n	8000472 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800046e:	f000 f971 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	200000a4 	.word	0x200000a4
 800047c:	40003800 	.word	0x40003800

08000480 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000484:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <MX_TIM14_Init+0x40>)
 8000486:	4a0f      	ldr	r2, [pc, #60]	; (80004c4 <MX_TIM14_Init+0x44>)
 8000488:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 47;
 800048a:	4b0d      	ldr	r3, [pc, #52]	; (80004c0 <MX_TIM14_Init+0x40>)
 800048c:	222f      	movs	r2, #47	; 0x2f
 800048e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000490:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <MX_TIM14_Init+0x40>)
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8000496:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <MX_TIM14_Init+0x40>)
 8000498:	2263      	movs	r2, #99	; 0x63
 800049a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <MX_TIM14_Init+0x40>)
 800049e:	2200      	movs	r2, #0
 80004a0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004a2:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <MX_TIM14_Init+0x40>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <MX_TIM14_Init+0x40>)
 80004aa:	0018      	movs	r0, r3
 80004ac:	f004 f8ca 	bl	8004644 <HAL_TIM_Base_Init>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80004b4:	f000 f94e 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	20000108 	.word	0x20000108
 80004c4:	40002000 	.word	0x40002000

080004c8 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
void MX_TSC_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 80004cc:	4b1e      	ldr	r3, [pc, #120]	; (8000548 <MX_TSC_Init+0x80>)
 80004ce:	4a1f      	ldr	r2, [pc, #124]	; (800054c <MX_TSC_Init+0x84>)
 80004d0:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 80004d2:	4b1d      	ldr	r3, [pc, #116]	; (8000548 <MX_TSC_Init+0x80>)
 80004d4:	2280      	movs	r2, #128	; 0x80
 80004d6:	0552      	lsls	r2, r2, #21
 80004d8:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 80004da:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <MX_TSC_Init+0x80>)
 80004dc:	2280      	movs	r2, #128	; 0x80
 80004de:	0452      	lsls	r2, r2, #17
 80004e0:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 80004e2:	4b19      	ldr	r3, [pc, #100]	; (8000548 <MX_TSC_Init+0x80>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 80004e8:	4b17      	ldr	r3, [pc, #92]	; (8000548 <MX_TSC_Init+0x80>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 80004ee:	4b16      	ldr	r3, [pc, #88]	; (8000548 <MX_TSC_Init+0x80>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <MX_TSC_Init+0x80>)
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	0192      	lsls	r2, r2, #6
 80004fa:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <MX_TSC_Init+0x80>)
 80004fe:	22a0      	movs	r2, #160	; 0xa0
 8000500:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <MX_TSC_Init+0x80>)
 8000504:	2200      	movs	r2, #0
 8000506:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <MX_TSC_Init+0x80>)
 800050a:	2200      	movs	r2, #0
 800050c:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <MX_TSC_Init+0x80>)
 8000510:	2200      	movs	r2, #0
 8000512:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <MX_TSC_Init+0x80>)
 8000516:	222c      	movs	r2, #44	; 0x2c
 8000518:	2100      	movs	r1, #0
 800051a:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <MX_TSC_Init+0x80>)
 800051e:	2291      	movs	r2, #145	; 0x91
 8000520:	0092      	lsls	r2, r2, #2
 8000522:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <MX_TSC_Init+0x80>)
 8000526:	2200      	movs	r2, #0
 8000528:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <MX_TSC_Init+0x80>)
 800052c:	2291      	movs	r2, #145	; 0x91
 800052e:	00d2      	lsls	r2, r2, #3
 8000530:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <MX_TSC_Init+0x80>)
 8000534:	0018      	movs	r0, r3
 8000536:	f004 faed 	bl	8004b14 <HAL_TSC_Init>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 800053e:	f000 f909 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000150 	.word	0x20000150
 800054c:	40024000 	.word	0x40024000

08000550 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000554:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000556:	4a15      	ldr	r2, [pc, #84]	; (80005ac <MX_USART3_UART_Init+0x5c>)
 8000558:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800055a:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 800055c:	22e1      	movs	r2, #225	; 0xe1
 800055e:	0252      	lsls	r2, r2, #9
 8000560:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000576:	2204      	movs	r2, #4
 8000578:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 800057c:	2200      	movs	r2, #0
 800057e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000582:	2200      	movs	r2, #0
 8000584:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000588:	2200      	movs	r2, #0
 800058a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 800058e:	2200      	movs	r2, #0
 8000590:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000594:	0018      	movs	r0, r3
 8000596:	f004 fb63 	bl	8004c60 <HAL_UART_Init>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800059e:	f000 f8d9 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000194 	.word	0x20000194
 80005ac:	40004800 	.word	0x40004800

080005b0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_PCD_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_USB_PCD_Init+0x44>)
 80005b6:	4a10      	ldr	r2, [pc, #64]	; (80005f8 <MX_USB_PCD_Init+0x48>)
 80005b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_USB_PCD_Init+0x44>)
 80005bc:	2208      	movs	r2, #8
 80005be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_USB_PCD_Init+0x44>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <MX_USB_PCD_Init+0x44>)
 80005c8:	2202      	movs	r2, #2
 80005ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_USB_PCD_Init+0x44>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_USB_PCD_Init+0x44>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_USB_PCD_Init+0x44>)
 80005da:	2200      	movs	r2, #0
 80005dc:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <MX_USB_PCD_Init+0x44>)
 80005e0:	0018      	movs	r0, r3
 80005e2:	f001 fd47 	bl	8002074 <HAL_PCD_Init>
 80005e6:	1e03      	subs	r3, r0, #0
 80005e8:	d001      	beq.n	80005ee <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80005ea:	f000 f8b3 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000260 	.word	0x20000260
 80005f8:	40005c00 	.word	0x40005c00

080005fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_DMA_Init+0x38>)
 8000604:	695a      	ldr	r2, [r3, #20]
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <MX_DMA_Init+0x38>)
 8000608:	2101      	movs	r1, #1
 800060a:	430a      	orrs	r2, r1
 800060c:	615a      	str	r2, [r3, #20]
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_DMA_Init+0x38>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	2201      	movs	r2, #1
 8000614:	4013      	ands	r3, r2
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	200a      	movs	r0, #10
 8000620:	f001 f80a 	bl	8001638 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000624:	200a      	movs	r0, #10
 8000626:	f001 f81c 	bl	8001662 <HAL_NVIC_EnableIRQ>

}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b002      	add	sp, #8
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	40021000 	.word	0x40021000

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b089      	sub	sp, #36	; 0x24
 800063c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	240c      	movs	r4, #12
 8000640:	193b      	adds	r3, r7, r4
 8000642:	0018      	movs	r0, r3
 8000644:	2314      	movs	r3, #20
 8000646:	001a      	movs	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	f006 ff38 	bl	80074be <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b35      	ldr	r3, [pc, #212]	; (8000724 <MX_GPIO_Init+0xec>)
 8000650:	695a      	ldr	r2, [r3, #20]
 8000652:	4b34      	ldr	r3, [pc, #208]	; (8000724 <MX_GPIO_Init+0xec>)
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	0309      	lsls	r1, r1, #12
 8000658:	430a      	orrs	r2, r1
 800065a:	615a      	str	r2, [r3, #20]
 800065c:	4b31      	ldr	r3, [pc, #196]	; (8000724 <MX_GPIO_Init+0xec>)
 800065e:	695a      	ldr	r2, [r3, #20]
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	031b      	lsls	r3, r3, #12
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <MX_GPIO_Init+0xec>)
 800066c:	695a      	ldr	r2, [r3, #20]
 800066e:	4b2d      	ldr	r3, [pc, #180]	; (8000724 <MX_GPIO_Init+0xec>)
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	0289      	lsls	r1, r1, #10
 8000674:	430a      	orrs	r2, r1
 8000676:	615a      	str	r2, [r3, #20]
 8000678:	4b2a      	ldr	r3, [pc, #168]	; (8000724 <MX_GPIO_Init+0xec>)
 800067a:	695a      	ldr	r2, [r3, #20]
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	029b      	lsls	r3, r3, #10
 8000680:	4013      	ands	r3, r2
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b27      	ldr	r3, [pc, #156]	; (8000724 <MX_GPIO_Init+0xec>)
 8000688:	695a      	ldr	r2, [r3, #20]
 800068a:	4b26      	ldr	r3, [pc, #152]	; (8000724 <MX_GPIO_Init+0xec>)
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	02c9      	lsls	r1, r1, #11
 8000690:	430a      	orrs	r2, r1
 8000692:	615a      	str	r2, [r3, #20]
 8000694:	4b23      	ldr	r3, [pc, #140]	; (8000724 <MX_GPIO_Init+0xec>)
 8000696:	695a      	ldr	r2, [r3, #20]
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	02db      	lsls	r3, r3, #11
 800069c:	4013      	ands	r3, r2
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 80006a2:	4921      	ldr	r1, [pc, #132]	; (8000728 <MX_GPIO_Init+0xf0>)
 80006a4:	4b21      	ldr	r3, [pc, #132]	; (800072c <MX_GPIO_Init+0xf4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	0018      	movs	r0, r3
 80006aa:	f001 fb79 	bl	8001da0 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
                           LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	4a1d      	ldr	r2, [pc, #116]	; (8000728 <MX_GPIO_Init+0xf0>)
 80006b2:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	2201      	movs	r2, #1
 80006b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	4a18      	ldr	r2, [pc, #96]	; (800072c <MX_GPIO_Init+0xf4>)
 80006ca:	0019      	movs	r1, r3
 80006cc:	0010      	movs	r0, r2
 80006ce:	f001 f9ef 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 80006d2:	0021      	movs	r1, r4
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2206      	movs	r2, #6
 80006d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2290      	movs	r2, #144	; 0x90
 80006de:	0352      	lsls	r2, r2, #13
 80006e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e8:	000c      	movs	r4, r1
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	4a0f      	ldr	r2, [pc, #60]	; (800072c <MX_GPIO_Init+0xf4>)
 80006ee:	0019      	movs	r1, r3
 80006f0:	0010      	movs	r0, r2
 80006f2:	f001 f9dd 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006f6:	0021      	movs	r1, r4
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2201      	movs	r2, #1
 80006fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2290      	movs	r2, #144	; 0x90
 8000702:	0352      	lsls	r2, r2, #13
 8000704:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800070c:	187a      	adds	r2, r7, r1
 800070e:	2390      	movs	r3, #144	; 0x90
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	0011      	movs	r1, r2
 8000714:	0018      	movs	r0, r3
 8000716:	f001 f9cb 	bl	8001ab0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	b009      	add	sp, #36	; 0x24
 8000720:	bd90      	pop	{r4, r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	40021000 	.word	0x40021000
 8000728:	000003e1 	.word	0x000003e1
 800072c:	48000800 	.word	0x48000800

08000730 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d101      	bne.n	8000746 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000742:	f000 fbbb 	bl	8000ebc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b002      	add	sp, #8
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	40014800 	.word	0x40014800

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	e7fe      	b.n	800075c <Error_Handler+0x8>
	...

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <HAL_MspInit+0x44>)
 8000768:	699a      	ldr	r2, [r3, #24]
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <HAL_MspInit+0x44>)
 800076c:	2101      	movs	r1, #1
 800076e:	430a      	orrs	r2, r1
 8000770:	619a      	str	r2, [r3, #24]
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <HAL_MspInit+0x44>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	2201      	movs	r2, #1
 8000778:	4013      	ands	r3, r2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_MspInit+0x44>)
 8000780:	69da      	ldr	r2, [r3, #28]
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <HAL_MspInit+0x44>)
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	0549      	lsls	r1, r1, #21
 8000788:	430a      	orrs	r2, r1
 800078a:	61da      	str	r2, [r3, #28]
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HAL_MspInit+0x44>)
 800078e:	69da      	ldr	r2, [r3, #28]
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	055b      	lsls	r3, r3, #21
 8000794:	4013      	ands	r3, r2
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b002      	add	sp, #8
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	40021000 	.word	0x40021000

080007a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b08b      	sub	sp, #44	; 0x2c
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	2414      	movs	r4, #20
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	0018      	movs	r0, r3
 80007b6:	2314      	movs	r3, #20
 80007b8:	001a      	movs	r2, r3
 80007ba:	2100      	movs	r1, #0
 80007bc:	f006 fe7f 	bl	80074be <memset>
  if(hcan->Instance==CAN)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a25      	ldr	r2, [pc, #148]	; (800085c <HAL_CAN_MspInit+0xb4>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d144      	bne.n	8000854 <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007ca:	4b25      	ldr	r3, [pc, #148]	; (8000860 <HAL_CAN_MspInit+0xb8>)
 80007cc:	69da      	ldr	r2, [r3, #28]
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <HAL_CAN_MspInit+0xb8>)
 80007d0:	2180      	movs	r1, #128	; 0x80
 80007d2:	0489      	lsls	r1, r1, #18
 80007d4:	430a      	orrs	r2, r1
 80007d6:	61da      	str	r2, [r3, #28]
 80007d8:	4b21      	ldr	r3, [pc, #132]	; (8000860 <HAL_CAN_MspInit+0xb8>)
 80007da:	69da      	ldr	r2, [r3, #28]
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	049b      	lsls	r3, r3, #18
 80007e0:	4013      	ands	r3, r2
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <HAL_CAN_MspInit+0xb8>)
 80007e8:	695a      	ldr	r2, [r3, #20]
 80007ea:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <HAL_CAN_MspInit+0xb8>)
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	02c9      	lsls	r1, r1, #11
 80007f0:	430a      	orrs	r2, r1
 80007f2:	615a      	str	r2, [r3, #20]
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <HAL_CAN_MspInit+0xb8>)
 80007f6:	695a      	ldr	r2, [r3, #20]
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	02db      	lsls	r3, r3, #11
 80007fc:	4013      	ands	r3, r2
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000802:	193b      	adds	r3, r7, r4
 8000804:	22c0      	movs	r2, #192	; 0xc0
 8000806:	0092      	lsls	r2, r2, #2
 8000808:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	0021      	movs	r1, r4
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2202      	movs	r2, #2
 8000810:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2203      	movs	r2, #3
 800081c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2204      	movs	r2, #4
 8000822:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	187b      	adds	r3, r7, r1
 8000826:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <HAL_CAN_MspInit+0xbc>)
 8000828:	0019      	movs	r1, r3
 800082a:	0010      	movs	r0, r2
 800082c:	f001 f940 	bl	8001ab0 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB8);
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	02db      	lsls	r3, r3, #11
 8000834:	0018      	movs	r0, r3
 8000836:	f001 fbff 	bl	8002038 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB9);
 800083a:	2380      	movs	r3, #128	; 0x80
 800083c:	031b      	lsls	r3, r3, #12
 800083e:	0018      	movs	r0, r3
 8000840:	f001 fbfa 	bl	8002038 <HAL_I2CEx_EnableFastModePlus>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 1, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	2101      	movs	r1, #1
 8000848:	201e      	movs	r0, #30
 800084a:	f000 fef5 	bl	8001638 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800084e:	201e      	movs	r0, #30
 8000850:	f000 ff07 	bl	8001662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	b00b      	add	sp, #44	; 0x2c
 800085a:	bd90      	pop	{r4, r7, pc}
 800085c:	40006400 	.word	0x40006400
 8000860:	40021000 	.word	0x40021000
 8000864:	48000400 	.word	0x48000400

08000868 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b08b      	sub	sp, #44	; 0x2c
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	2414      	movs	r4, #20
 8000872:	193b      	adds	r3, r7, r4
 8000874:	0018      	movs	r0, r3
 8000876:	2314      	movs	r3, #20
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f006 fe1f 	bl	80074be <memset>
  if(hi2c->Instance==I2C2)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <HAL_I2C_MspInit+0x90>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d132      	bne.n	80008f0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <HAL_I2C_MspInit+0x94>)
 800088c:	695a      	ldr	r2, [r3, #20]
 800088e:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <HAL_I2C_MspInit+0x94>)
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	02c9      	lsls	r1, r1, #11
 8000894:	430a      	orrs	r2, r1
 8000896:	615a      	str	r2, [r3, #20]
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <HAL_I2C_MspInit+0x94>)
 800089a:	695a      	ldr	r2, [r3, #20]
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	02db      	lsls	r3, r3, #11
 80008a0:	4013      	ands	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	22c0      	movs	r2, #192	; 0xc0
 80008aa:	0112      	lsls	r2, r2, #4
 80008ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ae:	0021      	movs	r1, r4
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2212      	movs	r2, #18
 80008b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2201      	movs	r2, #1
 80008ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2203      	movs	r2, #3
 80008c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2201      	movs	r2, #1
 80008c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	4a0d      	ldr	r2, [pc, #52]	; (8000900 <HAL_I2C_MspInit+0x98>)
 80008cc:	0019      	movs	r1, r3
 80008ce:	0010      	movs	r0, r2
 80008d0:	f001 f8ee 	bl	8001ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_I2C_MspInit+0x94>)
 80008d6:	69da      	ldr	r2, [r3, #28]
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_I2C_MspInit+0x94>)
 80008da:	2180      	movs	r1, #128	; 0x80
 80008dc:	03c9      	lsls	r1, r1, #15
 80008de:	430a      	orrs	r2, r1
 80008e0:	61da      	str	r2, [r3, #28]
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_I2C_MspInit+0x94>)
 80008e4:	69da      	ldr	r2, [r3, #28]
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	03db      	lsls	r3, r3, #15
 80008ea:	4013      	ands	r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b00b      	add	sp, #44	; 0x2c
 80008f6:	bd90      	pop	{r4, r7, pc}
 80008f8:	40005800 	.word	0x40005800
 80008fc:	40021000 	.word	0x40021000
 8000900:	48000400 	.word	0x48000400

08000904 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b08b      	sub	sp, #44	; 0x2c
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	2414      	movs	r4, #20
 800090e:	193b      	adds	r3, r7, r4
 8000910:	0018      	movs	r0, r3
 8000912:	2314      	movs	r3, #20
 8000914:	001a      	movs	r2, r3
 8000916:	2100      	movs	r1, #0
 8000918:	f006 fdd1 	bl	80074be <memset>
  if(hspi->Instance==SPI2)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <HAL_SPI_MspInit+0x90>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d132      	bne.n	800098c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <HAL_SPI_MspInit+0x94>)
 8000928:	69da      	ldr	r2, [r3, #28]
 800092a:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <HAL_SPI_MspInit+0x94>)
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	01c9      	lsls	r1, r1, #7
 8000930:	430a      	orrs	r2, r1
 8000932:	61da      	str	r2, [r3, #28]
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <HAL_SPI_MspInit+0x94>)
 8000936:	69da      	ldr	r2, [r3, #28]
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	01db      	lsls	r3, r3, #7
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_SPI_MspInit+0x94>)
 8000944:	695a      	ldr	r2, [r3, #20]
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <HAL_SPI_MspInit+0x94>)
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	02c9      	lsls	r1, r1, #11
 800094c:	430a      	orrs	r2, r1
 800094e:	615a      	str	r2, [r3, #20]
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <HAL_SPI_MspInit+0x94>)
 8000952:	695a      	ldr	r2, [r3, #20]
 8000954:	2380      	movs	r3, #128	; 0x80
 8000956:	02db      	lsls	r3, r3, #11
 8000958:	4013      	ands	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 800095e:	193b      	adds	r3, r7, r4
 8000960:	22e0      	movs	r2, #224	; 0xe0
 8000962:	0212      	lsls	r2, r2, #8
 8000964:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	0021      	movs	r1, r4
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2202      	movs	r2, #2
 800096c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2203      	movs	r2, #3
 8000978:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000980:	187b      	adds	r3, r7, r1
 8000982:	4a06      	ldr	r2, [pc, #24]	; (800099c <HAL_SPI_MspInit+0x98>)
 8000984:	0019      	movs	r1, r3
 8000986:	0010      	movs	r0, r2
 8000988:	f001 f892 	bl	8001ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b00b      	add	sp, #44	; 0x2c
 8000992:	bd90      	pop	{r4, r7, pc}
 8000994:	40003800 	.word	0x40003800
 8000998:	40021000 	.word	0x40021000
 800099c:	48000400 	.word	0x48000400

080009a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <HAL_TIM_Base_MspInit+0x48>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d115      	bne.n	80009de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <HAL_TIM_Base_MspInit+0x4c>)
 80009b4:	69da      	ldr	r2, [r3, #28]
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <HAL_TIM_Base_MspInit+0x4c>)
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	0049      	lsls	r1, r1, #1
 80009bc:	430a      	orrs	r2, r1
 80009be:	61da      	str	r2, [r3, #28]
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_TIM_Base_MspInit+0x4c>)
 80009c2:	69da      	ldr	r2, [r3, #28]
 80009c4:	2380      	movs	r3, #128	; 0x80
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4013      	ands	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2102      	movs	r1, #2
 80009d2:	2013      	movs	r0, #19
 80009d4:	f000 fe30 	bl	8001638 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80009d8:	2013      	movs	r0, #19
 80009da:	f000 fe42 	bl	8001662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b004      	add	sp, #16
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	40002000 	.word	0x40002000
 80009ec:	40021000 	.word	0x40021000

080009f0 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b08b      	sub	sp, #44	; 0x2c
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	2414      	movs	r4, #20
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	0018      	movs	r0, r3
 80009fe:	2314      	movs	r3, #20
 8000a00:	001a      	movs	r2, r3
 8000a02:	2100      	movs	r1, #0
 8000a04:	f006 fd5b 	bl	80074be <memset>
  if(htsc->Instance==TSC)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a44      	ldr	r2, [pc, #272]	; (8000b20 <HAL_TSC_MspInit+0x130>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d000      	beq.n	8000a14 <HAL_TSC_MspInit+0x24>
 8000a12:	e080      	b.n	8000b16 <HAL_TSC_MspInit+0x126>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000a14:	4b43      	ldr	r3, [pc, #268]	; (8000b24 <HAL_TSC_MspInit+0x134>)
 8000a16:	695a      	ldr	r2, [r3, #20]
 8000a18:	4b42      	ldr	r3, [pc, #264]	; (8000b24 <HAL_TSC_MspInit+0x134>)
 8000a1a:	2180      	movs	r1, #128	; 0x80
 8000a1c:	0449      	lsls	r1, r1, #17
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	615a      	str	r2, [r3, #20]
 8000a22:	4b40      	ldr	r3, [pc, #256]	; (8000b24 <HAL_TSC_MspInit+0x134>)
 8000a24:	695a      	ldr	r2, [r3, #20]
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	045b      	lsls	r3, r3, #17
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	4b3c      	ldr	r3, [pc, #240]	; (8000b24 <HAL_TSC_MspInit+0x134>)
 8000a32:	695a      	ldr	r2, [r3, #20]
 8000a34:	4b3b      	ldr	r3, [pc, #236]	; (8000b24 <HAL_TSC_MspInit+0x134>)
 8000a36:	2180      	movs	r1, #128	; 0x80
 8000a38:	0289      	lsls	r1, r1, #10
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	615a      	str	r2, [r3, #20]
 8000a3e:	4b39      	ldr	r3, [pc, #228]	; (8000b24 <HAL_TSC_MspInit+0x134>)
 8000a40:	695a      	ldr	r2, [r3, #20]
 8000a42:	2380      	movs	r3, #128	; 0x80
 8000a44:	029b      	lsls	r3, r3, #10
 8000a46:	4013      	ands	r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4c:	4b35      	ldr	r3, [pc, #212]	; (8000b24 <HAL_TSC_MspInit+0x134>)
 8000a4e:	695a      	ldr	r2, [r3, #20]
 8000a50:	4b34      	ldr	r3, [pc, #208]	; (8000b24 <HAL_TSC_MspInit+0x134>)
 8000a52:	2180      	movs	r1, #128	; 0x80
 8000a54:	02c9      	lsls	r1, r1, #11
 8000a56:	430a      	orrs	r2, r1
 8000a58:	615a      	str	r2, [r3, #20]
 8000a5a:	4b32      	ldr	r3, [pc, #200]	; (8000b24 <HAL_TSC_MspInit+0x134>)
 8000a5c:	695a      	ldr	r2, [r3, #20]
 8000a5e:	2380      	movs	r3, #128	; 0x80
 8000a60:	02db      	lsls	r3, r3, #11
 8000a62:	4013      	ands	r3, r2
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2244      	movs	r2, #68	; 0x44
 8000a6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2202      	movs	r2, #2
 8000a72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	2203      	movs	r2, #3
 8000a84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	193a      	adds	r2, r7, r4
 8000a88:	2390      	movs	r3, #144	; 0x90
 8000a8a:	05db      	lsls	r3, r3, #23
 8000a8c:	0011      	movs	r1, r2
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f001 f80e 	bl	8001ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	2288      	movs	r2, #136	; 0x88
 8000a98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2212      	movs	r2, #18
 8000a9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	2203      	movs	r2, #3
 8000ab0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	193a      	adds	r2, r7, r4
 8000ab4:	2390      	movs	r3, #144	; 0x90
 8000ab6:	05db      	lsls	r3, r3, #23
 8000ab8:	0011      	movs	r1, r2
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 fff8 	bl	8001ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	2202      	movs	r2, #2
 8000aca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	2203      	movs	r2, #3
 8000adc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	4a11      	ldr	r2, [pc, #68]	; (8000b28 <HAL_TSC_MspInit+0x138>)
 8000ae2:	0019      	movs	r1, r3
 8000ae4:	0010      	movs	r0, r2
 8000ae6:	f000 ffe3 	bl	8001ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000aea:	0021      	movs	r1, r4
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2202      	movs	r2, #2
 8000af0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2212      	movs	r2, #18
 8000af6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2203      	movs	r2, #3
 8000b08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <HAL_TSC_MspInit+0x138>)
 8000b0e:	0019      	movs	r1, r3
 8000b10:	0010      	movs	r0, r2
 8000b12:	f000 ffcd 	bl	8001ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b00b      	add	sp, #44	; 0x2c
 8000b1c:	bd90      	pop	{r4, r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	40024000 	.word	0x40024000
 8000b24:	40021000 	.word	0x40021000
 8000b28:	48000400 	.word	0x48000400

08000b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b08b      	sub	sp, #44	; 0x2c
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	2414      	movs	r4, #20
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f006 fcbd 	bl	80074be <memset>
  if(huart->Instance==USART3)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a37      	ldr	r2, [pc, #220]	; (8000c28 <HAL_UART_MspInit+0xfc>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d167      	bne.n	8000c1e <HAL_UART_MspInit+0xf2>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b4e:	4b37      	ldr	r3, [pc, #220]	; (8000c2c <HAL_UART_MspInit+0x100>)
 8000b50:	69da      	ldr	r2, [r3, #28]
 8000b52:	4b36      	ldr	r3, [pc, #216]	; (8000c2c <HAL_UART_MspInit+0x100>)
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	02c9      	lsls	r1, r1, #11
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	61da      	str	r2, [r3, #28]
 8000b5c:	4b33      	ldr	r3, [pc, #204]	; (8000c2c <HAL_UART_MspInit+0x100>)
 8000b5e:	69da      	ldr	r2, [r3, #28]
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	02db      	lsls	r3, r3, #11
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	4b30      	ldr	r3, [pc, #192]	; (8000c2c <HAL_UART_MspInit+0x100>)
 8000b6c:	695a      	ldr	r2, [r3, #20]
 8000b6e:	4b2f      	ldr	r3, [pc, #188]	; (8000c2c <HAL_UART_MspInit+0x100>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	0309      	lsls	r1, r1, #12
 8000b74:	430a      	orrs	r2, r1
 8000b76:	615a      	str	r2, [r3, #20]
 8000b78:	4b2c      	ldr	r3, [pc, #176]	; (8000c2c <HAL_UART_MspInit+0x100>)
 8000b7a:	695a      	ldr	r2, [r3, #20]
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	031b      	lsls	r3, r3, #12
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	2281      	movs	r2, #129	; 0x81
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	0021      	movs	r1, r4
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2202      	movs	r2, #2
 8000b94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	4a21      	ldr	r2, [pc, #132]	; (8000c30 <HAL_UART_MspInit+0x104>)
 8000bac:	0019      	movs	r1, r3
 8000bae:	0010      	movs	r0, r2
 8000bb0:	f000 ff7e 	bl	8001ab0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <HAL_UART_MspInit+0x108>)
 8000bb6:	4a20      	ldr	r2, [pc, #128]	; (8000c38 <HAL_UART_MspInit+0x10c>)
 8000bb8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <HAL_UART_MspInit+0x108>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <HAL_UART_MspInit+0x108>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <HAL_UART_MspInit+0x108>)
 8000bc8:	2280      	movs	r2, #128	; 0x80
 8000bca:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <HAL_UART_MspInit+0x108>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <HAL_UART_MspInit+0x108>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <HAL_UART_MspInit+0x108>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_UART_MspInit+0x108>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <HAL_UART_MspInit+0x108>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 fd4c 	bl	8001684 <HAL_DMA_Init>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d001      	beq.n	8000bf4 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000bf0:	f7ff fdb0 	bl	8000754 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <HAL_UART_MspInit+0x110>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_UART_MspInit+0x110>)
 8000bfa:	2180      	movs	r1, #128	; 0x80
 8000bfc:	04c9      	lsls	r1, r1, #19
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <HAL_UART_MspInit+0x108>)
 8000c06:	675a      	str	r2, [r3, #116]	; 0x74
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <HAL_UART_MspInit+0x108>)
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	201d      	movs	r0, #29
 8000c14:	f000 fd10 	bl	8001638 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000c18:	201d      	movs	r0, #29
 8000c1a:	f000 fd22 	bl	8001662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b00b      	add	sp, #44	; 0x2c
 8000c24:	bd90      	pop	{r4, r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	40004800 	.word	0x40004800
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	48000800 	.word	0x48000800
 8000c34:	2000021c 	.word	0x2000021c
 8000c38:	40020030 	.word	0x40020030
 8000c3c:	40010000 	.word	0x40010000

08000c40 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <HAL_PCD_MspInit+0x48>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d115      	bne.n	8000c7e <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_PCD_MspInit+0x4c>)
 8000c54:	69da      	ldr	r2, [r3, #28]
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <HAL_PCD_MspInit+0x4c>)
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	0409      	lsls	r1, r1, #16
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	61da      	str	r2, [r3, #28]
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_PCD_MspInit+0x4c>)
 8000c62:	69da      	ldr	r2, [r3, #28]
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	041b      	lsls	r3, r3, #16
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_IRQn, 2, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2102      	movs	r1, #2
 8000c72:	201f      	movs	r0, #31
 8000c74:	f000 fce0 	bl	8001638 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8000c78:	201f      	movs	r0, #31
 8000c7a:	f000 fcf2 	bl	8001662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b004      	add	sp, #16
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	40005c00 	.word	0x40005c00
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b5b0      	push	{r4, r5, r7, lr}
 8000c92:	b08c      	sub	sp, #48	; 0x30
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000ca0:	4b38      	ldr	r3, [pc, #224]	; (8000d84 <HAL_InitTick+0xf4>)
 8000ca2:	699a      	ldr	r2, [r3, #24]
 8000ca4:	4b37      	ldr	r3, [pc, #220]	; (8000d84 <HAL_InitTick+0xf4>)
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	02c9      	lsls	r1, r1, #11
 8000caa:	430a      	orrs	r2, r1
 8000cac:	619a      	str	r2, [r3, #24]
 8000cae:	4b35      	ldr	r3, [pc, #212]	; (8000d84 <HAL_InitTick+0xf4>)
 8000cb0:	699a      	ldr	r2, [r3, #24]
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	02db      	lsls	r3, r3, #11
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	18fa      	adds	r2, r7, r3
 8000cc0:	2410      	movs	r4, #16
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	0011      	movs	r1, r2
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f003 fadc 	bl	8004284 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ccc:	193b      	adds	r3, r7, r4
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM17 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d104      	bne.n	8000ce2 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cd8:	f003 fabe 	bl	8004258 <HAL_RCC_GetPCLK1Freq>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ce0:	e004      	b.n	8000cec <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ce2:	f003 fab9 	bl	8004258 <HAL_RCC_GetPCLK1Freq>
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cee:	4926      	ldr	r1, [pc, #152]	; (8000d88 <HAL_InitTick+0xf8>)
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff fa09 	bl	8000108 <__udivsi3>
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000cfc:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <HAL_InitTick+0xfc>)
 8000cfe:	4a24      	ldr	r2, [pc, #144]	; (8000d90 <HAL_InitTick+0x100>)
 8000d00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000d02:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <HAL_InitTick+0xfc>)
 8000d04:	4a23      	ldr	r2, [pc, #140]	; (8000d94 <HAL_InitTick+0x104>)
 8000d06:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000d08:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <HAL_InitTick+0xfc>)
 8000d0a:	6a3a      	ldr	r2, [r7, #32]
 8000d0c:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <HAL_InitTick+0xfc>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d14:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <HAL_InitTick+0xfc>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <HAL_InitTick+0xfc>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8000d20:	252b      	movs	r5, #43	; 0x2b
 8000d22:	197c      	adds	r4, r7, r5
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_InitTick+0xfc>)
 8000d26:	0018      	movs	r0, r3
 8000d28:	f003 fc8c 	bl	8004644 <HAL_TIM_Base_Init>
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000d30:	197b      	adds	r3, r7, r5
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d11e      	bne.n	8000d76 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8000d38:	197c      	adds	r4, r7, r5
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <HAL_InitTick+0xfc>)
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f003 fcd1 	bl	80046e4 <HAL_TIM_Base_Start_IT>
 8000d42:	0003      	movs	r3, r0
 8000d44:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000d46:	197b      	adds	r3, r7, r5
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d113      	bne.n	8000d76 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000d4e:	2016      	movs	r0, #22
 8000d50:	f000 fc87 	bl	8001662 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d809      	bhi.n	8000d6e <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	0019      	movs	r1, r3
 8000d60:	2016      	movs	r0, #22
 8000d62:	f000 fc69 	bl	8001638 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_InitTick+0x108>)
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	e003      	b.n	8000d76 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8000d6e:	232b      	movs	r3, #43	; 0x2b
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	2201      	movs	r2, #1
 8000d74:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000d76:	232b      	movs	r3, #43	; 0x2b
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	781b      	ldrb	r3, [r3, #0]
}
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b00c      	add	sp, #48	; 0x30
 8000d82:	bdb0      	pop	{r4, r5, r7, pc}
 8000d84:	40021000 	.word	0x40021000
 8000d88:	000f4240 	.word	0x000f4240
 8000d8c:	20000554 	.word	0x20000554
 8000d90:	40014800 	.word	0x40014800
 8000d94:	000003e7 	.word	0x000003e7
 8000d98:	20000004 	.word	0x20000004

08000d9c <HardFault_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <HardFault_Handler+0x4>
	...

08000da4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000daa:	0018      	movs	r0, r3
 8000dac:	f000 fd95 	bl	80018da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	2000021c 	.word	0x2000021c

08000dbc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <TIM14_IRQHandler+0x14>)
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f003 fce0 	bl	8004788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	20000108 	.word	0x20000108

08000dd4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <TIM17_IRQHandler+0x14>)
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f003 fcd4 	bl	8004788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	20000554 	.word	0x20000554

08000dec <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <USART3_4_IRQHandler+0x14>)
 8000df2:	0018      	movs	r0, r3
 8000df4:	f003 ff88 	bl	8004d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	20000194 	.word	0x20000194

08000e04 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <CEC_CAN_IRQHandler+0x14>)
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f000 f970 	bl	80010f0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	20000028 	.word	0x20000028

08000e1c <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <USB_IRQHandler+0x14>)
 8000e22:	0018      	movs	r0, r3
 8000e24:	f001 fa26 	bl	8002274 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000e28:	46c0      	nop			; (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	20000260 	.word	0x20000260

08000e34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e40:	480d      	ldr	r0, [pc, #52]	; (8000e78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e42:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e44:	f7ff fff6 	bl	8000e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e48:	480c      	ldr	r0, [pc, #48]	; (8000e7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e4a:	490d      	ldr	r1, [pc, #52]	; (8000e80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <LoopForever+0xe>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e60:	4c0a      	ldr	r4, [pc, #40]	; (8000e8c <LoopForever+0x16>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e6e:	f006 faf9 	bl	8007464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e72:	f7ff f9d5 	bl	8000220 <main>

08000e76 <LoopForever>:

LoopForever:
    b LoopForever
 8000e76:	e7fe      	b.n	8000e76 <LoopForever>
  ldr   r0, =_estack
 8000e78:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e84:	08007528 	.word	0x08007528
  ldr r2, =_sbss
 8000e88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e8c:	20000724 	.word	0x20000724

08000e90 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC1_COMP_IRQHandler>
	...

08000e94 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <HAL_Init+0x24>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_Init+0x24>)
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f7ff fef3 	bl	8000c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eaa:	f7ff fc59 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	40022000 	.word	0x40022000

08000ebc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <HAL_IncTick+0x1c>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <HAL_IncTick+0x20>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	18d2      	adds	r2, r2, r3
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <HAL_IncTick+0x20>)
 8000ece:	601a      	str	r2, [r3, #0]
}
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	2000059c 	.word	0x2000059c

08000ee0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b02      	ldr	r3, [pc, #8]	; (8000ef0 <HAL_GetTick+0x10>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	2000059c 	.word	0x2000059c

08000ef4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e0f0      	b.n	80010e8 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2220      	movs	r2, #32
 8000f0a:	5c9b      	ldrb	r3, [r3, r2]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d103      	bne.n	8000f1a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff fc47 	bl	80007a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2101      	movs	r1, #1
 8000f26:	430a      	orrs	r2, r1
 8000f28:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f2a:	f7ff ffd9 	bl	8000ee0 <HAL_GetTick>
 8000f2e:	0003      	movs	r3, r0
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f32:	e013      	b.n	8000f5c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f34:	f7ff ffd4 	bl	8000ee0 <HAL_GetTick>
 8000f38:	0002      	movs	r2, r0
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b0a      	cmp	r3, #10
 8000f40:	d90c      	bls.n	8000f5c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f46:	2280      	movs	r2, #128	; 0x80
 8000f48:	0292      	lsls	r2, r2, #10
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2220      	movs	r2, #32
 8000f54:	2105      	movs	r1, #5
 8000f56:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e0c5      	b.n	80010e8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	4013      	ands	r3, r2
 8000f66:	d0e5      	beq.n	8000f34 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2102      	movs	r1, #2
 8000f74:	438a      	bics	r2, r1
 8000f76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f78:	f7ff ffb2 	bl	8000ee0 <HAL_GetTick>
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f80:	e013      	b.n	8000faa <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f82:	f7ff ffad 	bl	8000ee0 <HAL_GetTick>
 8000f86:	0002      	movs	r2, r0
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2b0a      	cmp	r3, #10
 8000f8e:	d90c      	bls.n	8000faa <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	0292      	lsls	r2, r2, #10
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	2105      	movs	r1, #5
 8000fa4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e09e      	b.n	80010e8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	d1e5      	bne.n	8000f82 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7e1b      	ldrb	r3, [r3, #24]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d108      	bne.n	8000fd0 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	e007      	b.n	8000fe0 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2180      	movs	r1, #128	; 0x80
 8000fdc:	438a      	bics	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7e5b      	ldrb	r3, [r3, #25]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d108      	bne.n	8000ffa <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2140      	movs	r1, #64	; 0x40
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	e007      	b.n	800100a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2140      	movs	r1, #64	; 0x40
 8001006:	438a      	bics	r2, r1
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7e9b      	ldrb	r3, [r3, #26]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d108      	bne.n	8001024 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2120      	movs	r1, #32
 800101e:	430a      	orrs	r2, r1
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	e007      	b.n	8001034 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2120      	movs	r1, #32
 8001030:	438a      	bics	r2, r1
 8001032:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7edb      	ldrb	r3, [r3, #27]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d108      	bne.n	800104e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2110      	movs	r1, #16
 8001048:	438a      	bics	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	e007      	b.n	800105e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2110      	movs	r1, #16
 800105a:	430a      	orrs	r2, r1
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	7f1b      	ldrb	r3, [r3, #28]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d108      	bne.n	8001078 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2108      	movs	r1, #8
 8001072:	430a      	orrs	r2, r1
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	e007      	b.n	8001088 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2108      	movs	r1, #8
 8001084:	438a      	bics	r2, r1
 8001086:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	7f5b      	ldrb	r3, [r3, #29]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d108      	bne.n	80010a2 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2104      	movs	r1, #4
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	e007      	b.n	80010b2 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2104      	movs	r1, #4
 80010ae:	438a      	bics	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	431a      	orrs	r2, r3
 80010c8:	0011      	movs	r1, r2
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	1e5a      	subs	r2, r3, #1
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2220      	movs	r2, #32
 80010e2:	2101      	movs	r1, #1
 80010e4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	0018      	movs	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b004      	add	sp, #16
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	2201      	movs	r2, #1
 8001130:	4013      	ands	r3, r2
 8001132:	d100      	bne.n	8001136 <HAL_CAN_IRQHandler+0x46>
 8001134:	e084      	b.n	8001240 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	2201      	movs	r2, #1
 800113a:	4013      	ands	r3, r2
 800113c:	d024      	beq.n	8001188 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2201      	movs	r2, #1
 8001144:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2202      	movs	r2, #2
 800114a:	4013      	ands	r3, r2
 800114c:	d004      	beq.n	8001158 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	0018      	movs	r0, r3
 8001152:	f000 f981 	bl	8001458 <HAL_CAN_TxMailbox0CompleteCallback>
 8001156:	e017      	b.n	8001188 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	2204      	movs	r2, #4
 800115c:	4013      	ands	r3, r2
 800115e:	d005      	beq.n	800116c <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	2280      	movs	r2, #128	; 0x80
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	4313      	orrs	r3, r2
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
 800116a:	e00d      	b.n	8001188 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	2208      	movs	r2, #8
 8001170:	4013      	ands	r3, r2
 8001172:	d005      	beq.n	8001180 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	2280      	movs	r2, #128	; 0x80
 8001178:	0152      	lsls	r2, r2, #5
 800117a:	4313      	orrs	r3, r2
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
 800117e:	e003      	b.n	8001188 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	0018      	movs	r0, r3
 8001184:	f000 f980 	bl	8001488 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	4013      	ands	r3, r2
 8001190:	d028      	beq.n	80011e4 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2280      	movs	r2, #128	; 0x80
 8001198:	0052      	lsls	r2, r2, #1
 800119a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4013      	ands	r3, r2
 80011a4:	d004      	beq.n	80011b0 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	0018      	movs	r0, r3
 80011aa:	f000 f95d 	bl	8001468 <HAL_CAN_TxMailbox1CompleteCallback>
 80011ae:	e019      	b.n	80011e4 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4013      	ands	r3, r2
 80011b8:	d005      	beq.n	80011c6 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	2280      	movs	r2, #128	; 0x80
 80011be:	0192      	lsls	r2, r2, #6
 80011c0:	4313      	orrs	r3, r2
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
 80011c4:	e00e      	b.n	80011e4 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	011b      	lsls	r3, r3, #4
 80011cc:	4013      	ands	r3, r2
 80011ce:	d005      	beq.n	80011dc <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	2280      	movs	r2, #128	; 0x80
 80011d4:	01d2      	lsls	r2, r2, #7
 80011d6:	4313      	orrs	r3, r2
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
 80011da:	e003      	b.n	80011e4 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	0018      	movs	r0, r3
 80011e0:	f000 f95a 	bl	8001498 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	025b      	lsls	r3, r3, #9
 80011ea:	4013      	ands	r3, r2
 80011ec:	d028      	beq.n	8001240 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	0252      	lsls	r2, r2, #9
 80011f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	029b      	lsls	r3, r3, #10
 80011fe:	4013      	ands	r3, r2
 8001200:	d004      	beq.n	800120c <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	0018      	movs	r0, r3
 8001206:	f000 f937 	bl	8001478 <HAL_CAN_TxMailbox2CompleteCallback>
 800120a:	e019      	b.n	8001240 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	02db      	lsls	r3, r3, #11
 8001212:	4013      	ands	r3, r2
 8001214:	d005      	beq.n	8001222 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	2280      	movs	r2, #128	; 0x80
 800121a:	0212      	lsls	r2, r2, #8
 800121c:	4313      	orrs	r3, r2
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
 8001220:	e00e      	b.n	8001240 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	031b      	lsls	r3, r3, #12
 8001228:	4013      	ands	r3, r2
 800122a:	d005      	beq.n	8001238 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	2280      	movs	r2, #128	; 0x80
 8001230:	0252      	lsls	r2, r2, #9
 8001232:	4313      	orrs	r3, r2
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
 8001236:	e003      	b.n	8001240 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	0018      	movs	r0, r3
 800123c:	f000 f934 	bl	80014a8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001240:	6a3b      	ldr	r3, [r7, #32]
 8001242:	2208      	movs	r2, #8
 8001244:	4013      	ands	r3, r2
 8001246:	d00c      	beq.n	8001262 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	2210      	movs	r2, #16
 800124c:	4013      	ands	r3, r2
 800124e:	d008      	beq.n	8001262 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	0092      	lsls	r2, r2, #2
 8001256:	4313      	orrs	r3, r2
 8001258:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2210      	movs	r2, #16
 8001260:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	2204      	movs	r2, #4
 8001266:	4013      	ands	r3, r2
 8001268:	d00b      	beq.n	8001282 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	2208      	movs	r2, #8
 800126e:	4013      	ands	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2208      	movs	r2, #8
 8001278:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	0018      	movs	r0, r3
 800127e:	f000 f923 	bl	80014c8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	2202      	movs	r2, #2
 8001286:	4013      	ands	r3, r2
 8001288:	d009      	beq.n	800129e <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2203      	movs	r2, #3
 8001292:	4013      	ands	r3, r2
 8001294:	d003      	beq.n	800129e <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	0018      	movs	r0, r3
 800129a:	f000 f90d 	bl	80014b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	2240      	movs	r2, #64	; 0x40
 80012a2:	4013      	ands	r3, r2
 80012a4:	d00c      	beq.n	80012c0 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	2210      	movs	r2, #16
 80012aa:	4013      	ands	r3, r2
 80012ac:	d008      	beq.n	80012c0 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	00d2      	lsls	r2, r2, #3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2210      	movs	r2, #16
 80012be:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	2220      	movs	r2, #32
 80012c4:	4013      	ands	r3, r2
 80012c6:	d00b      	beq.n	80012e0 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	2208      	movs	r2, #8
 80012cc:	4013      	ands	r3, r2
 80012ce:	d007      	beq.n	80012e0 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2208      	movs	r2, #8
 80012d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	0018      	movs	r0, r3
 80012dc:	f000 f904 	bl	80014e8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80012e0:	6a3b      	ldr	r3, [r7, #32]
 80012e2:	2210      	movs	r2, #16
 80012e4:	4013      	ands	r3, r2
 80012e6:	d009      	beq.n	80012fc <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	2203      	movs	r2, #3
 80012f0:	4013      	ands	r3, r2
 80012f2:	d003      	beq.n	80012fc <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	0018      	movs	r0, r3
 80012f8:	f000 f8ee 	bl	80014d8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80012fc:	6a3a      	ldr	r2, [r7, #32]
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	029b      	lsls	r3, r3, #10
 8001302:	4013      	ands	r3, r2
 8001304:	d00b      	beq.n	800131e <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	2210      	movs	r2, #16
 800130a:	4013      	ands	r3, r2
 800130c:	d007      	beq.n	800131e <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2210      	movs	r2, #16
 8001314:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	0018      	movs	r0, r3
 800131a:	f000 f8ed 	bl	80014f8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800131e:	6a3a      	ldr	r2, [r7, #32]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	025b      	lsls	r3, r3, #9
 8001324:	4013      	ands	r3, r2
 8001326:	d00b      	beq.n	8001340 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	2208      	movs	r2, #8
 800132c:	4013      	ands	r3, r2
 800132e:	d007      	beq.n	8001340 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2208      	movs	r2, #8
 8001336:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	0018      	movs	r0, r3
 800133c:	f000 f8e4 	bl	8001508 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001340:	6a3a      	ldr	r2, [r7, #32]
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	4013      	ands	r3, r2
 8001348:	d100      	bne.n	800134c <HAL_CAN_IRQHandler+0x25c>
 800134a:	e074      	b.n	8001436 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2204      	movs	r2, #4
 8001350:	4013      	ands	r3, r2
 8001352:	d100      	bne.n	8001356 <HAL_CAN_IRQHandler+0x266>
 8001354:	e06b      	b.n	800142e <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001356:	6a3a      	ldr	r2, [r7, #32]
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4013      	ands	r3, r2
 800135e:	d007      	beq.n	8001370 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2201      	movs	r2, #1
 8001364:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001366:	d003      	beq.n	8001370 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	2201      	movs	r2, #1
 800136c:	4313      	orrs	r3, r2
 800136e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001370:	6a3a      	ldr	r2, [r7, #32]
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4013      	ands	r3, r2
 8001378:	d007      	beq.n	800138a <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2202      	movs	r2, #2
 800137e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001380:	d003      	beq.n	800138a <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	2202      	movs	r2, #2
 8001386:	4313      	orrs	r3, r2
 8001388:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800138a:	6a3a      	ldr	r2, [r7, #32]
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4013      	ands	r3, r2
 8001392:	d007      	beq.n	80013a4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2204      	movs	r2, #4
 8001398:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800139a:	d003      	beq.n	80013a4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	2204      	movs	r2, #4
 80013a0:	4313      	orrs	r3, r2
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013a4:	6a3a      	ldr	r2, [r7, #32]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	4013      	ands	r3, r2
 80013ac:	d03f      	beq.n	800142e <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2270      	movs	r2, #112	; 0x70
 80013b2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013b4:	d03b      	beq.n	800142e <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2270      	movs	r2, #112	; 0x70
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b60      	cmp	r3, #96	; 0x60
 80013be:	d027      	beq.n	8001410 <HAL_CAN_IRQHandler+0x320>
 80013c0:	d82c      	bhi.n	800141c <HAL_CAN_IRQHandler+0x32c>
 80013c2:	2b50      	cmp	r3, #80	; 0x50
 80013c4:	d01f      	beq.n	8001406 <HAL_CAN_IRQHandler+0x316>
 80013c6:	d829      	bhi.n	800141c <HAL_CAN_IRQHandler+0x32c>
 80013c8:	2b40      	cmp	r3, #64	; 0x40
 80013ca:	d017      	beq.n	80013fc <HAL_CAN_IRQHandler+0x30c>
 80013cc:	d826      	bhi.n	800141c <HAL_CAN_IRQHandler+0x32c>
 80013ce:	2b30      	cmp	r3, #48	; 0x30
 80013d0:	d00f      	beq.n	80013f2 <HAL_CAN_IRQHandler+0x302>
 80013d2:	d823      	bhi.n	800141c <HAL_CAN_IRQHandler+0x32c>
 80013d4:	2b10      	cmp	r3, #16
 80013d6:	d002      	beq.n	80013de <HAL_CAN_IRQHandler+0x2ee>
 80013d8:	2b20      	cmp	r3, #32
 80013da:	d005      	beq.n	80013e8 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80013dc:	e01e      	b.n	800141c <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	2208      	movs	r2, #8
 80013e2:	4313      	orrs	r3, r2
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013e6:	e01a      	b.n	800141e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	2210      	movs	r2, #16
 80013ec:	4313      	orrs	r3, r2
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013f0:	e015      	b.n	800141e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	2220      	movs	r2, #32
 80013f6:	4313      	orrs	r3, r2
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013fa:	e010      	b.n	800141e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	2240      	movs	r2, #64	; 0x40
 8001400:	4313      	orrs	r3, r2
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001404:	e00b      	b.n	800141e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	2280      	movs	r2, #128	; 0x80
 800140a:	4313      	orrs	r3, r2
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800140e:	e006      	b.n	800141e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	0052      	lsls	r2, r2, #1
 8001416:	4313      	orrs	r3, r2
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800141a:	e000      	b.n	800141e <HAL_CAN_IRQHandler+0x32e>
            break;
 800141c:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	699a      	ldr	r2, [r3, #24]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2170      	movs	r1, #112	; 0x70
 800142a:	438a      	bics	r2, r1
 800142c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2204      	movs	r2, #4
 8001434:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	2b00      	cmp	r3, #0
 800143a:	d009      	beq.n	8001450 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	0018      	movs	r0, r3
 800144c:	f000 f864 	bl	8001518 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b00a      	add	sp, #40	; 0x28
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b002      	add	sp, #8
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b002      	add	sp, #8
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001480:	46c0      	nop			; (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	b002      	add	sp, #8
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	b002      	add	sp, #8
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80014a0:	46c0      	nop			; (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b002      	add	sp, #8
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80014b0:	46c0      	nop			; (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b002      	add	sp, #8
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b002      	add	sp, #8
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b002      	add	sp, #8
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80014e0:	46c0      	nop			; (mov r8, r8)
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b002      	add	sp, #8
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80014f0:	46c0      	nop			; (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b002      	add	sp, #8
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001500:	46c0      	nop			; (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	b002      	add	sp, #8
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001510:	46c0      	nop			; (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	b002      	add	sp, #8
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	b002      	add	sp, #8
 8001526:	bd80      	pop	{r7, pc}

08001528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	0002      	movs	r2, r0
 8001530:	1dfb      	adds	r3, r7, #7
 8001532:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001534:	1dfb      	adds	r3, r7, #7
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b7f      	cmp	r3, #127	; 0x7f
 800153a:	d809      	bhi.n	8001550 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153c:	1dfb      	adds	r3, r7, #7
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	001a      	movs	r2, r3
 8001542:	231f      	movs	r3, #31
 8001544:	401a      	ands	r2, r3
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <__NVIC_EnableIRQ+0x30>)
 8001548:	2101      	movs	r1, #1
 800154a:	4091      	lsls	r1, r2
 800154c:	000a      	movs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]
  }
}
 8001550:	46c0      	nop			; (mov r8, r8)
 8001552:	46bd      	mov	sp, r7
 8001554:	b002      	add	sp, #8
 8001556:	bd80      	pop	{r7, pc}
 8001558:	e000e100 	.word	0xe000e100

0800155c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	0002      	movs	r2, r0
 8001564:	6039      	str	r1, [r7, #0]
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800156a:	1dfb      	adds	r3, r7, #7
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b7f      	cmp	r3, #127	; 0x7f
 8001570:	d828      	bhi.n	80015c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001572:	4a2f      	ldr	r2, [pc, #188]	; (8001630 <__NVIC_SetPriority+0xd4>)
 8001574:	1dfb      	adds	r3, r7, #7
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b25b      	sxtb	r3, r3
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	33c0      	adds	r3, #192	; 0xc0
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	589b      	ldr	r3, [r3, r2]
 8001582:	1dfa      	adds	r2, r7, #7
 8001584:	7812      	ldrb	r2, [r2, #0]
 8001586:	0011      	movs	r1, r2
 8001588:	2203      	movs	r2, #3
 800158a:	400a      	ands	r2, r1
 800158c:	00d2      	lsls	r2, r2, #3
 800158e:	21ff      	movs	r1, #255	; 0xff
 8001590:	4091      	lsls	r1, r2
 8001592:	000a      	movs	r2, r1
 8001594:	43d2      	mvns	r2, r2
 8001596:	401a      	ands	r2, r3
 8001598:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	019b      	lsls	r3, r3, #6
 800159e:	22ff      	movs	r2, #255	; 0xff
 80015a0:	401a      	ands	r2, r3
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	0018      	movs	r0, r3
 80015a8:	2303      	movs	r3, #3
 80015aa:	4003      	ands	r3, r0
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b0:	481f      	ldr	r0, [pc, #124]	; (8001630 <__NVIC_SetPriority+0xd4>)
 80015b2:	1dfb      	adds	r3, r7, #7
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	430a      	orrs	r2, r1
 80015bc:	33c0      	adds	r3, #192	; 0xc0
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015c2:	e031      	b.n	8001628 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015c4:	4a1b      	ldr	r2, [pc, #108]	; (8001634 <__NVIC_SetPriority+0xd8>)
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	0019      	movs	r1, r3
 80015cc:	230f      	movs	r3, #15
 80015ce:	400b      	ands	r3, r1
 80015d0:	3b08      	subs	r3, #8
 80015d2:	089b      	lsrs	r3, r3, #2
 80015d4:	3306      	adds	r3, #6
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	18d3      	adds	r3, r2, r3
 80015da:	3304      	adds	r3, #4
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	1dfa      	adds	r2, r7, #7
 80015e0:	7812      	ldrb	r2, [r2, #0]
 80015e2:	0011      	movs	r1, r2
 80015e4:	2203      	movs	r2, #3
 80015e6:	400a      	ands	r2, r1
 80015e8:	00d2      	lsls	r2, r2, #3
 80015ea:	21ff      	movs	r1, #255	; 0xff
 80015ec:	4091      	lsls	r1, r2
 80015ee:	000a      	movs	r2, r1
 80015f0:	43d2      	mvns	r2, r2
 80015f2:	401a      	ands	r2, r3
 80015f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	019b      	lsls	r3, r3, #6
 80015fa:	22ff      	movs	r2, #255	; 0xff
 80015fc:	401a      	ands	r2, r3
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	0018      	movs	r0, r3
 8001604:	2303      	movs	r3, #3
 8001606:	4003      	ands	r3, r0
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800160c:	4809      	ldr	r0, [pc, #36]	; (8001634 <__NVIC_SetPriority+0xd8>)
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	001c      	movs	r4, r3
 8001614:	230f      	movs	r3, #15
 8001616:	4023      	ands	r3, r4
 8001618:	3b08      	subs	r3, #8
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	430a      	orrs	r2, r1
 800161e:	3306      	adds	r3, #6
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	18c3      	adds	r3, r0, r3
 8001624:	3304      	adds	r3, #4
 8001626:	601a      	str	r2, [r3, #0]
}
 8001628:	46c0      	nop			; (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	b003      	add	sp, #12
 800162e:	bd90      	pop	{r4, r7, pc}
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	210f      	movs	r1, #15
 8001644:	187b      	adds	r3, r7, r1
 8001646:	1c02      	adds	r2, r0, #0
 8001648:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	187b      	adds	r3, r7, r1
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b25b      	sxtb	r3, r3
 8001652:	0011      	movs	r1, r2
 8001654:	0018      	movs	r0, r3
 8001656:	f7ff ff81 	bl	800155c <__NVIC_SetPriority>
}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	46bd      	mov	sp, r7
 800165e:	b004      	add	sp, #16
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	0002      	movs	r2, r0
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b25b      	sxtb	r3, r3
 8001674:	0018      	movs	r0, r3
 8001676:	f7ff ff57 	bl	8001528 <__NVIC_EnableIRQ>
}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	46bd      	mov	sp, r7
 800167e:	b002      	add	sp, #8
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e036      	b.n	8001708 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2221      	movs	r2, #33	; 0x21
 800169e:	2102      	movs	r1, #2
 80016a0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4a18      	ldr	r2, [pc, #96]	; (8001710 <HAL_DMA_Init+0x8c>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	4313      	orrs	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	0018      	movs	r0, r3
 80016ec:	f000 f9c4 	bl	8001a78 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2221      	movs	r2, #33	; 0x21
 80016fa:	2101      	movs	r1, #1
 80016fc:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2220      	movs	r2, #32
 8001702:	2100      	movs	r1, #0
 8001704:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	0018      	movs	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	b004      	add	sp, #16
 800170e:	bd80      	pop	{r7, pc}
 8001710:	ffffc00f 	.word	0xffffc00f

08001714 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
 8001720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001722:	2317      	movs	r3, #23
 8001724:	18fb      	adds	r3, r7, r3
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2220      	movs	r2, #32
 800172e:	5c9b      	ldrb	r3, [r3, r2]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <HAL_DMA_Start_IT+0x24>
 8001734:	2302      	movs	r3, #2
 8001736:	e04f      	b.n	80017d8 <HAL_DMA_Start_IT+0xc4>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2220      	movs	r2, #32
 800173c:	2101      	movs	r1, #1
 800173e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2221      	movs	r2, #33	; 0x21
 8001744:	5c9b      	ldrb	r3, [r3, r2]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b01      	cmp	r3, #1
 800174a:	d13a      	bne.n	80017c2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2221      	movs	r2, #33	; 0x21
 8001750:	2102      	movs	r1, #2
 8001752:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2101      	movs	r1, #1
 8001766:	438a      	bics	r2, r1
 8001768:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	68b9      	ldr	r1, [r7, #8]
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 f954 	bl	8001a1e <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	2b00      	cmp	r3, #0
 800177c:	d008      	beq.n	8001790 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	210e      	movs	r1, #14
 800178a:	430a      	orrs	r2, r1
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e00f      	b.n	80017b0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	210a      	movs	r1, #10
 800179c:	430a      	orrs	r2, r1
 800179e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2104      	movs	r1, #4
 80017ac:	438a      	bics	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2101      	movs	r1, #1
 80017bc:	430a      	orrs	r2, r1
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	e007      	b.n	80017d2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2220      	movs	r2, #32
 80017c6:	2100      	movs	r1, #0
 80017c8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80017ca:	2317      	movs	r3, #23
 80017cc:	18fb      	adds	r3, r7, r3
 80017ce:	2202      	movs	r2, #2
 80017d0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80017d2:	2317      	movs	r3, #23
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	781b      	ldrb	r3, [r3, #0]
}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	b006      	add	sp, #24
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2221      	movs	r2, #33	; 0x21
 80017ec:	5c9b      	ldrb	r3, [r3, r2]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d008      	beq.n	8001806 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2204      	movs	r2, #4
 80017f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2220      	movs	r2, #32
 80017fe:	2100      	movs	r1, #0
 8001800:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e020      	b.n	8001848 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	210e      	movs	r1, #14
 8001812:	438a      	bics	r2, r1
 8001814:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2101      	movs	r1, #1
 8001822:	438a      	bics	r2, r1
 8001824:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182e:	2101      	movs	r1, #1
 8001830:	4091      	lsls	r1, r2
 8001832:	000a      	movs	r2, r1
 8001834:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2221      	movs	r2, #33	; 0x21
 800183a:	2101      	movs	r1, #1
 800183c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2220      	movs	r2, #32
 8001842:	2100      	movs	r1, #0
 8001844:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	0018      	movs	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	b002      	add	sp, #8
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001858:	210f      	movs	r1, #15
 800185a:	187b      	adds	r3, r7, r1
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2221      	movs	r2, #33	; 0x21
 8001864:	5c9b      	ldrb	r3, [r3, r2]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d006      	beq.n	800187a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2204      	movs	r2, #4
 8001870:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001872:	187b      	adds	r3, r7, r1
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
 8001878:	e028      	b.n	80018cc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	210e      	movs	r1, #14
 8001886:	438a      	bics	r2, r1
 8001888:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2101      	movs	r1, #1
 8001896:	438a      	bics	r2, r1
 8001898:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a2:	2101      	movs	r1, #1
 80018a4:	4091      	lsls	r1, r2
 80018a6:	000a      	movs	r2, r1
 80018a8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2221      	movs	r2, #33	; 0x21
 80018ae:	2101      	movs	r1, #1
 80018b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2220      	movs	r2, #32
 80018b6:	2100      	movs	r1, #0
 80018b8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d004      	beq.n	80018cc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	0010      	movs	r0, r2
 80018ca:	4798      	blx	r3
    }
  }
  return status;
 80018cc:	230f      	movs	r3, #15
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	781b      	ldrb	r3, [r3, #0]
}
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b004      	add	sp, #16
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b084      	sub	sp, #16
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	2204      	movs	r2, #4
 80018f8:	409a      	lsls	r2, r3
 80018fa:	0013      	movs	r3, r2
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	4013      	ands	r3, r2
 8001900:	d024      	beq.n	800194c <HAL_DMA_IRQHandler+0x72>
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2204      	movs	r2, #4
 8001906:	4013      	ands	r3, r2
 8001908:	d020      	beq.n	800194c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2220      	movs	r2, #32
 8001912:	4013      	ands	r3, r2
 8001914:	d107      	bne.n	8001926 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2104      	movs	r1, #4
 8001922:	438a      	bics	r2, r1
 8001924:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192e:	2104      	movs	r1, #4
 8001930:	4091      	lsls	r1, r2
 8001932:	000a      	movs	r2, r1
 8001934:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193a:	2b00      	cmp	r3, #0
 800193c:	d100      	bne.n	8001940 <HAL_DMA_IRQHandler+0x66>
 800193e:	e06a      	b.n	8001a16 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	0010      	movs	r0, r2
 8001948:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800194a:	e064      	b.n	8001a16 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	2202      	movs	r2, #2
 8001952:	409a      	lsls	r2, r3
 8001954:	0013      	movs	r3, r2
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4013      	ands	r3, r2
 800195a:	d02b      	beq.n	80019b4 <HAL_DMA_IRQHandler+0xda>
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2202      	movs	r2, #2
 8001960:	4013      	ands	r3, r2
 8001962:	d027      	beq.n	80019b4 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2220      	movs	r2, #32
 800196c:	4013      	ands	r3, r2
 800196e:	d10b      	bne.n	8001988 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	210a      	movs	r1, #10
 800197c:	438a      	bics	r2, r1
 800197e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2221      	movs	r2, #33	; 0x21
 8001984:	2101      	movs	r1, #1
 8001986:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001990:	2102      	movs	r1, #2
 8001992:	4091      	lsls	r1, r2
 8001994:	000a      	movs	r2, r1
 8001996:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2220      	movs	r2, #32
 800199c:	2100      	movs	r1, #0
 800199e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d036      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	0010      	movs	r0, r2
 80019b0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80019b2:	e030      	b.n	8001a16 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	2208      	movs	r2, #8
 80019ba:	409a      	lsls	r2, r3
 80019bc:	0013      	movs	r3, r2
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4013      	ands	r3, r2
 80019c2:	d028      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x13c>
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2208      	movs	r2, #8
 80019c8:	4013      	ands	r3, r2
 80019ca:	d024      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	210e      	movs	r1, #14
 80019d8:	438a      	bics	r2, r1
 80019da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e4:	2101      	movs	r1, #1
 80019e6:	4091      	lsls	r1, r2
 80019e8:	000a      	movs	r2, r1
 80019ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2221      	movs	r2, #33	; 0x21
 80019f6:	2101      	movs	r1, #1
 80019f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2220      	movs	r2, #32
 80019fe:	2100      	movs	r1, #0
 8001a00:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d005      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	0010      	movs	r0, r2
 8001a12:	4798      	blx	r3
    }
  }
}
 8001a14:	e7ff      	b.n	8001a16 <HAL_DMA_IRQHandler+0x13c>
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b004      	add	sp, #16
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a34:	2101      	movs	r1, #1
 8001a36:	4091      	lsls	r1, r2
 8001a38:	000a      	movs	r2, r1
 8001a3a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b10      	cmp	r3, #16
 8001a4a:	d108      	bne.n	8001a5e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a5c:	e007      	b.n	8001a6e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	60da      	str	r2, [r3, #12]
}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b004      	add	sp, #16
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <DMA_CalcBaseAndBitshift+0x30>)
 8001a86:	4694      	mov	ip, r2
 8001a88:	4463      	add	r3, ip
 8001a8a:	2114      	movs	r1, #20
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f7fe fb3b 	bl	8000108 <__udivsi3>
 8001a92:	0003      	movs	r3, r0
 8001a94:	009a      	lsls	r2, r3, #2
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a03      	ldr	r2, [pc, #12]	; (8001aac <DMA_CalcBaseAndBitshift+0x34>)
 8001a9e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001aa0:	46c0      	nop			; (mov r8, r8)
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	bffdfff8 	.word	0xbffdfff8
 8001aac:	40020000 	.word	0x40020000

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001abe:	e155      	b.n	8001d6c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	4091      	lsls	r1, r2
 8001aca:	000a      	movs	r2, r1
 8001acc:	4013      	ands	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d100      	bne.n	8001ad8 <HAL_GPIO_Init+0x28>
 8001ad6:	e146      	b.n	8001d66 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2203      	movs	r2, #3
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d005      	beq.n	8001af0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2203      	movs	r2, #3
 8001aea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d130      	bne.n	8001b52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	409a      	lsls	r2, r3
 8001afe:	0013      	movs	r3, r2
 8001b00:	43da      	mvns	r2, r3
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	409a      	lsls	r2, r3
 8001b12:	0013      	movs	r3, r2
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b26:	2201      	movs	r2, #1
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	0013      	movs	r3, r2
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	401a      	ands	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2203      	movs	r2, #3
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d017      	beq.n	8001b8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2203      	movs	r2, #3
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	0013      	movs	r3, r2
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	0013      	movs	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2203      	movs	r2, #3
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d123      	bne.n	8001be2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	08da      	lsrs	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	0092      	lsls	r2, r2, #2
 8001ba4:	58d3      	ldr	r3, [r2, r3]
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	2207      	movs	r2, #7
 8001bac:	4013      	ands	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	0013      	movs	r3, r2
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2107      	movs	r1, #7
 8001bc6:	400b      	ands	r3, r1
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	0013      	movs	r3, r2
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	08da      	lsrs	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3208      	adds	r2, #8
 8001bdc:	0092      	lsls	r2, r2, #2
 8001bde:	6939      	ldr	r1, [r7, #16]
 8001be0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	2203      	movs	r2, #3
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	0013      	movs	r3, r2
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2203      	movs	r2, #3
 8001c00:	401a      	ands	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	409a      	lsls	r2, r3
 8001c08:	0013      	movs	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	23c0      	movs	r3, #192	; 0xc0
 8001c1c:	029b      	lsls	r3, r3, #10
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d100      	bne.n	8001c24 <HAL_GPIO_Init+0x174>
 8001c22:	e0a0      	b.n	8001d66 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c24:	4b57      	ldr	r3, [pc, #348]	; (8001d84 <HAL_GPIO_Init+0x2d4>)
 8001c26:	699a      	ldr	r2, [r3, #24]
 8001c28:	4b56      	ldr	r3, [pc, #344]	; (8001d84 <HAL_GPIO_Init+0x2d4>)
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	619a      	str	r2, [r3, #24]
 8001c30:	4b54      	ldr	r3, [pc, #336]	; (8001d84 <HAL_GPIO_Init+0x2d4>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	2201      	movs	r2, #1
 8001c36:	4013      	ands	r3, r2
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c3c:	4a52      	ldr	r2, [pc, #328]	; (8001d88 <HAL_GPIO_Init+0x2d8>)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	589b      	ldr	r3, [r3, r2]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	4013      	ands	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	220f      	movs	r2, #15
 8001c54:	409a      	lsls	r2, r3
 8001c56:	0013      	movs	r3, r2
 8001c58:	43da      	mvns	r2, r3
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	2390      	movs	r3, #144	; 0x90
 8001c64:	05db      	lsls	r3, r3, #23
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d019      	beq.n	8001c9e <HAL_GPIO_Init+0x1ee>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a47      	ldr	r2, [pc, #284]	; (8001d8c <HAL_GPIO_Init+0x2dc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d013      	beq.n	8001c9a <HAL_GPIO_Init+0x1ea>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a46      	ldr	r2, [pc, #280]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00d      	beq.n	8001c96 <HAL_GPIO_Init+0x1e6>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a45      	ldr	r2, [pc, #276]	; (8001d94 <HAL_GPIO_Init+0x2e4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d007      	beq.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a44      	ldr	r2, [pc, #272]	; (8001d98 <HAL_GPIO_Init+0x2e8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_GPIO_Init+0x1de>
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	e008      	b.n	8001ca0 <HAL_GPIO_Init+0x1f0>
 8001c8e:	2305      	movs	r3, #5
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x1f0>
 8001c92:	2303      	movs	r3, #3
 8001c94:	e004      	b.n	8001ca0 <HAL_GPIO_Init+0x1f0>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e002      	b.n	8001ca0 <HAL_GPIO_Init+0x1f0>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_GPIO_Init+0x1f0>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	2103      	movs	r1, #3
 8001ca4:	400a      	ands	r2, r1
 8001ca6:	0092      	lsls	r2, r2, #2
 8001ca8:	4093      	lsls	r3, r2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cb0:	4935      	ldr	r1, [pc, #212]	; (8001d88 <HAL_GPIO_Init+0x2d8>)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cbe:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <HAL_GPIO_Init+0x2ec>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	035b      	lsls	r3, r3, #13
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ce2:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <HAL_GPIO_Init+0x2ec>)
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ce8:	4b2c      	ldr	r3, [pc, #176]	; (8001d9c <HAL_GPIO_Init+0x2ec>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	43da      	mvns	r2, r3
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	039b      	lsls	r3, r3, #14
 8001d00:	4013      	ands	r3, r2
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d0c:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <HAL_GPIO_Init+0x2ec>)
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001d12:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <HAL_GPIO_Init+0x2ec>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	029b      	lsls	r3, r3, #10
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d36:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <HAL_GPIO_Init+0x2ec>)
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001d3c:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <HAL_GPIO_Init+0x2ec>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	43da      	mvns	r2, r3
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	025b      	lsls	r3, r3, #9
 8001d54:	4013      	ands	r3, r2
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <HAL_GPIO_Init+0x2ec>)
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	40da      	lsrs	r2, r3
 8001d74:	1e13      	subs	r3, r2, #0
 8001d76:	d000      	beq.n	8001d7a <HAL_GPIO_Init+0x2ca>
 8001d78:	e6a2      	b.n	8001ac0 <HAL_GPIO_Init+0x10>
  } 
}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	46c0      	nop			; (mov r8, r8)
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b006      	add	sp, #24
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010000 	.word	0x40010000
 8001d8c:	48000400 	.word	0x48000400
 8001d90:	48000800 	.word	0x48000800
 8001d94:	48000c00 	.word	0x48000c00
 8001d98:	48001000 	.word	0x48001000
 8001d9c:	40010400 	.word	0x40010400

08001da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	0008      	movs	r0, r1
 8001daa:	0011      	movs	r1, r2
 8001dac:	1cbb      	adds	r3, r7, #2
 8001dae:	1c02      	adds	r2, r0, #0
 8001db0:	801a      	strh	r2, [r3, #0]
 8001db2:	1c7b      	adds	r3, r7, #1
 8001db4:	1c0a      	adds	r2, r1, #0
 8001db6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001db8:	1c7b      	adds	r3, r7, #1
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d004      	beq.n	8001dca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dc0:	1cbb      	adds	r3, r7, #2
 8001dc2:	881a      	ldrh	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dc8:	e003      	b.n	8001dd2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dca:	1cbb      	adds	r3, r7, #2
 8001dcc:	881a      	ldrh	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b002      	add	sp, #8
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e082      	b.n	8001ef4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2241      	movs	r2, #65	; 0x41
 8001df2:	5c9b      	ldrb	r3, [r3, r2]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d107      	bne.n	8001e0a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2240      	movs	r2, #64	; 0x40
 8001dfe:	2100      	movs	r1, #0
 8001e00:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	0018      	movs	r0, r3
 8001e06:	f7fe fd2f 	bl	8000868 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2241      	movs	r2, #65	; 0x41
 8001e0e:	2124      	movs	r1, #36	; 0x24
 8001e10:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	438a      	bics	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4934      	ldr	r1, [pc, #208]	; (8001efc <HAL_I2C_Init+0x120>)
 8001e2c:	400a      	ands	r2, r1
 8001e2e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4931      	ldr	r1, [pc, #196]	; (8001f00 <HAL_I2C_Init+0x124>)
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d108      	bne.n	8001e5a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2180      	movs	r1, #128	; 0x80
 8001e52:	0209      	lsls	r1, r1, #8
 8001e54:	430a      	orrs	r2, r1
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	e007      	b.n	8001e6a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2184      	movs	r1, #132	; 0x84
 8001e64:	0209      	lsls	r1, r1, #8
 8001e66:	430a      	orrs	r2, r1
 8001e68:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d104      	bne.n	8001e7c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2280      	movs	r2, #128	; 0x80
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	491f      	ldr	r1, [pc, #124]	; (8001f04 <HAL_I2C_Init+0x128>)
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	491a      	ldr	r1, [pc, #104]	; (8001f00 <HAL_I2C_Init+0x124>)
 8001e98:	400a      	ands	r2, r1
 8001e9a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69d9      	ldr	r1, [r3, #28]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1a      	ldr	r2, [r3, #32]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2241      	movs	r2, #65	; 0x41
 8001ee0:	2120      	movs	r1, #32
 8001ee2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2242      	movs	r2, #66	; 0x42
 8001eee:	2100      	movs	r1, #0
 8001ef0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b002      	add	sp, #8
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	f0ffffff 	.word	0xf0ffffff
 8001f00:	ffff7fff 	.word	0xffff7fff
 8001f04:	02008000 	.word	0x02008000

08001f08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2241      	movs	r2, #65	; 0x41
 8001f16:	5c9b      	ldrb	r3, [r3, r2]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	d138      	bne.n	8001f90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2240      	movs	r2, #64	; 0x40
 8001f22:	5c9b      	ldrb	r3, [r3, r2]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e032      	b.n	8001f92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2240      	movs	r2, #64	; 0x40
 8001f30:	2101      	movs	r1, #1
 8001f32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2241      	movs	r2, #65	; 0x41
 8001f38:	2124      	movs	r1, #36	; 0x24
 8001f3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2101      	movs	r1, #1
 8001f48:	438a      	bics	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4911      	ldr	r1, [pc, #68]	; (8001f9c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001f58:	400a      	ands	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6819      	ldr	r1, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2101      	movs	r1, #1
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2241      	movs	r2, #65	; 0x41
 8001f80:	2120      	movs	r1, #32
 8001f82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2240      	movs	r2, #64	; 0x40
 8001f88:	2100      	movs	r1, #0
 8001f8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e000      	b.n	8001f92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f90:	2302      	movs	r3, #2
  }
}
 8001f92:	0018      	movs	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b002      	add	sp, #8
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	ffffefff 	.word	0xffffefff

08001fa0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2241      	movs	r2, #65	; 0x41
 8001fae:	5c9b      	ldrb	r3, [r3, r2]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b20      	cmp	r3, #32
 8001fb4:	d139      	bne.n	800202a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2240      	movs	r2, #64	; 0x40
 8001fba:	5c9b      	ldrb	r3, [r3, r2]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e033      	b.n	800202c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2240      	movs	r2, #64	; 0x40
 8001fc8:	2101      	movs	r1, #1
 8001fca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2241      	movs	r2, #65	; 0x41
 8001fd0:	2124      	movs	r1, #36	; 0x24
 8001fd2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2101      	movs	r1, #1
 8001fe0:	438a      	bics	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4a11      	ldr	r2, [pc, #68]	; (8002034 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2101      	movs	r1, #1
 8002012:	430a      	orrs	r2, r1
 8002014:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2241      	movs	r2, #65	; 0x41
 800201a:	2120      	movs	r1, #32
 800201c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2240      	movs	r2, #64	; 0x40
 8002022:	2100      	movs	r1, #0
 8002024:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800202a:	2302      	movs	r3, #2
  }
}
 800202c:	0018      	movs	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	b004      	add	sp, #16
 8002032:	bd80      	pop	{r7, pc}
 8002034:	fffff0ff 	.word	0xfffff0ff

08002038 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C2 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C2 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002040:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_I2CEx_EnableFastModePlus+0x34>)
 8002042:	699a      	ldr	r2, [r3, #24]
 8002044:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_I2CEx_EnableFastModePlus+0x34>)
 8002046:	2101      	movs	r1, #1
 8002048:	430a      	orrs	r2, r1
 800204a:	619a      	str	r2, [r3, #24]
 800204c:	4b07      	ldr	r3, [pc, #28]	; (800206c <HAL_I2CEx_EnableFastModePlus+0x34>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	2201      	movs	r2, #1
 8002052:	4013      	ands	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800205a:	6819      	ldr	r1, [r3, #0]
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	430a      	orrs	r2, r1
 8002062:	601a      	str	r2, [r3, #0]
}
 8002064:	46c0      	nop			; (mov r8, r8)
 8002066:	46bd      	mov	sp, r7
 8002068:	b004      	add	sp, #16
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40021000 	.word	0x40021000
 8002070:	40010000 	.word	0x40010000

08002074 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002076:	b08b      	sub	sp, #44	; 0x2c
 8002078:	af06      	add	r7, sp, #24
 800207a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e0f0      	b.n	8002268 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a79      	ldr	r2, [pc, #484]	; (8002270 <HAL_PCD_Init+0x1fc>)
 800208a:	5c9b      	ldrb	r3, [r3, r2]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d108      	bne.n	80020a4 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	23aa      	movs	r3, #170	; 0xaa
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	2100      	movs	r1, #0
 800209a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	0018      	movs	r0, r3
 80020a0:	f7fe fdce 	bl	8000c40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a72      	ldr	r2, [pc, #456]	; (8002270 <HAL_PCD_Init+0x1fc>)
 80020a8:	2103      	movs	r1, #3
 80020aa:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f003 ff4b 	bl	8005f4c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b6:	230f      	movs	r3, #15
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
 80020be:	e049      	b.n	8002154 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020c0:	200f      	movs	r0, #15
 80020c2:	183b      	adds	r3, r7, r0
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	0013      	movs	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	189b      	adds	r3, r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	18cb      	adds	r3, r1, r3
 80020d4:	3301      	adds	r3, #1
 80020d6:	2201      	movs	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020da:	183b      	adds	r3, r7, r0
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	0013      	movs	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	189b      	adds	r3, r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	183a      	adds	r2, r7, r0
 80020ec:	7812      	ldrb	r2, [r2, #0]
 80020ee:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020f0:	183b      	adds	r3, r7, r0
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	0013      	movs	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	189b      	adds	r3, r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	18cb      	adds	r3, r1, r3
 8002102:	3303      	adds	r3, #3
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002108:	183b      	adds	r3, r7, r0
 800210a:	781a      	ldrb	r2, [r3, #0]
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	0013      	movs	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	189b      	adds	r3, r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	18cb      	adds	r3, r1, r3
 8002118:	3338      	adds	r3, #56	; 0x38
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800211e:	183b      	adds	r3, r7, r0
 8002120:	781a      	ldrb	r2, [r3, #0]
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	0013      	movs	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	189b      	adds	r3, r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	18cb      	adds	r3, r1, r3
 800212e:	333c      	adds	r3, #60	; 0x3c
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002134:	183b      	adds	r3, r7, r0
 8002136:	781a      	ldrb	r2, [r3, #0]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	0013      	movs	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	189b      	adds	r3, r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	18cb      	adds	r3, r1, r3
 8002144:	3340      	adds	r3, #64	; 0x40
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800214a:	183b      	adds	r3, r7, r0
 800214c:	781a      	ldrb	r2, [r3, #0]
 800214e:	183b      	adds	r3, r7, r0
 8002150:	3201      	adds	r2, #1
 8002152:	701a      	strb	r2, [r3, #0]
 8002154:	210f      	movs	r1, #15
 8002156:	187b      	adds	r3, r7, r1
 8002158:	781a      	ldrb	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	429a      	cmp	r2, r3
 8002160:	d3ae      	bcc.n	80020c0 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002162:	187b      	adds	r3, r7, r1
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
 8002168:	e056      	b.n	8002218 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800216a:	240f      	movs	r4, #15
 800216c:	193b      	adds	r3, r7, r4
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	236a      	movs	r3, #106	; 0x6a
 8002174:	33ff      	adds	r3, #255	; 0xff
 8002176:	0019      	movs	r1, r3
 8002178:	0013      	movs	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	189b      	adds	r3, r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	18c3      	adds	r3, r0, r3
 8002182:	185b      	adds	r3, r3, r1
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002188:	193b      	adds	r3, r7, r4
 800218a:	781a      	ldrb	r2, [r3, #0]
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	23b4      	movs	r3, #180	; 0xb4
 8002190:	0059      	lsls	r1, r3, #1
 8002192:	0013      	movs	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	189b      	adds	r3, r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	18c3      	adds	r3, r0, r3
 800219c:	185b      	adds	r3, r3, r1
 800219e:	193a      	adds	r2, r7, r4
 80021a0:	7812      	ldrb	r2, [r2, #0]
 80021a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021a4:	193b      	adds	r3, r7, r4
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	236c      	movs	r3, #108	; 0x6c
 80021ac:	33ff      	adds	r3, #255	; 0xff
 80021ae:	0019      	movs	r1, r3
 80021b0:	0013      	movs	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	189b      	adds	r3, r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	18c3      	adds	r3, r0, r3
 80021ba:	185b      	adds	r3, r3, r1
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021c0:	193b      	adds	r3, r7, r4
 80021c2:	781a      	ldrb	r2, [r3, #0]
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	23bc      	movs	r3, #188	; 0xbc
 80021c8:	0059      	lsls	r1, r3, #1
 80021ca:	0013      	movs	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	189b      	adds	r3, r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	18c3      	adds	r3, r0, r3
 80021d4:	185b      	adds	r3, r3, r1
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021da:	193b      	adds	r3, r7, r4
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	23be      	movs	r3, #190	; 0xbe
 80021e2:	0059      	lsls	r1, r3, #1
 80021e4:	0013      	movs	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	189b      	adds	r3, r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	18c3      	adds	r3, r0, r3
 80021ee:	185b      	adds	r3, r3, r1
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021f4:	193b      	adds	r3, r7, r4
 80021f6:	781a      	ldrb	r2, [r3, #0]
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	23c0      	movs	r3, #192	; 0xc0
 80021fc:	0059      	lsls	r1, r3, #1
 80021fe:	0013      	movs	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	189b      	adds	r3, r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	18c3      	adds	r3, r0, r3
 8002208:	185b      	adds	r3, r3, r1
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220e:	193b      	adds	r3, r7, r4
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	193b      	adds	r3, r7, r4
 8002214:	3201      	adds	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
 8002218:	230f      	movs	r3, #15
 800221a:	18fb      	adds	r3, r7, r3
 800221c:	781a      	ldrb	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	429a      	cmp	r2, r3
 8002224:	d3a1      	bcc.n	800216a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	466a      	mov	r2, sp
 800222e:	0011      	movs	r1, r2
 8002230:	001a      	movs	r2, r3
 8002232:	3210      	adds	r2, #16
 8002234:	ca70      	ldmia	r2!, {r4, r5, r6}
 8002236:	c170      	stmia	r1!, {r4, r5, r6}
 8002238:	ca30      	ldmia	r2!, {r4, r5}
 800223a:	c130      	stmia	r1!, {r4, r5}
 800223c:	6859      	ldr	r1, [r3, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f003 fe9d 	bl	8005f80 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2224      	movs	r2, #36	; 0x24
 800224a:	2100      	movs	r1, #0
 800224c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a07      	ldr	r2, [pc, #28]	; (8002270 <HAL_PCD_Init+0x1fc>)
 8002252:	2101      	movs	r1, #1
 8002254:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d103      	bne.n	8002266 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	0018      	movs	r0, r3
 8002262:	f001 fae7 	bl	8003834 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	0018      	movs	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	b005      	add	sp, #20
 800226e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002270:	000002a9 	.word	0x000002a9

08002274 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	0018      	movs	r0, r3
 8002282:	f004 fff1 	bl	8007268 <USB_ReadInterrupts>
 8002286:	0003      	movs	r3, r0
 8002288:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	4013      	ands	r3, r2
 8002292:	d004      	beq.n	800229e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	0018      	movs	r0, r3
 8002298:	f000 f99a 	bl	80025d0 <PCD_EP_ISR_Handler>

    return;
 800229c:	e11d      	b.n	80024da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4013      	ands	r3, r2
 80022a6:	d015      	beq.n	80022d4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2244      	movs	r2, #68	; 0x44
 80022ae:	5a9b      	ldrh	r3, [r3, r2]
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	498a      	ldr	r1, [pc, #552]	; (80024e0 <HAL_PCD_IRQHandler+0x26c>)
 80022b8:	400a      	ands	r2, r1
 80022ba:	b291      	uxth	r1, r2
 80022bc:	2244      	movs	r2, #68	; 0x44
 80022be:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 f940 	bl	8002548 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2100      	movs	r1, #0
 80022cc:	0018      	movs	r0, r3
 80022ce:	f000 f953 	bl	8002578 <HAL_PCD_SetAddress>

    return;
 80022d2:	e102      	b.n	80024da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	01db      	lsls	r3, r3, #7
 80022da:	4013      	ands	r3, r2
 80022dc:	d00c      	beq.n	80022f8 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2244      	movs	r2, #68	; 0x44
 80022e4:	5a9b      	ldrh	r3, [r3, r2]
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	497d      	ldr	r1, [pc, #500]	; (80024e4 <HAL_PCD_IRQHandler+0x270>)
 80022ee:	400a      	ands	r2, r1
 80022f0:	b291      	uxth	r1, r2
 80022f2:	2244      	movs	r2, #68	; 0x44
 80022f4:	5299      	strh	r1, [r3, r2]

    return;
 80022f6:	e0f0      	b.n	80024da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	019b      	lsls	r3, r3, #6
 80022fe:	4013      	ands	r3, r2
 8002300:	d00c      	beq.n	800231c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2244      	movs	r2, #68	; 0x44
 8002308:	5a9b      	ldrh	r3, [r3, r2]
 800230a:	b29a      	uxth	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4975      	ldr	r1, [pc, #468]	; (80024e8 <HAL_PCD_IRQHandler+0x274>)
 8002312:	400a      	ands	r2, r1
 8002314:	b291      	uxth	r1, r2
 8002316:	2244      	movs	r2, #68	; 0x44
 8002318:	5299      	strh	r1, [r3, r2]

    return;
 800231a:	e0de      	b.n	80024da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	015b      	lsls	r3, r3, #5
 8002322:	4013      	ands	r3, r2
 8002324:	d038      	beq.n	8002398 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2240      	movs	r2, #64	; 0x40
 800232c:	5a9b      	ldrh	r3, [r3, r2]
 800232e:	b29a      	uxth	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2104      	movs	r1, #4
 8002336:	438a      	bics	r2, r1
 8002338:	b291      	uxth	r1, r2
 800233a:	2240      	movs	r2, #64	; 0x40
 800233c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2240      	movs	r2, #64	; 0x40
 8002344:	5a9b      	ldrh	r3, [r3, r2]
 8002346:	b29a      	uxth	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2108      	movs	r1, #8
 800234e:	438a      	bics	r2, r1
 8002350:	b291      	uxth	r1, r2
 8002352:	2240      	movs	r2, #64	; 0x40
 8002354:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	23b8      	movs	r3, #184	; 0xb8
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	5cd3      	ldrb	r3, [r2, r3]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d109      	bne.n	8002376 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	23b8      	movs	r3, #184	; 0xb8
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	2100      	movs	r1, #0
 800236a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2100      	movs	r1, #0
 8002370:	0018      	movs	r0, r3
 8002372:	f001 fa89 	bl	8003888 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	0018      	movs	r0, r3
 800237a:	f000 f8f5 	bl	8002568 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2244      	movs	r2, #68	; 0x44
 8002384:	5a9b      	ldrh	r3, [r3, r2]
 8002386:	b29a      	uxth	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4957      	ldr	r1, [pc, #348]	; (80024ec <HAL_PCD_IRQHandler+0x278>)
 800238e:	400a      	ands	r2, r1
 8002390:	b291      	uxth	r1, r2
 8002392:	2244      	movs	r2, #68	; 0x44
 8002394:	5299      	strh	r1, [r3, r2]

    return;
 8002396:	e0a0      	b.n	80024da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	4013      	ands	r3, r2
 80023a0:	d028      	beq.n	80023f4 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2240      	movs	r2, #64	; 0x40
 80023a8:	5a9b      	ldrh	r3, [r3, r2]
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2108      	movs	r1, #8
 80023b2:	430a      	orrs	r2, r1
 80023b4:	b291      	uxth	r1, r2
 80023b6:	2240      	movs	r2, #64	; 0x40
 80023b8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2244      	movs	r2, #68	; 0x44
 80023c0:	5a9b      	ldrh	r3, [r3, r2]
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4949      	ldr	r1, [pc, #292]	; (80024f0 <HAL_PCD_IRQHandler+0x27c>)
 80023ca:	400a      	ands	r2, r1
 80023cc:	b291      	uxth	r1, r2
 80023ce:	2244      	movs	r2, #68	; 0x44
 80023d0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2240      	movs	r2, #64	; 0x40
 80023d8:	5a9b      	ldrh	r3, [r3, r2]
 80023da:	b29a      	uxth	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2104      	movs	r1, #4
 80023e2:	430a      	orrs	r2, r1
 80023e4:	b291      	uxth	r1, r2
 80023e6:	2240      	movs	r2, #64	; 0x40
 80023e8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	0018      	movs	r0, r3
 80023ee:	f000 f8b3 	bl	8002558 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80023f2:	e072      	b.n	80024da <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2280      	movs	r2, #128	; 0x80
 80023f8:	4013      	ands	r3, r2
 80023fa:	d046      	beq.n	800248a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2244      	movs	r2, #68	; 0x44
 8002402:	5a9b      	ldrh	r3, [r3, r2]
 8002404:	b29a      	uxth	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2180      	movs	r1, #128	; 0x80
 800240c:	438a      	bics	r2, r1
 800240e:	b291      	uxth	r1, r2
 8002410:	2244      	movs	r2, #68	; 0x44
 8002412:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	23b8      	movs	r3, #184	; 0xb8
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	5cd3      	ldrb	r3, [r2, r3]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d12f      	bne.n	8002480 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2240      	movs	r2, #64	; 0x40
 8002426:	5a9b      	ldrh	r3, [r3, r2]
 8002428:	b29a      	uxth	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2104      	movs	r1, #4
 8002430:	430a      	orrs	r2, r1
 8002432:	b291      	uxth	r1, r2
 8002434:	2240      	movs	r2, #64	; 0x40
 8002436:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2240      	movs	r2, #64	; 0x40
 800243e:	5a9b      	ldrh	r3, [r3, r2]
 8002440:	b29a      	uxth	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2108      	movs	r1, #8
 8002448:	430a      	orrs	r2, r1
 800244a:	b291      	uxth	r1, r2
 800244c:	2240      	movs	r2, #64	; 0x40
 800244e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	23b8      	movs	r3, #184	; 0xb8
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	2101      	movs	r1, #1
 8002458:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2254      	movs	r2, #84	; 0x54
 8002460:	5a9b      	ldrh	r3, [r3, r2]
 8002462:	b29b      	uxth	r3, r3
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	223c      	movs	r2, #60	; 0x3c
 8002468:	4013      	ands	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	23b9      	movs	r3, #185	; 0xb9
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2101      	movs	r1, #1
 8002478:	0018      	movs	r0, r3
 800247a:	f001 fa05 	bl	8003888 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800247e:	e02c      	b.n	80024da <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	0018      	movs	r0, r3
 8002484:	f000 f868 	bl	8002558 <HAL_PCD_SuspendCallback>
    return;
 8002488:	e027      	b.n	80024da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4013      	ands	r3, r2
 8002492:	d010      	beq.n	80024b6 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2244      	movs	r2, #68	; 0x44
 800249a:	5a9b      	ldrh	r3, [r3, r2]
 800249c:	b29a      	uxth	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4914      	ldr	r1, [pc, #80]	; (80024f4 <HAL_PCD_IRQHandler+0x280>)
 80024a4:	400a      	ands	r2, r1
 80024a6:	b291      	uxth	r1, r2
 80024a8:	2244      	movs	r2, #68	; 0x44
 80024aa:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	0018      	movs	r0, r3
 80024b0:	f000 f842 	bl	8002538 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80024b4:	e011      	b.n	80024da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4013      	ands	r3, r2
 80024be:	d00c      	beq.n	80024da <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2244      	movs	r2, #68	; 0x44
 80024c6:	5a9b      	ldrh	r3, [r3, r2]
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	490a      	ldr	r1, [pc, #40]	; (80024f8 <HAL_PCD_IRQHandler+0x284>)
 80024d0:	400a      	ands	r2, r1
 80024d2:	b291      	uxth	r1, r2
 80024d4:	2244      	movs	r2, #68	; 0x44
 80024d6:	5299      	strh	r1, [r3, r2]

    return;
 80024d8:	46c0      	nop			; (mov r8, r8)
  }
}
 80024da:	46bd      	mov	sp, r7
 80024dc:	b004      	add	sp, #16
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	fffffbff 	.word	0xfffffbff
 80024e4:	ffffbfff 	.word	0xffffbfff
 80024e8:	ffffdfff 	.word	0xffffdfff
 80024ec:	ffffefff 	.word	0xffffefff
 80024f0:	fffff7ff 	.word	0xfffff7ff
 80024f4:	fffffdff 	.word	0xfffffdff
 80024f8:	fffffeff 	.word	0xfffffeff

080024fc <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	000a      	movs	r2, r1
 8002506:	1cfb      	adds	r3, r7, #3
 8002508:	701a      	strb	r2, [r3, #0]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	46bd      	mov	sp, r7
 800250e:	b002      	add	sp, #8
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	000a      	movs	r2, r1
 800251c:	1cfb      	adds	r3, r7, #3
 800251e:	701a      	strb	r2, [r3, #0]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8002520:	46c0      	nop			; (mov r8, r8)
 8002522:	46bd      	mov	sp, r7
 8002524:	b002      	add	sp, #8
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8002530:	46c0      	nop			; (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	b002      	add	sp, #8
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8002540:	46c0      	nop			; (mov r8, r8)
 8002542:	46bd      	mov	sp, r7
 8002544:	b002      	add	sp, #8
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002550:	46c0      	nop			; (mov r8, r8)
 8002552:	46bd      	mov	sp, r7
 8002554:	b002      	add	sp, #8
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002560:	46c0      	nop			; (mov r8, r8)
 8002562:	46bd      	mov	sp, r7
 8002564:	b002      	add	sp, #8
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002570:	46c0      	nop			; (mov r8, r8)
 8002572:	46bd      	mov	sp, r7
 8002574:	b002      	add	sp, #8
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	000a      	movs	r2, r1
 8002582:	1cfb      	adds	r3, r7, #3
 8002584:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	23aa      	movs	r3, #170	; 0xaa
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	5cd3      	ldrb	r3, [r2, r3]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_PCD_SetAddress+0x1e>
 8002592:	2302      	movs	r3, #2
 8002594:	e017      	b.n	80025c6 <HAL_PCD_SetAddress+0x4e>
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	23aa      	movs	r3, #170	; 0xaa
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	2101      	movs	r1, #1
 800259e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	1cfa      	adds	r2, r7, #3
 80025a4:	2124      	movs	r1, #36	; 0x24
 80025a6:	7812      	ldrb	r2, [r2, #0]
 80025a8:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	1cfb      	adds	r3, r7, #3
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	0019      	movs	r1, r3
 80025b4:	0010      	movs	r0, r2
 80025b6:	f004 fe43 	bl	8007240 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	23aa      	movs	r3, #170	; 0xaa
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	2100      	movs	r1, #0
 80025c2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	0018      	movs	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b002      	add	sp, #8
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80025d0:	b5b0      	push	{r4, r5, r7, lr}
 80025d2:	b096      	sub	sp, #88	; 0x58
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025d8:	f000 fbec 	bl	8002db4 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	204e      	movs	r0, #78	; 0x4e
 80025e2:	183b      	adds	r3, r7, r0
 80025e4:	2144      	movs	r1, #68	; 0x44
 80025e6:	5a52      	ldrh	r2, [r2, r1]
 80025e8:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80025ea:	183b      	adds	r3, r7, r0
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	244d      	movs	r4, #77	; 0x4d
 80025f2:	193b      	adds	r3, r7, r4
 80025f4:	210f      	movs	r1, #15
 80025f6:	400a      	ands	r2, r1
 80025f8:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80025fa:	193b      	adds	r3, r7, r4
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d000      	beq.n	8002604 <PCD_EP_ISR_Handler+0x34>
 8002602:	e18f      	b.n	8002924 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002604:	183b      	adds	r3, r7, r0
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	2210      	movs	r2, #16
 800260a:	4013      	ands	r3, r2
 800260c:	d155      	bne.n	80026ba <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	b29a      	uxth	r2, r3
 8002616:	200e      	movs	r0, #14
 8002618:	183b      	adds	r3, r7, r0
 800261a:	49bb      	ldr	r1, [pc, #748]	; (8002908 <PCD_EP_ISR_Handler+0x338>)
 800261c:	400a      	ands	r2, r1
 800261e:	801a      	strh	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	183a      	adds	r2, r7, r0
 8002626:	8812      	ldrh	r2, [r2, #0]
 8002628:	49b8      	ldr	r1, [pc, #736]	; (800290c <PCD_EP_ISR_Handler+0x33c>)
 800262a:	430a      	orrs	r2, r1
 800262c:	b292      	uxth	r2, r2
 800262e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3328      	adds	r3, #40	; 0x28
 8002634:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2250      	movs	r2, #80	; 0x50
 800263c:	5a9b      	ldrh	r3, [r3, r2]
 800263e:	b29b      	uxth	r3, r3
 8002640:	001a      	movs	r2, r3
 8002642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	18d2      	adds	r2, r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	18d3      	adds	r3, r2, r3
 8002650:	4aaf      	ldr	r2, [pc, #700]	; (8002910 <PCD_EP_ISR_Handler+0x340>)
 8002652:	4694      	mov	ip, r2
 8002654:	4463      	add	r3, ip
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	059b      	lsls	r3, r3, #22
 800265a:	0d9a      	lsrs	r2, r3, #22
 800265c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002662:	695a      	ldr	r2, [r3, #20]
 8002664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	18d2      	adds	r2, r2, r3
 800266a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800266c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2100      	movs	r1, #0
 8002672:	0018      	movs	r0, r3
 8002674:	f7ff ff4d 	bl	8002512 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2224      	movs	r2, #36	; 0x24
 800267c:	5c9b      	ldrb	r3, [r3, r2]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <PCD_EP_ISR_Handler+0xb8>
 8002684:	f000 fb96 	bl	8002db4 <PCD_EP_ISR_Handler+0x7e4>
 8002688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <PCD_EP_ISR_Handler+0xc4>
 8002690:	f000 fb90 	bl	8002db4 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2224      	movs	r2, #36	; 0x24
 8002698:	5c9b      	ldrb	r3, [r3, r2]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	4252      	negs	r2, r2
 80026a0:	4313      	orrs	r3, r2
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	b291      	uxth	r1, r2
 80026aa:	224c      	movs	r2, #76	; 0x4c
 80026ac:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2224      	movs	r2, #36	; 0x24
 80026b2:	2100      	movs	r1, #0
 80026b4:	5499      	strb	r1, [r3, r2]
 80026b6:	f000 fb7d 	bl	8002db4 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3369      	adds	r3, #105	; 0x69
 80026be:	33ff      	adds	r3, #255	; 0xff
 80026c0:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	214a      	movs	r1, #74	; 0x4a
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	8812      	ldrh	r2, [r2, #0]
 80026cc:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	881a      	ldrh	r2, [r3, #0]
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	4013      	ands	r3, r2
 80026d8:	d037      	beq.n	800274a <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2250      	movs	r2, #80	; 0x50
 80026e0:	5a9b      	ldrh	r3, [r3, r2]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	001a      	movs	r2, r3
 80026e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	18d2      	adds	r2, r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	18d3      	adds	r3, r2, r3
 80026f4:	4a87      	ldr	r2, [pc, #540]	; (8002914 <PCD_EP_ISR_Handler+0x344>)
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	059b      	lsls	r3, r3, #22
 80026fe:	0d9a      	lsrs	r2, r3, #22
 8002700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002702:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	22ac      	movs	r2, #172	; 0xac
 800270c:	0092      	lsls	r2, r2, #2
 800270e:	1899      	adds	r1, r3, r2
 8002710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002712:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002716:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002718:	b29b      	uxth	r3, r3
 800271a:	f004 fdfc 	bl	8007316 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	b29a      	uxth	r2, r3
 8002726:	2010      	movs	r0, #16
 8002728:	183b      	adds	r3, r7, r0
 800272a:	497b      	ldr	r1, [pc, #492]	; (8002918 <PCD_EP_ISR_Handler+0x348>)
 800272c:	400a      	ands	r2, r1
 800272e:	801a      	strh	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	183a      	adds	r2, r7, r0
 8002736:	8812      	ldrh	r2, [r2, #0]
 8002738:	2180      	movs	r1, #128	; 0x80
 800273a:	430a      	orrs	r2, r1
 800273c:	b292      	uxth	r2, r2
 800273e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	0018      	movs	r0, r3
 8002744:	f7ff fef0 	bl	8002528 <HAL_PCD_SetupStageCallback>
 8002748:	e334      	b.n	8002db4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800274a:	234a      	movs	r3, #74	; 0x4a
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	2200      	movs	r2, #0
 8002750:	5e9b      	ldrsh	r3, [r3, r2]
 8002752:	2b00      	cmp	r3, #0
 8002754:	db00      	blt.n	8002758 <PCD_EP_ISR_Handler+0x188>
 8002756:	e32d      	b.n	8002db4 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29a      	uxth	r2, r3
 8002760:	201e      	movs	r0, #30
 8002762:	183b      	adds	r3, r7, r0
 8002764:	496c      	ldr	r1, [pc, #432]	; (8002918 <PCD_EP_ISR_Handler+0x348>)
 8002766:	400a      	ands	r2, r1
 8002768:	801a      	strh	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	183a      	adds	r2, r7, r0
 8002770:	8812      	ldrh	r2, [r2, #0]
 8002772:	2180      	movs	r1, #128	; 0x80
 8002774:	430a      	orrs	r2, r1
 8002776:	b292      	uxth	r2, r2
 8002778:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2250      	movs	r2, #80	; 0x50
 8002780:	5a9b      	ldrh	r3, [r3, r2]
 8002782:	b29b      	uxth	r3, r3
 8002784:	001a      	movs	r2, r3
 8002786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	18d2      	adds	r2, r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	18d3      	adds	r3, r2, r3
 8002794:	4a5f      	ldr	r2, [pc, #380]	; (8002914 <PCD_EP_ISR_Handler+0x344>)
 8002796:	4694      	mov	ip, r2
 8002798:	4463      	add	r3, ip
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	059b      	lsls	r3, r3, #22
 800279e:	0d9a      	lsrs	r2, r3, #22
 80027a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80027a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01a      	beq.n	80027e2 <PCD_EP_ISR_Handler+0x212>
 80027ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d016      	beq.n	80027e2 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6818      	ldr	r0, [r3, #0]
 80027b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ba:	6959      	ldr	r1, [r3, #20]
 80027bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027be:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80027c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	f004 fda6 	bl	8007316 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80027ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	18d2      	adds	r2, r2, r3
 80027d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2100      	movs	r1, #0
 80027dc:	0018      	movs	r0, r3
 80027de:	f7ff fe8d 	bl	80024fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	214a      	movs	r1, #74	; 0x4a
 80027e8:	187b      	adds	r3, r7, r1
 80027ea:	8812      	ldrh	r2, [r2, #0]
 80027ec:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80027ee:	187b      	adds	r3, r7, r1
 80027f0:	881a      	ldrh	r2, [r3, #0]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	4013      	ands	r3, r2
 80027f8:	d000      	beq.n	80027fc <PCD_EP_ISR_Handler+0x22c>
 80027fa:	e2db      	b.n	8002db4 <PCD_EP_ISR_Handler+0x7e4>
 80027fc:	187b      	adds	r3, r7, r1
 80027fe:	881a      	ldrh	r2, [r3, #0]
 8002800:	23c0      	movs	r3, #192	; 0xc0
 8002802:	019b      	lsls	r3, r3, #6
 8002804:	401a      	ands	r2, r3
 8002806:	23c0      	movs	r3, #192	; 0xc0
 8002808:	019b      	lsls	r3, r3, #6
 800280a:	429a      	cmp	r2, r3
 800280c:	d100      	bne.n	8002810 <PCD_EP_ISR_Handler+0x240>
 800280e:	e2d1      	b.n	8002db4 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2250      	movs	r2, #80	; 0x50
 800281c:	5a9b      	ldrh	r3, [r3, r2]
 800281e:	b29b      	uxth	r3, r3
 8002820:	001a      	movs	r2, r3
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	189b      	adds	r3, r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	4a3a      	ldr	r2, [pc, #232]	; (8002914 <PCD_EP_ISR_Handler+0x344>)
 800282c:	4694      	mov	ip, r2
 800282e:	4463      	add	r3, ip
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	059b      	lsls	r3, r3, #22
 800283a:	0d9b      	lsrs	r3, r3, #22
 800283c:	b29a      	uxth	r2, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	801a      	strh	r2, [r3, #0]
 8002842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b3e      	cmp	r3, #62	; 0x3e
 8002848:	d91a      	bls.n	8002880 <PCD_EP_ISR_Handler+0x2b0>
 800284a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	647b      	str	r3, [r7, #68]	; 0x44
 8002852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	221f      	movs	r2, #31
 8002858:	4013      	ands	r3, r2
 800285a:	d102      	bne.n	8002862 <PCD_EP_ISR_Handler+0x292>
 800285c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800285e:	3b01      	subs	r3, #1
 8002860:	647b      	str	r3, [r7, #68]	; 0x44
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	b29a      	uxth	r2, r3
 8002868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800286a:	b29b      	uxth	r3, r3
 800286c:	029b      	lsls	r3, r3, #10
 800286e:	b29b      	uxth	r3, r3
 8002870:	4313      	orrs	r3, r2
 8002872:	b29b      	uxth	r3, r3
 8002874:	4a25      	ldr	r2, [pc, #148]	; (800290c <PCD_EP_ISR_Handler+0x33c>)
 8002876:	4313      	orrs	r3, r2
 8002878:	b29a      	uxth	r2, r3
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	801a      	strh	r2, [r3, #0]
 800287e:	e023      	b.n	80028c8 <PCD_EP_ISR_Handler+0x2f8>
 8002880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d108      	bne.n	800289a <PCD_EP_ISR_Handler+0x2ca>
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	b29b      	uxth	r3, r3
 800288e:	4a1f      	ldr	r2, [pc, #124]	; (800290c <PCD_EP_ISR_Handler+0x33c>)
 8002890:	4313      	orrs	r3, r2
 8002892:	b29a      	uxth	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	801a      	strh	r2, [r3, #0]
 8002898:	e016      	b.n	80028c8 <PCD_EP_ISR_Handler+0x2f8>
 800289a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	085b      	lsrs	r3, r3, #1
 80028a0:	647b      	str	r3, [r7, #68]	; 0x44
 80028a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2201      	movs	r2, #1
 80028a8:	4013      	ands	r3, r2
 80028aa:	d002      	beq.n	80028b2 <PCD_EP_ISR_Handler+0x2e2>
 80028ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ae:	3301      	adds	r3, #1
 80028b0:	647b      	str	r3, [r7, #68]	; 0x44
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	029b      	lsls	r3, r3, #10
 80028be:	b29b      	uxth	r3, r3
 80028c0:	4313      	orrs	r3, r2
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	2012      	movs	r0, #18
 80028d2:	183b      	adds	r3, r7, r0
 80028d4:	4911      	ldr	r1, [pc, #68]	; (800291c <PCD_EP_ISR_Handler+0x34c>)
 80028d6:	400a      	ands	r2, r1
 80028d8:	801a      	strh	r2, [r3, #0]
 80028da:	183b      	adds	r3, r7, r0
 80028dc:	183a      	adds	r2, r7, r0
 80028de:	8812      	ldrh	r2, [r2, #0]
 80028e0:	2180      	movs	r1, #128	; 0x80
 80028e2:	0149      	lsls	r1, r1, #5
 80028e4:	404a      	eors	r2, r1
 80028e6:	801a      	strh	r2, [r3, #0]
 80028e8:	183b      	adds	r3, r7, r0
 80028ea:	183a      	adds	r2, r7, r0
 80028ec:	8812      	ldrh	r2, [r2, #0]
 80028ee:	2180      	movs	r1, #128	; 0x80
 80028f0:	0189      	lsls	r1, r1, #6
 80028f2:	404a      	eors	r2, r1
 80028f4:	801a      	strh	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	183a      	adds	r2, r7, r0
 80028fc:	8812      	ldrh	r2, [r2, #0]
 80028fe:	4908      	ldr	r1, [pc, #32]	; (8002920 <PCD_EP_ISR_Handler+0x350>)
 8002900:	430a      	orrs	r2, r1
 8002902:	b292      	uxth	r2, r2
 8002904:	801a      	strh	r2, [r3, #0]
 8002906:	e255      	b.n	8002db4 <PCD_EP_ISR_Handler+0x7e4>
 8002908:	ffff8f0f 	.word	0xffff8f0f
 800290c:	ffff8000 	.word	0xffff8000
 8002910:	00000402 	.word	0x00000402
 8002914:	00000406 	.word	0x00000406
 8002918:	00000f8f 	.word	0x00000f8f
 800291c:	ffffbf8f 	.word	0xffffbf8f
 8002920:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	001a      	movs	r2, r3
 800292a:	204d      	movs	r0, #77	; 0x4d
 800292c:	183b      	adds	r3, r7, r0
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	18d2      	adds	r2, r2, r3
 8002934:	214a      	movs	r1, #74	; 0x4a
 8002936:	187b      	adds	r3, r7, r1
 8002938:	8812      	ldrh	r2, [r2, #0]
 800293a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800293c:	187b      	adds	r3, r7, r1
 800293e:	2200      	movs	r2, #0
 8002940:	5e9b      	ldrsh	r3, [r3, r2]
 8002942:	2b00      	cmp	r3, #0
 8002944:	db00      	blt.n	8002948 <PCD_EP_ISR_Handler+0x378>
 8002946:	e0fa      	b.n	8002b3e <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	001a      	movs	r2, r3
 800294e:	183b      	adds	r3, r7, r0
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	18d3      	adds	r3, r2, r3
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	b29a      	uxth	r2, r3
 800295a:	2448      	movs	r4, #72	; 0x48
 800295c:	193b      	adds	r3, r7, r4
 800295e:	49d1      	ldr	r1, [pc, #836]	; (8002ca4 <PCD_EP_ISR_Handler+0x6d4>)
 8002960:	400a      	ands	r2, r1
 8002962:	801a      	strh	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	001a      	movs	r2, r3
 800296a:	183b      	adds	r3, r7, r0
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	18d3      	adds	r3, r2, r3
 8002972:	193a      	adds	r2, r7, r4
 8002974:	8812      	ldrh	r2, [r2, #0]
 8002976:	2180      	movs	r1, #128	; 0x80
 8002978:	430a      	orrs	r2, r1
 800297a:	b292      	uxth	r2, r2
 800297c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800297e:	183b      	adds	r3, r7, r0
 8002980:	781a      	ldrb	r2, [r3, #0]
 8002982:	0013      	movs	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	189b      	adds	r3, r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	3369      	adds	r3, #105	; 0x69
 800298c:	33ff      	adds	r3, #255	; 0xff
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	18d3      	adds	r3, r2, r3
 8002992:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002996:	7b1b      	ldrb	r3, [r3, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d125      	bne.n	80029e8 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2250      	movs	r2, #80	; 0x50
 80029a2:	5a9b      	ldrh	r3, [r3, r2]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	001a      	movs	r2, r3
 80029a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	18d2      	adds	r2, r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	18d3      	adds	r3, r2, r3
 80029b6:	4abc      	ldr	r2, [pc, #752]	; (8002ca8 <PCD_EP_ISR_Handler+0x6d8>)
 80029b8:	4694      	mov	ip, r2
 80029ba:	4463      	add	r3, ip
 80029bc:	881a      	ldrh	r2, [r3, #0]
 80029be:	2450      	movs	r4, #80	; 0x50
 80029c0:	193b      	adds	r3, r7, r4
 80029c2:	0592      	lsls	r2, r2, #22
 80029c4:	0d92      	lsrs	r2, r2, #22
 80029c6:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80029c8:	193b      	adds	r3, r7, r4
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d100      	bne.n	80029d2 <PCD_EP_ISR_Handler+0x402>
 80029d0:	e08d      	b.n	8002aee <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d8:	6959      	ldr	r1, [r3, #20]
 80029da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029dc:	88da      	ldrh	r2, [r3, #6]
 80029de:	193b      	adds	r3, r7, r4
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	f004 fc98 	bl	8007316 <USB_ReadPMA>
 80029e6:	e082      	b.n	8002aee <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80029e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ea:	78db      	ldrb	r3, [r3, #3]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d10c      	bne.n	8002a0a <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80029f0:	2350      	movs	r3, #80	; 0x50
 80029f2:	18fc      	adds	r4, r7, r3
 80029f4:	234a      	movs	r3, #74	; 0x4a
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	881a      	ldrh	r2, [r3, #0]
 80029fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	0018      	movs	r0, r3
 8002a00:	f000 f9ec 	bl	8002ddc <HAL_PCD_EP_DB_Receive>
 8002a04:	0003      	movs	r3, r0
 8002a06:	8023      	strh	r3, [r4, #0]
 8002a08:	e071      	b.n	8002aee <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	001a      	movs	r2, r3
 8002a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	18d3      	adds	r3, r2, r3
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	2052      	movs	r0, #82	; 0x52
 8002a1e:	183b      	adds	r3, r7, r0
 8002a20:	49a2      	ldr	r1, [pc, #648]	; (8002cac <PCD_EP_ISR_Handler+0x6dc>)
 8002a22:	400a      	ands	r2, r1
 8002a24:	801a      	strh	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	001a      	movs	r2, r3
 8002a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	18d3      	adds	r3, r2, r3
 8002a34:	183a      	adds	r2, r7, r0
 8002a36:	8812      	ldrh	r2, [r2, #0]
 8002a38:	499d      	ldr	r1, [pc, #628]	; (8002cb0 <PCD_EP_ISR_Handler+0x6e0>)
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	b292      	uxth	r2, r2
 8002a3e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	001a      	movs	r2, r3
 8002a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	18d3      	adds	r3, r2, r3
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	001a      	movs	r2, r3
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	01db      	lsls	r3, r3, #7
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d024      	beq.n	8002aa6 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2250      	movs	r2, #80	; 0x50
 8002a62:	5a9b      	ldrh	r3, [r3, r2]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	001a      	movs	r2, r3
 8002a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	18d2      	adds	r2, r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	18d3      	adds	r3, r2, r3
 8002a76:	4a8f      	ldr	r2, [pc, #572]	; (8002cb4 <PCD_EP_ISR_Handler+0x6e4>)
 8002a78:	4694      	mov	ip, r2
 8002a7a:	4463      	add	r3, ip
 8002a7c:	881a      	ldrh	r2, [r3, #0]
 8002a7e:	2450      	movs	r4, #80	; 0x50
 8002a80:	193b      	adds	r3, r7, r4
 8002a82:	0592      	lsls	r2, r2, #22
 8002a84:	0d92      	lsrs	r2, r2, #22
 8002a86:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002a88:	193b      	adds	r3, r7, r4
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d02e      	beq.n	8002aee <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a96:	6959      	ldr	r1, [r3, #20]
 8002a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9a:	891a      	ldrh	r2, [r3, #8]
 8002a9c:	193b      	adds	r3, r7, r4
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	f004 fc39 	bl	8007316 <USB_ReadPMA>
 8002aa4:	e023      	b.n	8002aee <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2250      	movs	r2, #80	; 0x50
 8002aac:	5a9b      	ldrh	r3, [r3, r2]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	001a      	movs	r2, r3
 8002ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	18d2      	adds	r2, r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	18d3      	adds	r3, r2, r3
 8002ac0:	4a79      	ldr	r2, [pc, #484]	; (8002ca8 <PCD_EP_ISR_Handler+0x6d8>)
 8002ac2:	4694      	mov	ip, r2
 8002ac4:	4463      	add	r3, ip
 8002ac6:	881a      	ldrh	r2, [r3, #0]
 8002ac8:	2450      	movs	r4, #80	; 0x50
 8002aca:	193b      	adds	r3, r7, r4
 8002acc:	0592      	lsls	r2, r2, #22
 8002ace:	0d92      	lsrs	r2, r2, #22
 8002ad0:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002ad2:	193b      	adds	r3, r7, r4
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae0:	6959      	ldr	r1, [r3, #20]
 8002ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae4:	895a      	ldrh	r2, [r3, #10]
 8002ae6:	193b      	adds	r3, r7, r4
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	f004 fc14 	bl	8007316 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	2150      	movs	r1, #80	; 0x50
 8002af4:	187b      	adds	r3, r7, r1
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	18d2      	adds	r2, r2, r3
 8002afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002afc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	187b      	adds	r3, r7, r1
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	18d2      	adds	r2, r2, r3
 8002b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <PCD_EP_ISR_Handler+0x550>
 8002b14:	187b      	adds	r3, r7, r1
 8002b16:	881a      	ldrh	r2, [r3, #0]
 8002b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d207      	bcs.n	8002b30 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b22:	781a      	ldrb	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	0011      	movs	r1, r2
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f7ff fce7 	bl	80024fc <HAL_PCD_DataOutStageCallback>
 8002b2e:	e006      	b.n	8002b3e <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b36:	0011      	movs	r1, r2
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f003 fa49 	bl	8005fd0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002b3e:	244a      	movs	r4, #74	; 0x4a
 8002b40:	193b      	adds	r3, r7, r4
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	2280      	movs	r2, #128	; 0x80
 8002b46:	4013      	ands	r3, r2
 8002b48:	d100      	bne.n	8002b4c <PCD_EP_ISR_Handler+0x57c>
 8002b4a:	e133      	b.n	8002db4 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002b4c:	204d      	movs	r0, #77	; 0x4d
 8002b4e:	183b      	adds	r3, r7, r0
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	0013      	movs	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	189b      	adds	r3, r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	18d3      	adds	r3, r2, r3
 8002b60:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	001a      	movs	r2, r3
 8002b68:	183b      	adds	r3, r7, r0
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	18d3      	adds	r3, r2, r3
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	2542      	movs	r5, #66	; 0x42
 8002b76:	197b      	adds	r3, r7, r5
 8002b78:	494f      	ldr	r1, [pc, #316]	; (8002cb8 <PCD_EP_ISR_Handler+0x6e8>)
 8002b7a:	400a      	ands	r2, r1
 8002b7c:	801a      	strh	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	001a      	movs	r2, r3
 8002b84:	183b      	adds	r3, r7, r0
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	18d3      	adds	r3, r2, r3
 8002b8c:	197a      	adds	r2, r7, r5
 8002b8e:	8812      	ldrh	r2, [r2, #0]
 8002b90:	494a      	ldr	r1, [pc, #296]	; (8002cbc <PCD_EP_ISR_Handler+0x6ec>)
 8002b92:	430a      	orrs	r2, r1
 8002b94:	b292      	uxth	r2, r2
 8002b96:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b9a:	78db      	ldrb	r3, [r3, #3]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d000      	beq.n	8002ba2 <PCD_EP_ISR_Handler+0x5d2>
 8002ba0:	e0af      	b.n	8002d02 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8002ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002baa:	7b1b      	ldrb	r3, [r3, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d100      	bne.n	8002bb2 <PCD_EP_ISR_Handler+0x5e2>
 8002bb0:	e09f      	b.n	8002cf2 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bb2:	193b      	adds	r3, r7, r4
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	2240      	movs	r2, #64	; 0x40
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d046      	beq.n	8002c4a <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bbe:	785b      	ldrb	r3, [r3, #1]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d125      	bne.n	8002c10 <PCD_EP_ISR_Handler+0x640>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2250      	movs	r2, #80	; 0x50
 8002bd0:	5a9b      	ldrh	r3, [r3, r2]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	001a      	movs	r2, r3
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	189b      	adds	r3, r3, r2
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
 8002bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	00da      	lsls	r2, r3, #3
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	18d3      	adds	r3, r2, r3
 8002be6:	4a33      	ldr	r2, [pc, #204]	; (8002cb4 <PCD_EP_ISR_Handler+0x6e4>)
 8002be8:	4694      	mov	ip, r2
 8002bea:	4463      	add	r3, ip
 8002bec:	623b      	str	r3, [r7, #32]
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	059b      	lsls	r3, r3, #22
 8002bf6:	0d9b      	lsrs	r3, r3, #22
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	801a      	strh	r2, [r3, #0]
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	4a2d      	ldr	r2, [pc, #180]	; (8002cbc <PCD_EP_ISR_Handler+0x6ec>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	801a      	strh	r2, [r3, #0]
 8002c0e:	e070      	b.n	8002cf2 <PCD_EP_ISR_Handler+0x722>
 8002c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c12:	785b      	ldrb	r3, [r3, #1]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d16c      	bne.n	8002cf2 <PCD_EP_ISR_Handler+0x722>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2250      	movs	r2, #80	; 0x50
 8002c24:	5a9b      	ldrh	r3, [r3, r2]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	001a      	movs	r2, r3
 8002c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2c:	189b      	adds	r3, r3, r2
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	00da      	lsls	r2, r3, #3
 8002c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c38:	18d3      	adds	r3, r2, r3
 8002c3a:	4a1e      	ldr	r2, [pc, #120]	; (8002cb4 <PCD_EP_ISR_Handler+0x6e4>)
 8002c3c:	4694      	mov	ip, r2
 8002c3e:	4463      	add	r3, ip
 8002c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	2200      	movs	r2, #0
 8002c46:	801a      	strh	r2, [r3, #0]
 8002c48:	e053      	b.n	8002cf2 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c52:	785b      	ldrb	r3, [r3, #1]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d133      	bne.n	8002cc0 <PCD_EP_ISR_Handler+0x6f0>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2250      	movs	r2, #80	; 0x50
 8002c64:	5a9b      	ldrh	r3, [r3, r2]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	001a      	movs	r2, r3
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6c:	189b      	adds	r3, r3, r2
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	00da      	lsls	r2, r3, #3
 8002c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c78:	18d3      	adds	r3, r2, r3
 8002c7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ca8 <PCD_EP_ISR_Handler+0x6d8>)
 8002c7c:	4694      	mov	ip, r2
 8002c7e:	4463      	add	r3, ip
 8002c80:	633b      	str	r3, [r7, #48]	; 0x30
 8002c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	059b      	lsls	r3, r3, #22
 8002c8a:	0d9b      	lsrs	r3, r3, #22
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c90:	801a      	strh	r2, [r3, #0]
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	4a08      	ldr	r2, [pc, #32]	; (8002cbc <PCD_EP_ISR_Handler+0x6ec>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	801a      	strh	r2, [r3, #0]
 8002ca2:	e026      	b.n	8002cf2 <PCD_EP_ISR_Handler+0x722>
 8002ca4:	00000f8f 	.word	0x00000f8f
 8002ca8:	00000406 	.word	0x00000406
 8002cac:	ffff8f8f 	.word	0xffff8f8f
 8002cb0:	ffff80c0 	.word	0xffff80c0
 8002cb4:	00000402 	.word	0x00000402
 8002cb8:	ffff8f0f 	.word	0xffff8f0f
 8002cbc:	ffff8000 	.word	0xffff8000
 8002cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc2:	785b      	ldrb	r3, [r3, #1]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d114      	bne.n	8002cf2 <PCD_EP_ISR_Handler+0x722>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2250      	movs	r2, #80	; 0x50
 8002cce:	5a9b      	ldrh	r3, [r3, r2]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	001a      	movs	r2, r3
 8002cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cd6:	189b      	adds	r3, r3, r2
 8002cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	00da      	lsls	r2, r3, #3
 8002ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce2:	18d3      	adds	r3, r2, r3
 8002ce4:	4a3b      	ldr	r2, [pc, #236]	; (8002dd4 <PCD_EP_ISR_Handler+0x804>)
 8002ce6:	4694      	mov	ip, r2
 8002ce8:	4463      	add	r3, ip
 8002cea:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cee:	2200      	movs	r2, #0
 8002cf0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf4:	781a      	ldrb	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0011      	movs	r1, r2
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f7ff fc09 	bl	8002512 <HAL_PCD_DataInStageCallback>
 8002d00:	e058      	b.n	8002db4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002d02:	234a      	movs	r3, #74	; 0x4a
 8002d04:	18fb      	adds	r3, r7, r3
 8002d06:	881a      	ldrh	r2, [r3, #0]
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d149      	bne.n	8002da4 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2250      	movs	r2, #80	; 0x50
 8002d16:	5a9b      	ldrh	r3, [r3, r2]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	001a      	movs	r2, r3
 8002d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	18d2      	adds	r2, r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	18d3      	adds	r3, r2, r3
 8002d2a:	4a2b      	ldr	r2, [pc, #172]	; (8002dd8 <PCD_EP_ISR_Handler+0x808>)
 8002d2c:	4694      	mov	ip, r2
 8002d2e:	4463      	add	r3, ip
 8002d30:	881a      	ldrh	r2, [r3, #0]
 8002d32:	2140      	movs	r1, #64	; 0x40
 8002d34:	187b      	adds	r3, r7, r1
 8002d36:	0592      	lsls	r2, r2, #22
 8002d38:	0d92      	lsrs	r2, r2, #22
 8002d3a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8002d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	187b      	adds	r3, r7, r1
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d907      	bls.n	8002d58 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8002d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d4a:	699a      	ldr	r2, [r3, #24]
 8002d4c:	187b      	adds	r3, r7, r1
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	1ad2      	subs	r2, r2, r3
 8002d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d54:	619a      	str	r2, [r3, #24]
 8002d56:	e002      	b.n	8002d5e <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8002d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d107      	bne.n	8002d76 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	0011      	movs	r1, r2
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f7ff fbcf 	bl	8002512 <HAL_PCD_DataInStageCallback>
 8002d74:	e01e      	b.n	8002db4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	2140      	movs	r1, #64	; 0x40
 8002d7c:	187b      	adds	r3, r7, r1
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	18d2      	adds	r2, r2, r3
 8002d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d84:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d88:	69da      	ldr	r2, [r3, #28]
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	18d2      	adds	r2, r2, r3
 8002d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d92:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d9a:	0011      	movs	r1, r2
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f003 f917 	bl	8005fd0 <USB_EPStartXfer>
 8002da2:	e007      	b.n	8002db4 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002da4:	234a      	movs	r3, #74	; 0x4a
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	881a      	ldrh	r2, [r3, #0]
 8002daa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	0018      	movs	r0, r3
 8002db0:	f000 f930 	bl	8003014 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2244      	movs	r2, #68	; 0x44
 8002dba:	5a9b      	ldrh	r3, [r3, r2]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	b21b      	sxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	da01      	bge.n	8002dc8 <PCD_EP_ISR_Handler+0x7f8>
 8002dc4:	f7ff fc0a 	bl	80025dc <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	0018      	movs	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b016      	add	sp, #88	; 0x58
 8002dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	00000406 	.word	0x00000406
 8002dd8:	00000402 	.word	0x00000402

08002ddc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ddc:	b590      	push	{r4, r7, lr}
 8002dde:	b089      	sub	sp, #36	; 0x24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	1dbb      	adds	r3, r7, #6
 8002de8:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dea:	1dbb      	adds	r3, r7, #6
 8002dec:	881a      	ldrh	r2, [r3, #0]
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	01db      	lsls	r3, r3, #7
 8002df2:	4013      	ands	r3, r2
 8002df4:	d100      	bne.n	8002df8 <HAL_PCD_EP_DB_Receive+0x1c>
 8002df6:	e07d      	b.n	8002ef4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2250      	movs	r2, #80	; 0x50
 8002dfe:	5a9b      	ldrh	r3, [r3, r2]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	001a      	movs	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	18d2      	adds	r2, r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	18d3      	adds	r3, r2, r3
 8002e12:	4a7a      	ldr	r2, [pc, #488]	; (8002ffc <HAL_PCD_EP_DB_Receive+0x220>)
 8002e14:	4694      	mov	ip, r2
 8002e16:	4463      	add	r3, ip
 8002e18:	881a      	ldrh	r2, [r3, #0]
 8002e1a:	211a      	movs	r1, #26
 8002e1c:	187b      	adds	r3, r7, r1
 8002e1e:	0592      	lsls	r2, r2, #22
 8002e20:	0d92      	lsrs	r2, r2, #22
 8002e22:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	699a      	ldr	r2, [r3, #24]
 8002e28:	187b      	adds	r3, r7, r1
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d307      	bcc.n	8002e40 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	699a      	ldr	r2, [r3, #24]
 8002e34:	187b      	adds	r3, r7, r1
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	1ad2      	subs	r2, r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	619a      	str	r2, [r3, #24]
 8002e3e:	e002      	b.n	8002e46 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2200      	movs	r2, #0
 8002e44:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d121      	bne.n	8002e92 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	001a      	movs	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	18d3      	adds	r3, r2, r3
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	2018      	movs	r0, #24
 8002e62:	183b      	adds	r3, r7, r0
 8002e64:	4966      	ldr	r1, [pc, #408]	; (8003000 <HAL_PCD_EP_DB_Receive+0x224>)
 8002e66:	400a      	ands	r2, r1
 8002e68:	801a      	strh	r2, [r3, #0]
 8002e6a:	183b      	adds	r3, r7, r0
 8002e6c:	183a      	adds	r2, r7, r0
 8002e6e:	8812      	ldrh	r2, [r2, #0]
 8002e70:	2180      	movs	r1, #128	; 0x80
 8002e72:	0189      	lsls	r1, r1, #6
 8002e74:	404a      	eors	r2, r1
 8002e76:	801a      	strh	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	001a      	movs	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	18d3      	adds	r3, r2, r3
 8002e86:	183a      	adds	r2, r7, r0
 8002e88:	8812      	ldrh	r2, [r2, #0]
 8002e8a:	495e      	ldr	r1, [pc, #376]	; (8003004 <HAL_PCD_EP_DB_Receive+0x228>)
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	b292      	uxth	r2, r2
 8002e90:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e92:	1dbb      	adds	r3, r7, #6
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	2240      	movs	r2, #64	; 0x40
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d01a      	beq.n	8002ed2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	001a      	movs	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	18d3      	adds	r3, r2, r3
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	2016      	movs	r0, #22
 8002eb0:	183b      	adds	r3, r7, r0
 8002eb2:	4955      	ldr	r1, [pc, #340]	; (8003008 <HAL_PCD_EP_DB_Receive+0x22c>)
 8002eb4:	400a      	ands	r2, r1
 8002eb6:	801a      	strh	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	001a      	movs	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	18d3      	adds	r3, r2, r3
 8002ec6:	183a      	adds	r2, r7, r0
 8002ec8:	8812      	ldrh	r2, [r2, #0]
 8002eca:	4950      	ldr	r1, [pc, #320]	; (800300c <HAL_PCD_EP_DB_Receive+0x230>)
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	b292      	uxth	r2, r2
 8002ed0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002ed2:	241a      	movs	r4, #26
 8002ed4:	193b      	adds	r3, r7, r4
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d100      	bne.n	8002ede <HAL_PCD_EP_DB_Receive+0x102>
 8002edc:	e086      	b.n	8002fec <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	6959      	ldr	r1, [r3, #20]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	891a      	ldrh	r2, [r3, #8]
 8002eea:	193b      	adds	r3, r7, r4
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	f004 fa12 	bl	8007316 <USB_ReadPMA>
 8002ef2:	e07b      	b.n	8002fec <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2250      	movs	r2, #80	; 0x50
 8002efa:	5a9b      	ldrh	r3, [r3, r2]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	001a      	movs	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	18d2      	adds	r2, r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	18d3      	adds	r3, r2, r3
 8002f0e:	4a40      	ldr	r2, [pc, #256]	; (8003010 <HAL_PCD_EP_DB_Receive+0x234>)
 8002f10:	4694      	mov	ip, r2
 8002f12:	4463      	add	r3, ip
 8002f14:	881a      	ldrh	r2, [r3, #0]
 8002f16:	211a      	movs	r1, #26
 8002f18:	187b      	adds	r3, r7, r1
 8002f1a:	0592      	lsls	r2, r2, #22
 8002f1c:	0d92      	lsrs	r2, r2, #22
 8002f1e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	699a      	ldr	r2, [r3, #24]
 8002f24:	187b      	adds	r3, r7, r1
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d307      	bcc.n	8002f3c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	699a      	ldr	r2, [r3, #24]
 8002f30:	187b      	adds	r3, r7, r1
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	1ad2      	subs	r2, r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	619a      	str	r2, [r3, #24]
 8002f3a:	e002      	b.n	8002f42 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d121      	bne.n	8002f8e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	001a      	movs	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	18d3      	adds	r3, r2, r3
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	201e      	movs	r0, #30
 8002f5e:	183b      	adds	r3, r7, r0
 8002f60:	4927      	ldr	r1, [pc, #156]	; (8003000 <HAL_PCD_EP_DB_Receive+0x224>)
 8002f62:	400a      	ands	r2, r1
 8002f64:	801a      	strh	r2, [r3, #0]
 8002f66:	183b      	adds	r3, r7, r0
 8002f68:	183a      	adds	r2, r7, r0
 8002f6a:	8812      	ldrh	r2, [r2, #0]
 8002f6c:	2180      	movs	r1, #128	; 0x80
 8002f6e:	0189      	lsls	r1, r1, #6
 8002f70:	404a      	eors	r2, r1
 8002f72:	801a      	strh	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	001a      	movs	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	18d3      	adds	r3, r2, r3
 8002f82:	183a      	adds	r2, r7, r0
 8002f84:	8812      	ldrh	r2, [r2, #0]
 8002f86:	491f      	ldr	r1, [pc, #124]	; (8003004 <HAL_PCD_EP_DB_Receive+0x228>)
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	b292      	uxth	r2, r2
 8002f8c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002f8e:	1dbb      	adds	r3, r7, #6
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	2240      	movs	r2, #64	; 0x40
 8002f94:	4013      	ands	r3, r2
 8002f96:	d11a      	bne.n	8002fce <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	001a      	movs	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	18d3      	adds	r3, r2, r3
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	201c      	movs	r0, #28
 8002fac:	183b      	adds	r3, r7, r0
 8002fae:	4916      	ldr	r1, [pc, #88]	; (8003008 <HAL_PCD_EP_DB_Receive+0x22c>)
 8002fb0:	400a      	ands	r2, r1
 8002fb2:	801a      	strh	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	001a      	movs	r2, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	18d3      	adds	r3, r2, r3
 8002fc2:	183a      	adds	r2, r7, r0
 8002fc4:	8812      	ldrh	r2, [r2, #0]
 8002fc6:	4911      	ldr	r1, [pc, #68]	; (800300c <HAL_PCD_EP_DB_Receive+0x230>)
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	b292      	uxth	r2, r2
 8002fcc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002fce:	241a      	movs	r4, #26
 8002fd0:	193b      	adds	r3, r7, r4
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d009      	beq.n	8002fec <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	6959      	ldr	r1, [r3, #20]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	895a      	ldrh	r2, [r3, #10]
 8002fe4:	193b      	adds	r3, r7, r4
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	f004 f995 	bl	8007316 <USB_ReadPMA>
    }
  }

  return count;
 8002fec:	231a      	movs	r3, #26
 8002fee:	18fb      	adds	r3, r7, r3
 8002ff0:	881b      	ldrh	r3, [r3, #0]
}
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b009      	add	sp, #36	; 0x24
 8002ff8:	bd90      	pop	{r4, r7, pc}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	00000402 	.word	0x00000402
 8003000:	ffffbf8f 	.word	0xffffbf8f
 8003004:	ffff8080 	.word	0xffff8080
 8003008:	ffff8f8f 	.word	0xffff8f8f
 800300c:	ffff80c0 	.word	0xffff80c0
 8003010:	00000406 	.word	0x00000406

08003014 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b0a4      	sub	sp, #144	; 0x90
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	1dbb      	adds	r3, r7, #6
 8003020:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003022:	1dbb      	adds	r3, r7, #6
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	2240      	movs	r2, #64	; 0x40
 8003028:	4013      	ands	r3, r2
 800302a:	d100      	bne.n	800302e <HAL_PCD_EP_DB_Transmit+0x1a>
 800302c:	e1e4      	b.n	80033f8 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2250      	movs	r2, #80	; 0x50
 8003034:	5a9b      	ldrh	r3, [r3, r2]
 8003036:	b29b      	uxth	r3, r3
 8003038:	001a      	movs	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	18d2      	adds	r2, r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	18d3      	adds	r3, r2, r3
 8003048:	4ad0      	ldr	r2, [pc, #832]	; (800338c <HAL_PCD_EP_DB_Transmit+0x378>)
 800304a:	4694      	mov	ip, r2
 800304c:	4463      	add	r3, ip
 800304e:	881a      	ldrh	r2, [r3, #0]
 8003050:	2186      	movs	r1, #134	; 0x86
 8003052:	187b      	adds	r3, r7, r1
 8003054:	0592      	lsls	r2, r2, #22
 8003056:	0d92      	lsrs	r2, r2, #22
 8003058:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	187b      	adds	r3, r7, r1
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d907      	bls.n	8003076 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	699a      	ldr	r2, [r3, #24]
 800306a:	187b      	adds	r3, r7, r1
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	1ad2      	subs	r2, r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	619a      	str	r2, [r3, #24]
 8003074:	e002      	b.n	800307c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2200      	movs	r2, #0
 800307a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d000      	beq.n	8003086 <HAL_PCD_EP_DB_Transmit+0x72>
 8003084:	e0b5      	b.n	80031f2 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	785b      	ldrb	r3, [r3, #1]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d125      	bne.n	80030da <HAL_PCD_EP_DB_Transmit+0xc6>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2250      	movs	r2, #80	; 0x50
 800309a:	5a9b      	ldrh	r3, [r3, r2]
 800309c:	b29b      	uxth	r3, r3
 800309e:	001a      	movs	r2, r3
 80030a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a2:	189b      	adds	r3, r3, r2
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	00da      	lsls	r2, r3, #3
 80030ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ae:	18d3      	adds	r3, r2, r3
 80030b0:	4ab6      	ldr	r2, [pc, #728]	; (800338c <HAL_PCD_EP_DB_Transmit+0x378>)
 80030b2:	4694      	mov	ip, r2
 80030b4:	4463      	add	r3, ip
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	059b      	lsls	r3, r3, #22
 80030c0:	0d9b      	lsrs	r3, r3, #22
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c6:	801a      	strh	r2, [r3, #0]
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	4ab0      	ldr	r2, [pc, #704]	; (8003390 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d6:	801a      	strh	r2, [r3, #0]
 80030d8:	e01b      	b.n	8003112 <HAL_PCD_EP_DB_Transmit+0xfe>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	785b      	ldrb	r3, [r3, #1]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d117      	bne.n	8003112 <HAL_PCD_EP_DB_Transmit+0xfe>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	637b      	str	r3, [r7, #52]	; 0x34
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2250      	movs	r2, #80	; 0x50
 80030ee:	5a9b      	ldrh	r3, [r3, r2]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	001a      	movs	r2, r3
 80030f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f6:	189b      	adds	r3, r3, r2
 80030f8:	637b      	str	r3, [r7, #52]	; 0x34
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	00da      	lsls	r2, r3, #3
 8003100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003102:	18d3      	adds	r3, r2, r3
 8003104:	4aa1      	ldr	r2, [pc, #644]	; (800338c <HAL_PCD_EP_DB_Transmit+0x378>)
 8003106:	4694      	mov	ip, r2
 8003108:	4463      	add	r3, ip
 800310a:	633b      	str	r3, [r7, #48]	; 0x30
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	2200      	movs	r2, #0
 8003110:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	785b      	ldrb	r3, [r3, #1]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d125      	bne.n	800316c <HAL_PCD_EP_DB_Transmit+0x158>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	61fb      	str	r3, [r7, #28]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2250      	movs	r2, #80	; 0x50
 800312c:	5a9b      	ldrh	r3, [r3, r2]
 800312e:	b29b      	uxth	r3, r3
 8003130:	001a      	movs	r2, r3
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	189b      	adds	r3, r3, r2
 8003136:	61fb      	str	r3, [r7, #28]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	00da      	lsls	r2, r3, #3
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	18d3      	adds	r3, r2, r3
 8003142:	4a94      	ldr	r2, [pc, #592]	; (8003394 <HAL_PCD_EP_DB_Transmit+0x380>)
 8003144:	4694      	mov	ip, r2
 8003146:	4463      	add	r3, ip
 8003148:	61bb      	str	r3, [r7, #24]
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	059b      	lsls	r3, r3, #22
 8003152:	0d9b      	lsrs	r3, r3, #22
 8003154:	b29a      	uxth	r2, r3
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	801a      	strh	r2, [r3, #0]
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	b29b      	uxth	r3, r3
 8003160:	4a8b      	ldr	r2, [pc, #556]	; (8003390 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003162:	4313      	orrs	r3, r2
 8003164:	b29a      	uxth	r2, r3
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	801a      	strh	r2, [r3, #0]
 800316a:	e018      	b.n	800319e <HAL_PCD_EP_DB_Transmit+0x18a>
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	785b      	ldrb	r3, [r3, #1]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d114      	bne.n	800319e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2250      	movs	r2, #80	; 0x50
 800317a:	5a9b      	ldrh	r3, [r3, r2]
 800317c:	b29b      	uxth	r3, r3
 800317e:	001a      	movs	r2, r3
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	189b      	adds	r3, r3, r2
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	00da      	lsls	r2, r3, #3
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	18d3      	adds	r3, r2, r3
 8003190:	4a80      	ldr	r2, [pc, #512]	; (8003394 <HAL_PCD_EP_DB_Transmit+0x380>)
 8003192:	4694      	mov	ip, r2
 8003194:	4463      	add	r3, ip
 8003196:	623b      	str	r3, [r7, #32]
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	2200      	movs	r2, #0
 800319c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	781a      	ldrb	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	0011      	movs	r1, r2
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7ff f9b3 	bl	8002512 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031ac:	1dbb      	adds	r3, r7, #6
 80031ae:	881a      	ldrh	r2, [r3, #0]
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	01db      	lsls	r3, r3, #7
 80031b4:	4013      	ands	r3, r2
 80031b6:	d100      	bne.n	80031ba <HAL_PCD_EP_DB_Transmit+0x1a6>
 80031b8:	e309      	b.n	80037ce <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	001a      	movs	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	18d3      	adds	r3, r2, r3
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	2016      	movs	r0, #22
 80031ce:	183b      	adds	r3, r7, r0
 80031d0:	4971      	ldr	r1, [pc, #452]	; (8003398 <HAL_PCD_EP_DB_Transmit+0x384>)
 80031d2:	400a      	ands	r2, r1
 80031d4:	801a      	strh	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	001a      	movs	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	18d3      	adds	r3, r2, r3
 80031e4:	183a      	adds	r2, r7, r0
 80031e6:	8812      	ldrh	r2, [r2, #0]
 80031e8:	496c      	ldr	r1, [pc, #432]	; (800339c <HAL_PCD_EP_DB_Transmit+0x388>)
 80031ea:	430a      	orrs	r2, r1
 80031ec:	b292      	uxth	r2, r2
 80031ee:	801a      	strh	r2, [r3, #0]
 80031f0:	e2ed      	b.n	80037ce <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031f2:	1dbb      	adds	r3, r7, #6
 80031f4:	881a      	ldrh	r2, [r3, #0]
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	01db      	lsls	r3, r3, #7
 80031fa:	4013      	ands	r3, r2
 80031fc:	d01a      	beq.n	8003234 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	001a      	movs	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	18d3      	adds	r3, r2, r3
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	b29a      	uxth	r2, r3
 8003210:	208a      	movs	r0, #138	; 0x8a
 8003212:	183b      	adds	r3, r7, r0
 8003214:	4960      	ldr	r1, [pc, #384]	; (8003398 <HAL_PCD_EP_DB_Transmit+0x384>)
 8003216:	400a      	ands	r2, r1
 8003218:	801a      	strh	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	001a      	movs	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	18d3      	adds	r3, r2, r3
 8003228:	183a      	adds	r2, r7, r0
 800322a:	8812      	ldrh	r2, [r2, #0]
 800322c:	495b      	ldr	r1, [pc, #364]	; (800339c <HAL_PCD_EP_DB_Transmit+0x388>)
 800322e:	430a      	orrs	r2, r1
 8003230:	b292      	uxth	r2, r2
 8003232:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2224      	movs	r2, #36	; 0x24
 8003238:	5c9b      	ldrb	r3, [r3, r2]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d000      	beq.n	8003240 <HAL_PCD_EP_DB_Transmit+0x22c>
 800323e:	e2c6      	b.n	80037ce <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	695a      	ldr	r2, [r3, #20]
 8003244:	2186      	movs	r1, #134	; 0x86
 8003246:	187b      	adds	r3, r7, r1
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	18d2      	adds	r2, r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	187b      	adds	r3, r7, r1
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	18d2      	adds	r2, r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	6a1a      	ldr	r2, [r3, #32]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	429a      	cmp	r2, r3
 8003268:	d30c      	bcc.n	8003284 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	218c      	movs	r1, #140	; 0x8c
 8003270:	187a      	adds	r2, r7, r1
 8003272:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	6a1a      	ldr	r2, [r3, #32]
 8003278:	187b      	adds	r3, r7, r1
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	1ad2      	subs	r2, r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	621a      	str	r2, [r3, #32]
 8003282:	e01a      	b.n	80032ba <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10a      	bne.n	80032a2 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800328c:	2386      	movs	r3, #134	; 0x86
 800328e:	18fb      	adds	r3, r7, r3
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	228c      	movs	r2, #140	; 0x8c
 8003294:	18ba      	adds	r2, r7, r2
 8003296:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2224      	movs	r2, #36	; 0x24
 800329c:	2100      	movs	r1, #0
 800329e:	5499      	strb	r1, [r3, r2]
 80032a0:	e00b      	b.n	80032ba <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2224      	movs	r2, #36	; 0x24
 80032a6:	2100      	movs	r1, #0
 80032a8:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	228c      	movs	r2, #140	; 0x8c
 80032b0:	18ba      	adds	r2, r7, r2
 80032b2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2200      	movs	r2, #0
 80032b8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	785b      	ldrb	r3, [r3, #1]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d000      	beq.n	80032c4 <HAL_PCD_EP_DB_Transmit+0x2b0>
 80032c2:	e06d      	b.n	80033a0 <HAL_PCD_EP_DB_Transmit+0x38c>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2250      	movs	r2, #80	; 0x50
 80032d0:	5a9b      	ldrh	r3, [r3, r2]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	001a      	movs	r2, r3
 80032d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d8:	189b      	adds	r3, r3, r2
 80032da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	00da      	lsls	r2, r3, #3
 80032e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e4:	18d3      	adds	r3, r2, r3
 80032e6:	4a29      	ldr	r2, [pc, #164]	; (800338c <HAL_PCD_EP_DB_Transmit+0x378>)
 80032e8:	4694      	mov	ip, r2
 80032ea:	4463      	add	r3, ip
 80032ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80032ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	059b      	lsls	r3, r3, #22
 80032f6:	0d9b      	lsrs	r3, r3, #22
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fc:	801a      	strh	r2, [r3, #0]
 80032fe:	228c      	movs	r2, #140	; 0x8c
 8003300:	18bb      	adds	r3, r7, r2
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b3e      	cmp	r3, #62	; 0x3e
 8003306:	d91a      	bls.n	800333e <HAL_PCD_EP_DB_Transmit+0x32a>
 8003308:	18bb      	adds	r3, r7, r2
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003310:	18bb      	adds	r3, r7, r2
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	221f      	movs	r2, #31
 8003316:	4013      	ands	r3, r2
 8003318:	d102      	bne.n	8003320 <HAL_PCD_EP_DB_Transmit+0x30c>
 800331a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800331c:	3b01      	subs	r3, #1
 800331e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	b29a      	uxth	r2, r3
 8003326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003328:	b29b      	uxth	r3, r3
 800332a:	029b      	lsls	r3, r3, #10
 800332c:	b29b      	uxth	r3, r3
 800332e:	4313      	orrs	r3, r2
 8003330:	b29b      	uxth	r3, r3
 8003332:	4a17      	ldr	r2, [pc, #92]	; (8003390 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003334:	4313      	orrs	r3, r2
 8003336:	b29a      	uxth	r2, r3
 8003338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333a:	801a      	strh	r2, [r3, #0]
 800333c:	e04f      	b.n	80033de <HAL_PCD_EP_DB_Transmit+0x3ca>
 800333e:	238c      	movs	r3, #140	; 0x8c
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d108      	bne.n	800335a <HAL_PCD_EP_DB_Transmit+0x346>
 8003348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	b29b      	uxth	r3, r3
 800334e:	4a10      	ldr	r2, [pc, #64]	; (8003390 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003350:	4313      	orrs	r3, r2
 8003352:	b29a      	uxth	r2, r3
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	801a      	strh	r2, [r3, #0]
 8003358:	e041      	b.n	80033de <HAL_PCD_EP_DB_Transmit+0x3ca>
 800335a:	228c      	movs	r2, #140	; 0x8c
 800335c:	18bb      	adds	r3, r7, r2
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	085b      	lsrs	r3, r3, #1
 8003362:	64bb      	str	r3, [r7, #72]	; 0x48
 8003364:	18bb      	adds	r3, r7, r2
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2201      	movs	r2, #1
 800336a:	4013      	ands	r3, r2
 800336c:	d002      	beq.n	8003374 <HAL_PCD_EP_DB_Transmit+0x360>
 800336e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003370:	3301      	adds	r3, #1
 8003372:	64bb      	str	r3, [r7, #72]	; 0x48
 8003374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	b29a      	uxth	r2, r3
 800337a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800337c:	b29b      	uxth	r3, r3
 800337e:	029b      	lsls	r3, r3, #10
 8003380:	b29b      	uxth	r3, r3
 8003382:	4313      	orrs	r3, r2
 8003384:	b29a      	uxth	r2, r3
 8003386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003388:	801a      	strh	r2, [r3, #0]
 800338a:	e028      	b.n	80033de <HAL_PCD_EP_DB_Transmit+0x3ca>
 800338c:	00000402 	.word	0x00000402
 8003390:	ffff8000 	.word	0xffff8000
 8003394:	00000406 	.word	0x00000406
 8003398:	ffff8f8f 	.word	0xffff8f8f
 800339c:	ffffc080 	.word	0xffffc080
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	785b      	ldrb	r3, [r3, #1]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d11a      	bne.n	80033de <HAL_PCD_EP_DB_Transmit+0x3ca>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	647b      	str	r3, [r7, #68]	; 0x44
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2250      	movs	r2, #80	; 0x50
 80033b4:	5a9b      	ldrh	r3, [r3, r2]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	001a      	movs	r2, r3
 80033ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033bc:	189b      	adds	r3, r3, r2
 80033be:	647b      	str	r3, [r7, #68]	; 0x44
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	00da      	lsls	r2, r3, #3
 80033c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033c8:	18d3      	adds	r3, r2, r3
 80033ca:	4adb      	ldr	r2, [pc, #876]	; (8003738 <HAL_PCD_EP_DB_Transmit+0x724>)
 80033cc:	4694      	mov	ip, r2
 80033ce:	4463      	add	r3, ip
 80033d0:	643b      	str	r3, [r7, #64]	; 0x40
 80033d2:	238c      	movs	r3, #140	; 0x8c
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	b29a      	uxth	r2, r3
 80033da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033dc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	6959      	ldr	r1, [r3, #20]
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	891a      	ldrh	r2, [r3, #8]
 80033ea:	238c      	movs	r3, #140	; 0x8c
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	f003 ff47 	bl	8007284 <USB_WritePMA>
 80033f6:	e1ea      	b.n	80037ce <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2250      	movs	r2, #80	; 0x50
 80033fe:	5a9b      	ldrh	r3, [r3, r2]
 8003400:	b29b      	uxth	r3, r3
 8003402:	001a      	movs	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	18d2      	adds	r2, r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	18d3      	adds	r3, r2, r3
 8003412:	4aca      	ldr	r2, [pc, #808]	; (800373c <HAL_PCD_EP_DB_Transmit+0x728>)
 8003414:	4694      	mov	ip, r2
 8003416:	4463      	add	r3, ip
 8003418:	881a      	ldrh	r2, [r3, #0]
 800341a:	2186      	movs	r1, #134	; 0x86
 800341c:	187b      	adds	r3, r7, r1
 800341e:	0592      	lsls	r2, r2, #22
 8003420:	0d92      	lsrs	r2, r2, #22
 8003422:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	699a      	ldr	r2, [r3, #24]
 8003428:	187b      	adds	r3, r7, r1
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d307      	bcc.n	8003440 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	699a      	ldr	r2, [r3, #24]
 8003434:	187b      	adds	r3, r7, r1
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	1ad2      	subs	r2, r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	619a      	str	r2, [r3, #24]
 800343e:	e002      	b.n	8003446 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2200      	movs	r2, #0
 8003444:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d000      	beq.n	8003450 <HAL_PCD_EP_DB_Transmit+0x43c>
 800344e:	e0bb      	b.n	80035c8 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	785b      	ldrb	r3, [r3, #1]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d125      	bne.n	80034a4 <HAL_PCD_EP_DB_Transmit+0x490>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2250      	movs	r2, #80	; 0x50
 8003464:	5a9b      	ldrh	r3, [r3, r2]
 8003466:	b29b      	uxth	r3, r3
 8003468:	001a      	movs	r2, r3
 800346a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800346c:	189b      	adds	r3, r3, r2
 800346e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	00da      	lsls	r2, r3, #3
 8003476:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003478:	18d3      	adds	r3, r2, r3
 800347a:	4aaf      	ldr	r2, [pc, #700]	; (8003738 <HAL_PCD_EP_DB_Transmit+0x724>)
 800347c:	4694      	mov	ip, r2
 800347e:	4463      	add	r3, ip
 8003480:	67bb      	str	r3, [r7, #120]	; 0x78
 8003482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	059b      	lsls	r3, r3, #22
 800348a:	0d9b      	lsrs	r3, r3, #22
 800348c:	b29a      	uxth	r2, r3
 800348e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003490:	801a      	strh	r2, [r3, #0]
 8003492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	4aa9      	ldr	r2, [pc, #676]	; (8003740 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800349a:	4313      	orrs	r3, r2
 800349c:	b29a      	uxth	r2, r3
 800349e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034a0:	801a      	strh	r2, [r3, #0]
 80034a2:	e01b      	b.n	80034dc <HAL_PCD_EP_DB_Transmit+0x4c8>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	785b      	ldrb	r3, [r3, #1]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d117      	bne.n	80034dc <HAL_PCD_EP_DB_Transmit+0x4c8>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	667b      	str	r3, [r7, #100]	; 0x64
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2250      	movs	r2, #80	; 0x50
 80034b8:	5a9b      	ldrh	r3, [r3, r2]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	001a      	movs	r2, r3
 80034be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034c0:	189b      	adds	r3, r3, r2
 80034c2:	667b      	str	r3, [r7, #100]	; 0x64
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	00da      	lsls	r2, r3, #3
 80034ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034cc:	18d3      	adds	r3, r2, r3
 80034ce:	4a9a      	ldr	r2, [pc, #616]	; (8003738 <HAL_PCD_EP_DB_Transmit+0x724>)
 80034d0:	4694      	mov	ip, r2
 80034d2:	4463      	add	r3, ip
 80034d4:	663b      	str	r3, [r7, #96]	; 0x60
 80034d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034d8:	2200      	movs	r2, #0
 80034da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	677b      	str	r3, [r7, #116]	; 0x74
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	785b      	ldrb	r3, [r3, #1]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d12b      	bne.n	8003542 <HAL_PCD_EP_DB_Transmit+0x52e>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2250      	movs	r2, #80	; 0x50
 80034f6:	5a9b      	ldrh	r3, [r3, r2]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	001a      	movs	r2, r3
 80034fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034fe:	189b      	adds	r3, r3, r2
 8003500:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	00da      	lsls	r2, r3, #3
 8003508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350a:	18d3      	adds	r3, r2, r3
 800350c:	4a8b      	ldr	r2, [pc, #556]	; (800373c <HAL_PCD_EP_DB_Transmit+0x728>)
 800350e:	4694      	mov	ip, r2
 8003510:	4463      	add	r3, ip
 8003512:	2180      	movs	r1, #128	; 0x80
 8003514:	187a      	adds	r2, r7, r1
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	187b      	adds	r3, r7, r1
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	b29b      	uxth	r3, r3
 8003520:	059b      	lsls	r3, r3, #22
 8003522:	0d9b      	lsrs	r3, r3, #22
 8003524:	b29a      	uxth	r2, r3
 8003526:	187b      	adds	r3, r7, r1
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	801a      	strh	r2, [r3, #0]
 800352c:	187b      	adds	r3, r7, r1
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
 8003534:	4a82      	ldr	r2, [pc, #520]	; (8003740 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003536:	4313      	orrs	r3, r2
 8003538:	b29a      	uxth	r2, r3
 800353a:	187b      	adds	r3, r7, r1
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	801a      	strh	r2, [r3, #0]
 8003540:	e018      	b.n	8003574 <HAL_PCD_EP_DB_Transmit+0x560>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	785b      	ldrb	r3, [r3, #1]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d114      	bne.n	8003574 <HAL_PCD_EP_DB_Transmit+0x560>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2250      	movs	r2, #80	; 0x50
 8003550:	5a9b      	ldrh	r3, [r3, r2]
 8003552:	b29b      	uxth	r3, r3
 8003554:	001a      	movs	r2, r3
 8003556:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003558:	189b      	adds	r3, r3, r2
 800355a:	677b      	str	r3, [r7, #116]	; 0x74
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	00da      	lsls	r2, r3, #3
 8003562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003564:	18d3      	adds	r3, r2, r3
 8003566:	4a75      	ldr	r2, [pc, #468]	; (800373c <HAL_PCD_EP_DB_Transmit+0x728>)
 8003568:	4694      	mov	ip, r2
 800356a:	4463      	add	r3, ip
 800356c:	673b      	str	r3, [r7, #112]	; 0x70
 800356e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003570:	2200      	movs	r2, #0
 8003572:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	781a      	ldrb	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	0011      	movs	r1, r2
 800357c:	0018      	movs	r0, r3
 800357e:	f7fe ffc8 	bl	8002512 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003582:	1dbb      	adds	r3, r7, #6
 8003584:	881a      	ldrh	r2, [r3, #0]
 8003586:	2380      	movs	r3, #128	; 0x80
 8003588:	01db      	lsls	r3, r3, #7
 800358a:	4013      	ands	r3, r2
 800358c:	d000      	beq.n	8003590 <HAL_PCD_EP_DB_Transmit+0x57c>
 800358e:	e11e      	b.n	80037ce <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	001a      	movs	r2, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	18d3      	adds	r3, r2, r3
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	2088      	movs	r0, #136	; 0x88
 80035a4:	183b      	adds	r3, r7, r0
 80035a6:	4967      	ldr	r1, [pc, #412]	; (8003744 <HAL_PCD_EP_DB_Transmit+0x730>)
 80035a8:	400a      	ands	r2, r1
 80035aa:	801a      	strh	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	001a      	movs	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	18d3      	adds	r3, r2, r3
 80035ba:	183a      	adds	r2, r7, r0
 80035bc:	8812      	ldrh	r2, [r2, #0]
 80035be:	4962      	ldr	r1, [pc, #392]	; (8003748 <HAL_PCD_EP_DB_Transmit+0x734>)
 80035c0:	430a      	orrs	r2, r1
 80035c2:	b292      	uxth	r2, r2
 80035c4:	801a      	strh	r2, [r3, #0]
 80035c6:	e102      	b.n	80037ce <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80035c8:	1dbb      	adds	r3, r7, #6
 80035ca:	881a      	ldrh	r2, [r3, #0]
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	01db      	lsls	r3, r3, #7
 80035d0:	4013      	ands	r3, r2
 80035d2:	d11a      	bne.n	800360a <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	001a      	movs	r2, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	18d3      	adds	r3, r2, r3
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	204e      	movs	r0, #78	; 0x4e
 80035e8:	183b      	adds	r3, r7, r0
 80035ea:	4956      	ldr	r1, [pc, #344]	; (8003744 <HAL_PCD_EP_DB_Transmit+0x730>)
 80035ec:	400a      	ands	r2, r1
 80035ee:	801a      	strh	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	001a      	movs	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	18d3      	adds	r3, r2, r3
 80035fe:	183a      	adds	r2, r7, r0
 8003600:	8812      	ldrh	r2, [r2, #0]
 8003602:	4951      	ldr	r1, [pc, #324]	; (8003748 <HAL_PCD_EP_DB_Transmit+0x734>)
 8003604:	430a      	orrs	r2, r1
 8003606:	b292      	uxth	r2, r2
 8003608:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2224      	movs	r2, #36	; 0x24
 800360e:	5c9b      	ldrb	r3, [r3, r2]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d000      	beq.n	8003616 <HAL_PCD_EP_DB_Transmit+0x602>
 8003614:	e0db      	b.n	80037ce <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	2186      	movs	r1, #134	; 0x86
 800361c:	187b      	adds	r3, r7, r1
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	18d2      	adds	r2, r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	69da      	ldr	r2, [r3, #28]
 800362a:	187b      	adds	r3, r7, r1
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	18d2      	adds	r2, r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	6a1a      	ldr	r2, [r3, #32]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	429a      	cmp	r2, r3
 800363e:	d30c      	bcc.n	800365a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	218c      	movs	r1, #140	; 0x8c
 8003646:	187a      	adds	r2, r7, r1
 8003648:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	6a1a      	ldr	r2, [r3, #32]
 800364e:	187b      	adds	r3, r7, r1
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	1ad2      	subs	r2, r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	621a      	str	r2, [r3, #32]
 8003658:	e01a      	b.n	8003690 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10a      	bne.n	8003678 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8003662:	2386      	movs	r3, #134	; 0x86
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	228c      	movs	r2, #140	; 0x8c
 800366a:	18ba      	adds	r2, r7, r2
 800366c:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2224      	movs	r2, #36	; 0x24
 8003672:	2100      	movs	r1, #0
 8003674:	5499      	strb	r1, [r3, r2]
 8003676:	e00b      	b.n	8003690 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	228c      	movs	r2, #140	; 0x8c
 800367e:	18ba      	adds	r2, r7, r2
 8003680:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2200      	movs	r2, #0
 8003686:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2224      	movs	r2, #36	; 0x24
 800368c:	2100      	movs	r1, #0
 800368e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	657b      	str	r3, [r7, #84]	; 0x54
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	785b      	ldrb	r3, [r3, #1]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d000      	beq.n	80036a0 <HAL_PCD_EP_DB_Transmit+0x68c>
 800369e:	e06e      	b.n	800377e <HAL_PCD_EP_DB_Transmit+0x76a>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2250      	movs	r2, #80	; 0x50
 80036ac:	5a9b      	ldrh	r3, [r3, r2]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	001a      	movs	r2, r3
 80036b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036b4:	189b      	adds	r3, r3, r2
 80036b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	00da      	lsls	r2, r3, #3
 80036be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c0:	18d3      	adds	r3, r2, r3
 80036c2:	4a1e      	ldr	r2, [pc, #120]	; (800373c <HAL_PCD_EP_DB_Transmit+0x728>)
 80036c4:	4694      	mov	ip, r2
 80036c6:	4463      	add	r3, ip
 80036c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80036ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	059b      	lsls	r3, r3, #22
 80036d2:	0d9b      	lsrs	r3, r3, #22
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036d8:	801a      	strh	r2, [r3, #0]
 80036da:	228c      	movs	r2, #140	; 0x8c
 80036dc:	18bb      	adds	r3, r7, r2
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b3e      	cmp	r3, #62	; 0x3e
 80036e2:	d91a      	bls.n	800371a <HAL_PCD_EP_DB_Transmit+0x706>
 80036e4:	18bb      	adds	r3, r7, r2
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80036ec:	18bb      	adds	r3, r7, r2
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	221f      	movs	r2, #31
 80036f2:	4013      	ands	r3, r2
 80036f4:	d102      	bne.n	80036fc <HAL_PCD_EP_DB_Transmit+0x6e8>
 80036f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036f8:	3b01      	subs	r3, #1
 80036fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80036fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	b29a      	uxth	r2, r3
 8003702:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003704:	b29b      	uxth	r3, r3
 8003706:	029b      	lsls	r3, r3, #10
 8003708:	b29b      	uxth	r3, r3
 800370a:	4313      	orrs	r3, r2
 800370c:	b29b      	uxth	r3, r3
 800370e:	4a0c      	ldr	r2, [pc, #48]	; (8003740 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003710:	4313      	orrs	r3, r2
 8003712:	b29a      	uxth	r2, r3
 8003714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003716:	801a      	strh	r2, [r3, #0]
 8003718:	e04d      	b.n	80037b6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800371a:	238c      	movs	r3, #140	; 0x8c
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d113      	bne.n	800374c <HAL_PCD_EP_DB_Transmit+0x738>
 8003724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	4a05      	ldr	r2, [pc, #20]	; (8003740 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800372c:	4313      	orrs	r3, r2
 800372e:	b29a      	uxth	r2, r3
 8003730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003732:	801a      	strh	r2, [r3, #0]
 8003734:	e03f      	b.n	80037b6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	00000402 	.word	0x00000402
 800373c:	00000406 	.word	0x00000406
 8003740:	ffff8000 	.word	0xffff8000
 8003744:	ffff8f8f 	.word	0xffff8f8f
 8003748:	ffffc080 	.word	0xffffc080
 800374c:	228c      	movs	r2, #140	; 0x8c
 800374e:	18bb      	adds	r3, r7, r2
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	085b      	lsrs	r3, r3, #1
 8003754:	66bb      	str	r3, [r7, #104]	; 0x68
 8003756:	18bb      	adds	r3, r7, r2
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2201      	movs	r2, #1
 800375c:	4013      	ands	r3, r2
 800375e:	d002      	beq.n	8003766 <HAL_PCD_EP_DB_Transmit+0x752>
 8003760:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003762:	3301      	adds	r3, #1
 8003764:	66bb      	str	r3, [r7, #104]	; 0x68
 8003766:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	b29a      	uxth	r2, r3
 800376c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800376e:	b29b      	uxth	r3, r3
 8003770:	029b      	lsls	r3, r3, #10
 8003772:	b29b      	uxth	r3, r3
 8003774:	4313      	orrs	r3, r2
 8003776:	b29a      	uxth	r2, r3
 8003778:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800377a:	801a      	strh	r2, [r3, #0]
 800377c:	e01b      	b.n	80037b6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	785b      	ldrb	r3, [r3, #1]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d117      	bne.n	80037b6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2250      	movs	r2, #80	; 0x50
 800378c:	5a9b      	ldrh	r3, [r3, r2]
 800378e:	b29b      	uxth	r3, r3
 8003790:	001a      	movs	r2, r3
 8003792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003794:	189b      	adds	r3, r3, r2
 8003796:	657b      	str	r3, [r7, #84]	; 0x54
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	00da      	lsls	r2, r3, #3
 800379e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a0:	18d3      	adds	r3, r2, r3
 80037a2:	4a21      	ldr	r2, [pc, #132]	; (8003828 <HAL_PCD_EP_DB_Transmit+0x814>)
 80037a4:	4694      	mov	ip, r2
 80037a6:	4463      	add	r3, ip
 80037a8:	653b      	str	r3, [r7, #80]	; 0x50
 80037aa:	238c      	movs	r3, #140	; 0x8c
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	6959      	ldr	r1, [r3, #20]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	895a      	ldrh	r2, [r3, #10]
 80037c2:	238c      	movs	r3, #140	; 0x8c
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	f003 fd5b 	bl	8007284 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	001a      	movs	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	18d3      	adds	r3, r2, r3
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	b29a      	uxth	r2, r3
 80037e0:	2014      	movs	r0, #20
 80037e2:	183b      	adds	r3, r7, r0
 80037e4:	4911      	ldr	r1, [pc, #68]	; (800382c <HAL_PCD_EP_DB_Transmit+0x818>)
 80037e6:	400a      	ands	r2, r1
 80037e8:	801a      	strh	r2, [r3, #0]
 80037ea:	183b      	adds	r3, r7, r0
 80037ec:	183a      	adds	r2, r7, r0
 80037ee:	8812      	ldrh	r2, [r2, #0]
 80037f0:	2110      	movs	r1, #16
 80037f2:	404a      	eors	r2, r1
 80037f4:	801a      	strh	r2, [r3, #0]
 80037f6:	183b      	adds	r3, r7, r0
 80037f8:	183a      	adds	r2, r7, r0
 80037fa:	8812      	ldrh	r2, [r2, #0]
 80037fc:	2120      	movs	r1, #32
 80037fe:	404a      	eors	r2, r1
 8003800:	801a      	strh	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	001a      	movs	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	18d3      	adds	r3, r2, r3
 8003810:	183a      	adds	r2, r7, r0
 8003812:	8812      	ldrh	r2, [r2, #0]
 8003814:	4906      	ldr	r1, [pc, #24]	; (8003830 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8003816:	430a      	orrs	r2, r1
 8003818:	b292      	uxth	r2, r2
 800381a:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	0018      	movs	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	b024      	add	sp, #144	; 0x90
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	00000406 	.word	0x00000406
 800382c:	ffff8fbf 	.word	0xffff8fbf
 8003830:	ffff8080 	.word	0xffff8080

08003834 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	23ba      	movs	r3, #186	; 0xba
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	2101      	movs	r1, #1
 800384a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	23b8      	movs	r3, #184	; 0xb8
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	2100      	movs	r1, #0
 8003854:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2254      	movs	r2, #84	; 0x54
 800385a:	5a9b      	ldrh	r3, [r3, r2]
 800385c:	b29b      	uxth	r3, r3
 800385e:	2201      	movs	r2, #1
 8003860:	4313      	orrs	r3, r2
 8003862:	b299      	uxth	r1, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2254      	movs	r2, #84	; 0x54
 8003868:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2254      	movs	r2, #84	; 0x54
 800386e:	5a9b      	ldrh	r3, [r3, r2]
 8003870:	b29b      	uxth	r3, r3
 8003872:	2202      	movs	r2, #2
 8003874:	4313      	orrs	r3, r2
 8003876:	b299      	uxth	r1, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2254      	movs	r2, #84	; 0x54
 800387c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	0018      	movs	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	b004      	add	sp, #16
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	000a      	movs	r2, r1
 8003892:	1cfb      	adds	r3, r7, #3
 8003894:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	46bd      	mov	sp, r7
 800389a:	b002      	add	sp, #8
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d102      	bne.n	80038b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	f000 fb76 	bl	8003fa0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2201      	movs	r2, #1
 80038ba:	4013      	ands	r3, r2
 80038bc:	d100      	bne.n	80038c0 <HAL_RCC_OscConfig+0x20>
 80038be:	e08e      	b.n	80039de <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80038c0:	4bc5      	ldr	r3, [pc, #788]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	220c      	movs	r2, #12
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d00e      	beq.n	80038ea <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038cc:	4bc2      	ldr	r3, [pc, #776]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	220c      	movs	r2, #12
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d117      	bne.n	8003908 <HAL_RCC_OscConfig+0x68>
 80038d8:	4bbf      	ldr	r3, [pc, #764]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	23c0      	movs	r3, #192	; 0xc0
 80038de:	025b      	lsls	r3, r3, #9
 80038e0:	401a      	ands	r2, r3
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	025b      	lsls	r3, r3, #9
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d10e      	bne.n	8003908 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ea:	4bbb      	ldr	r3, [pc, #748]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	2380      	movs	r3, #128	; 0x80
 80038f0:	029b      	lsls	r3, r3, #10
 80038f2:	4013      	ands	r3, r2
 80038f4:	d100      	bne.n	80038f8 <HAL_RCC_OscConfig+0x58>
 80038f6:	e071      	b.n	80039dc <HAL_RCC_OscConfig+0x13c>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d000      	beq.n	8003902 <HAL_RCC_OscConfig+0x62>
 8003900:	e06c      	b.n	80039dc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	f000 fb4c 	bl	8003fa0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d107      	bne.n	8003920 <HAL_RCC_OscConfig+0x80>
 8003910:	4bb1      	ldr	r3, [pc, #708]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	4bb0      	ldr	r3, [pc, #704]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003916:	2180      	movs	r1, #128	; 0x80
 8003918:	0249      	lsls	r1, r1, #9
 800391a:	430a      	orrs	r2, r1
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e02f      	b.n	8003980 <HAL_RCC_OscConfig+0xe0>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10c      	bne.n	8003942 <HAL_RCC_OscConfig+0xa2>
 8003928:	4bab      	ldr	r3, [pc, #684]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4baa      	ldr	r3, [pc, #680]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 800392e:	49ab      	ldr	r1, [pc, #684]	; (8003bdc <HAL_RCC_OscConfig+0x33c>)
 8003930:	400a      	ands	r2, r1
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	4ba8      	ldr	r3, [pc, #672]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4ba7      	ldr	r3, [pc, #668]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 800393a:	49a9      	ldr	r1, [pc, #676]	; (8003be0 <HAL_RCC_OscConfig+0x340>)
 800393c:	400a      	ands	r2, r1
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	e01e      	b.n	8003980 <HAL_RCC_OscConfig+0xe0>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b05      	cmp	r3, #5
 8003948:	d10e      	bne.n	8003968 <HAL_RCC_OscConfig+0xc8>
 800394a:	4ba3      	ldr	r3, [pc, #652]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	4ba2      	ldr	r3, [pc, #648]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003950:	2180      	movs	r1, #128	; 0x80
 8003952:	02c9      	lsls	r1, r1, #11
 8003954:	430a      	orrs	r2, r1
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	4b9f      	ldr	r3, [pc, #636]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	4b9e      	ldr	r3, [pc, #632]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 800395e:	2180      	movs	r1, #128	; 0x80
 8003960:	0249      	lsls	r1, r1, #9
 8003962:	430a      	orrs	r2, r1
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	e00b      	b.n	8003980 <HAL_RCC_OscConfig+0xe0>
 8003968:	4b9b      	ldr	r3, [pc, #620]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b9a      	ldr	r3, [pc, #616]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 800396e:	499b      	ldr	r1, [pc, #620]	; (8003bdc <HAL_RCC_OscConfig+0x33c>)
 8003970:	400a      	ands	r2, r1
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	4b98      	ldr	r3, [pc, #608]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	4b97      	ldr	r3, [pc, #604]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 800397a:	4999      	ldr	r1, [pc, #612]	; (8003be0 <HAL_RCC_OscConfig+0x340>)
 800397c:	400a      	ands	r2, r1
 800397e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d014      	beq.n	80039b2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7fd faaa 	bl	8000ee0 <HAL_GetTick>
 800398c:	0003      	movs	r3, r0
 800398e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003992:	f7fd faa5 	bl	8000ee0 <HAL_GetTick>
 8003996:	0002      	movs	r2, r0
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b64      	cmp	r3, #100	; 0x64
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e2fd      	b.n	8003fa0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a4:	4b8c      	ldr	r3, [pc, #560]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	029b      	lsls	r3, r3, #10
 80039ac:	4013      	ands	r3, r2
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0xf2>
 80039b0:	e015      	b.n	80039de <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b2:	f7fd fa95 	bl	8000ee0 <HAL_GetTick>
 80039b6:	0003      	movs	r3, r0
 80039b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039bc:	f7fd fa90 	bl	8000ee0 <HAL_GetTick>
 80039c0:	0002      	movs	r2, r0
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b64      	cmp	r3, #100	; 0x64
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e2e8      	b.n	8003fa0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ce:	4b82      	ldr	r3, [pc, #520]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	029b      	lsls	r3, r3, #10
 80039d6:	4013      	ands	r3, r2
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x11c>
 80039da:	e000      	b.n	80039de <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039dc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2202      	movs	r2, #2
 80039e4:	4013      	ands	r3, r2
 80039e6:	d100      	bne.n	80039ea <HAL_RCC_OscConfig+0x14a>
 80039e8:	e06c      	b.n	8003ac4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80039ea:	4b7b      	ldr	r3, [pc, #492]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	220c      	movs	r2, #12
 80039f0:	4013      	ands	r3, r2
 80039f2:	d00e      	beq.n	8003a12 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80039f4:	4b78      	ldr	r3, [pc, #480]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	220c      	movs	r2, #12
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d11f      	bne.n	8003a40 <HAL_RCC_OscConfig+0x1a0>
 8003a00:	4b75      	ldr	r3, [pc, #468]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	23c0      	movs	r3, #192	; 0xc0
 8003a06:	025b      	lsls	r3, r3, #9
 8003a08:	401a      	ands	r2, r3
 8003a0a:	2380      	movs	r3, #128	; 0x80
 8003a0c:	021b      	lsls	r3, r3, #8
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d116      	bne.n	8003a40 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a12:	4b71      	ldr	r3, [pc, #452]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2202      	movs	r2, #2
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_OscConfig+0x188>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e2bb      	b.n	8003fa0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a28:	4b6b      	ldr	r3, [pc, #428]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	22f8      	movs	r2, #248	; 0xf8
 8003a2e:	4393      	bics	r3, r2
 8003a30:	0019      	movs	r1, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	00da      	lsls	r2, r3, #3
 8003a38:	4b67      	ldr	r3, [pc, #412]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a3e:	e041      	b.n	8003ac4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d024      	beq.n	8003a92 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a48:	4b63      	ldr	r3, [pc, #396]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	4b62      	ldr	r3, [pc, #392]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003a4e:	2101      	movs	r1, #1
 8003a50:	430a      	orrs	r2, r1
 8003a52:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a54:	f7fd fa44 	bl	8000ee0 <HAL_GetTick>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a5e:	f7fd fa3f 	bl	8000ee0 <HAL_GetTick>
 8003a62:	0002      	movs	r2, r0
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e297      	b.n	8003fa0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a70:	4b59      	ldr	r3, [pc, #356]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2202      	movs	r2, #2
 8003a76:	4013      	ands	r3, r2
 8003a78:	d0f1      	beq.n	8003a5e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7a:	4b57      	ldr	r3, [pc, #348]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	22f8      	movs	r2, #248	; 0xf8
 8003a80:	4393      	bics	r3, r2
 8003a82:	0019      	movs	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	00da      	lsls	r2, r3, #3
 8003a8a:	4b53      	ldr	r3, [pc, #332]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	e018      	b.n	8003ac4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a92:	4b51      	ldr	r3, [pc, #324]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4b50      	ldr	r3, [pc, #320]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003a98:	2101      	movs	r1, #1
 8003a9a:	438a      	bics	r2, r1
 8003a9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9e:	f7fd fa1f 	bl	8000ee0 <HAL_GetTick>
 8003aa2:	0003      	movs	r3, r0
 8003aa4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aa8:	f7fd fa1a 	bl	8000ee0 <HAL_GetTick>
 8003aac:	0002      	movs	r2, r0
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e272      	b.n	8003fa0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aba:	4b47      	ldr	r3, [pc, #284]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d1f1      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2208      	movs	r2, #8
 8003aca:	4013      	ands	r3, r2
 8003acc:	d036      	beq.n	8003b3c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d019      	beq.n	8003b0a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ad6:	4b40      	ldr	r3, [pc, #256]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003ad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ada:	4b3f      	ldr	r3, [pc, #252]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003adc:	2101      	movs	r1, #1
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae2:	f7fd f9fd 	bl	8000ee0 <HAL_GetTick>
 8003ae6:	0003      	movs	r3, r0
 8003ae8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aec:	f7fd f9f8 	bl	8000ee0 <HAL_GetTick>
 8003af0:	0002      	movs	r2, r0
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e250      	b.n	8003fa0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afe:	4b36      	ldr	r3, [pc, #216]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2202      	movs	r2, #2
 8003b04:	4013      	ands	r3, r2
 8003b06:	d0f1      	beq.n	8003aec <HAL_RCC_OscConfig+0x24c>
 8003b08:	e018      	b.n	8003b3c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b0a:	4b33      	ldr	r3, [pc, #204]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b0e:	4b32      	ldr	r3, [pc, #200]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003b10:	2101      	movs	r1, #1
 8003b12:	438a      	bics	r2, r1
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b16:	f7fd f9e3 	bl	8000ee0 <HAL_GetTick>
 8003b1a:	0003      	movs	r3, r0
 8003b1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b20:	f7fd f9de 	bl	8000ee0 <HAL_GetTick>
 8003b24:	0002      	movs	r2, r0
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e236      	b.n	8003fa0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b32:	4b29      	ldr	r3, [pc, #164]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	2202      	movs	r2, #2
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d1f1      	bne.n	8003b20 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2204      	movs	r2, #4
 8003b42:	4013      	ands	r3, r2
 8003b44:	d100      	bne.n	8003b48 <HAL_RCC_OscConfig+0x2a8>
 8003b46:	e0b5      	b.n	8003cb4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b48:	201f      	movs	r0, #31
 8003b4a:	183b      	adds	r3, r7, r0
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b50:	4b21      	ldr	r3, [pc, #132]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	2380      	movs	r3, #128	; 0x80
 8003b56:	055b      	lsls	r3, r3, #21
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d110      	bne.n	8003b7e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5c:	4b1e      	ldr	r3, [pc, #120]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	4b1d      	ldr	r3, [pc, #116]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003b62:	2180      	movs	r1, #128	; 0x80
 8003b64:	0549      	lsls	r1, r1, #21
 8003b66:	430a      	orrs	r2, r1
 8003b68:	61da      	str	r2, [r3, #28]
 8003b6a:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	055b      	lsls	r3, r3, #21
 8003b72:	4013      	ands	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b78:	183b      	adds	r3, r7, r0
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7e:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <HAL_RCC_OscConfig+0x344>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4013      	ands	r3, r2
 8003b88:	d11a      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b8a:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <HAL_RCC_OscConfig+0x344>)
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <HAL_RCC_OscConfig+0x344>)
 8003b90:	2180      	movs	r1, #128	; 0x80
 8003b92:	0049      	lsls	r1, r1, #1
 8003b94:	430a      	orrs	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b98:	f7fd f9a2 	bl	8000ee0 <HAL_GetTick>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba2:	f7fd f99d 	bl	8000ee0 <HAL_GetTick>
 8003ba6:	0002      	movs	r2, r0
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b64      	cmp	r3, #100	; 0x64
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e1f5      	b.n	8003fa0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_RCC_OscConfig+0x344>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	2380      	movs	r3, #128	; 0x80
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d10f      	bne.n	8003be8 <HAL_RCC_OscConfig+0x348>
 8003bc8:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003bca:	6a1a      	ldr	r2, [r3, #32]
 8003bcc:	4b02      	ldr	r3, [pc, #8]	; (8003bd8 <HAL_RCC_OscConfig+0x338>)
 8003bce:	2101      	movs	r1, #1
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	621a      	str	r2, [r3, #32]
 8003bd4:	e036      	b.n	8003c44 <HAL_RCC_OscConfig+0x3a4>
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	fffeffff 	.word	0xfffeffff
 8003be0:	fffbffff 	.word	0xfffbffff
 8003be4:	40007000 	.word	0x40007000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10c      	bne.n	8003c0a <HAL_RCC_OscConfig+0x36a>
 8003bf0:	4bca      	ldr	r3, [pc, #808]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003bf2:	6a1a      	ldr	r2, [r3, #32]
 8003bf4:	4bc9      	ldr	r3, [pc, #804]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	438a      	bics	r2, r1
 8003bfa:	621a      	str	r2, [r3, #32]
 8003bfc:	4bc7      	ldr	r3, [pc, #796]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003bfe:	6a1a      	ldr	r2, [r3, #32]
 8003c00:	4bc6      	ldr	r3, [pc, #792]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003c02:	2104      	movs	r1, #4
 8003c04:	438a      	bics	r2, r1
 8003c06:	621a      	str	r2, [r3, #32]
 8003c08:	e01c      	b.n	8003c44 <HAL_RCC_OscConfig+0x3a4>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b05      	cmp	r3, #5
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x38c>
 8003c12:	4bc2      	ldr	r3, [pc, #776]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003c14:	6a1a      	ldr	r2, [r3, #32]
 8003c16:	4bc1      	ldr	r3, [pc, #772]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003c18:	2104      	movs	r1, #4
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	621a      	str	r2, [r3, #32]
 8003c1e:	4bbf      	ldr	r3, [pc, #764]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003c20:	6a1a      	ldr	r2, [r3, #32]
 8003c22:	4bbe      	ldr	r3, [pc, #760]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003c24:	2101      	movs	r1, #1
 8003c26:	430a      	orrs	r2, r1
 8003c28:	621a      	str	r2, [r3, #32]
 8003c2a:	e00b      	b.n	8003c44 <HAL_RCC_OscConfig+0x3a4>
 8003c2c:	4bbb      	ldr	r3, [pc, #748]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003c2e:	6a1a      	ldr	r2, [r3, #32]
 8003c30:	4bba      	ldr	r3, [pc, #744]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003c32:	2101      	movs	r1, #1
 8003c34:	438a      	bics	r2, r1
 8003c36:	621a      	str	r2, [r3, #32]
 8003c38:	4bb8      	ldr	r3, [pc, #736]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003c3a:	6a1a      	ldr	r2, [r3, #32]
 8003c3c:	4bb7      	ldr	r3, [pc, #732]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003c3e:	2104      	movs	r1, #4
 8003c40:	438a      	bics	r2, r1
 8003c42:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d014      	beq.n	8003c76 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4c:	f7fd f948 	bl	8000ee0 <HAL_GetTick>
 8003c50:	0003      	movs	r3, r0
 8003c52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c54:	e009      	b.n	8003c6a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c56:	f7fd f943 	bl	8000ee0 <HAL_GetTick>
 8003c5a:	0002      	movs	r2, r0
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	4aaf      	ldr	r2, [pc, #700]	; (8003f20 <HAL_RCC_OscConfig+0x680>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e19a      	b.n	8003fa0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c6a:	4bac      	ldr	r3, [pc, #688]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	4013      	ands	r3, r2
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x3b6>
 8003c74:	e013      	b.n	8003c9e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c76:	f7fd f933 	bl	8000ee0 <HAL_GetTick>
 8003c7a:	0003      	movs	r3, r0
 8003c7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7e:	e009      	b.n	8003c94 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c80:	f7fd f92e 	bl	8000ee0 <HAL_GetTick>
 8003c84:	0002      	movs	r2, r0
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	4aa5      	ldr	r2, [pc, #660]	; (8003f20 <HAL_RCC_OscConfig+0x680>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e185      	b.n	8003fa0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c94:	4ba1      	ldr	r3, [pc, #644]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	2202      	movs	r2, #2
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c9e:	231f      	movs	r3, #31
 8003ca0:	18fb      	adds	r3, r7, r3
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d105      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca8:	4b9c      	ldr	r3, [pc, #624]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003caa:	69da      	ldr	r2, [r3, #28]
 8003cac:	4b9b      	ldr	r3, [pc, #620]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003cae:	499d      	ldr	r1, [pc, #628]	; (8003f24 <HAL_RCC_OscConfig+0x684>)
 8003cb0:	400a      	ands	r2, r1
 8003cb2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2210      	movs	r2, #16
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d063      	beq.n	8003d86 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d12a      	bne.n	8003d1c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003cc6:	4b95      	ldr	r3, [pc, #596]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cca:	4b94      	ldr	r3, [pc, #592]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003ccc:	2104      	movs	r1, #4
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003cd2:	4b92      	ldr	r3, [pc, #584]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cd6:	4b91      	ldr	r3, [pc, #580]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003cd8:	2101      	movs	r1, #1
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cde:	f7fd f8ff 	bl	8000ee0 <HAL_GetTick>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003ce8:	f7fd f8fa 	bl	8000ee0 <HAL_GetTick>
 8003cec:	0002      	movs	r2, r0
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e152      	b.n	8003fa0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003cfa:	4b88      	ldr	r3, [pc, #544]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfe:	2202      	movs	r2, #2
 8003d00:	4013      	ands	r3, r2
 8003d02:	d0f1      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d04:	4b85      	ldr	r3, [pc, #532]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d08:	22f8      	movs	r2, #248	; 0xf8
 8003d0a:	4393      	bics	r3, r2
 8003d0c:	0019      	movs	r1, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	00da      	lsls	r2, r3, #3
 8003d14:	4b81      	ldr	r3, [pc, #516]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003d16:	430a      	orrs	r2, r1
 8003d18:	635a      	str	r2, [r3, #52]	; 0x34
 8003d1a:	e034      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	3305      	adds	r3, #5
 8003d22:	d111      	bne.n	8003d48 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003d24:	4b7d      	ldr	r3, [pc, #500]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d28:	4b7c      	ldr	r3, [pc, #496]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003d2a:	2104      	movs	r1, #4
 8003d2c:	438a      	bics	r2, r1
 8003d2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d30:	4b7a      	ldr	r3, [pc, #488]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d34:	22f8      	movs	r2, #248	; 0xf8
 8003d36:	4393      	bics	r3, r2
 8003d38:	0019      	movs	r1, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	00da      	lsls	r2, r3, #3
 8003d40:	4b76      	ldr	r3, [pc, #472]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003d42:	430a      	orrs	r2, r1
 8003d44:	635a      	str	r2, [r3, #52]	; 0x34
 8003d46:	e01e      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d48:	4b74      	ldr	r3, [pc, #464]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d4c:	4b73      	ldr	r3, [pc, #460]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003d4e:	2104      	movs	r1, #4
 8003d50:	430a      	orrs	r2, r1
 8003d52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003d54:	4b71      	ldr	r3, [pc, #452]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d58:	4b70      	ldr	r3, [pc, #448]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	438a      	bics	r2, r1
 8003d5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d60:	f7fd f8be 	bl	8000ee0 <HAL_GetTick>
 8003d64:	0003      	movs	r3, r0
 8003d66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d6a:	f7fd f8b9 	bl	8000ee0 <HAL_GetTick>
 8003d6e:	0002      	movs	r2, r0
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e111      	b.n	8003fa0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003d7c:	4b67      	ldr	r3, [pc, #412]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d80:	2202      	movs	r2, #2
 8003d82:	4013      	ands	r3, r2
 8003d84:	d1f1      	bne.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d05c      	beq.n	8003e4a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003d90:	4b62      	ldr	r3, [pc, #392]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	220c      	movs	r2, #12
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b0c      	cmp	r3, #12
 8003d9a:	d00e      	beq.n	8003dba <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003d9c:	4b5f      	ldr	r3, [pc, #380]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	220c      	movs	r2, #12
 8003da2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d114      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003da8:	4b5c      	ldr	r3, [pc, #368]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	23c0      	movs	r3, #192	; 0xc0
 8003dae:	025b      	lsls	r3, r3, #9
 8003db0:	401a      	ands	r2, r3
 8003db2:	23c0      	movs	r3, #192	; 0xc0
 8003db4:	025b      	lsls	r3, r3, #9
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d10b      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003dba:	4b58      	ldr	r3, [pc, #352]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	029b      	lsls	r3, r3, #10
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d040      	beq.n	8003e48 <HAL_RCC_OscConfig+0x5a8>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d03c      	beq.n	8003e48 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e0e6      	b.n	8003fa0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d01b      	beq.n	8003e12 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003dda:	4b50      	ldr	r3, [pc, #320]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003ddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dde:	4b4f      	ldr	r3, [pc, #316]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003de0:	2180      	movs	r1, #128	; 0x80
 8003de2:	0249      	lsls	r1, r1, #9
 8003de4:	430a      	orrs	r2, r1
 8003de6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7fd f87a 	bl	8000ee0 <HAL_GetTick>
 8003dec:	0003      	movs	r3, r0
 8003dee:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003df2:	f7fd f875 	bl	8000ee0 <HAL_GetTick>
 8003df6:	0002      	movs	r2, r0
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e0cd      	b.n	8003fa0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003e04:	4b45      	ldr	r3, [pc, #276]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e08:	2380      	movs	r3, #128	; 0x80
 8003e0a:	029b      	lsls	r3, r3, #10
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_OscConfig+0x552>
 8003e10:	e01b      	b.n	8003e4a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003e12:	4b42      	ldr	r3, [pc, #264]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003e14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e16:	4b41      	ldr	r3, [pc, #260]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003e18:	4943      	ldr	r1, [pc, #268]	; (8003f28 <HAL_RCC_OscConfig+0x688>)
 8003e1a:	400a      	ands	r2, r1
 8003e1c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1e:	f7fd f85f 	bl	8000ee0 <HAL_GetTick>
 8003e22:	0003      	movs	r3, r0
 8003e24:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e28:	f7fd f85a 	bl	8000ee0 <HAL_GetTick>
 8003e2c:	0002      	movs	r2, r0
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e0b2      	b.n	8003fa0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003e3a:	4b38      	ldr	r3, [pc, #224]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e3e:	2380      	movs	r3, #128	; 0x80
 8003e40:	029b      	lsls	r3, r3, #10
 8003e42:	4013      	ands	r3, r2
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0x588>
 8003e46:	e000      	b.n	8003e4a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003e48:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d100      	bne.n	8003e54 <HAL_RCC_OscConfig+0x5b4>
 8003e52:	e0a4      	b.n	8003f9e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e54:	4b31      	ldr	r3, [pc, #196]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	220c      	movs	r2, #12
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d100      	bne.n	8003e62 <HAL_RCC_OscConfig+0x5c2>
 8003e60:	e078      	b.n	8003f54 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d14c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6a:	4b2c      	ldr	r3, [pc, #176]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003e70:	492e      	ldr	r1, [pc, #184]	; (8003f2c <HAL_RCC_OscConfig+0x68c>)
 8003e72:	400a      	ands	r2, r1
 8003e74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e76:	f7fd f833 	bl	8000ee0 <HAL_GetTick>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e80:	f7fd f82e 	bl	8000ee0 <HAL_GetTick>
 8003e84:	0002      	movs	r2, r0
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e086      	b.n	8003fa0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e92:	4b22      	ldr	r3, [pc, #136]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	2380      	movs	r3, #128	; 0x80
 8003e98:	049b      	lsls	r3, r3, #18
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e9e:	4b1f      	ldr	r3, [pc, #124]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	220f      	movs	r2, #15
 8003ea4:	4393      	bics	r3, r2
 8003ea6:	0019      	movs	r1, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eac:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eb2:	4b1a      	ldr	r3, [pc, #104]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	; (8003f30 <HAL_RCC_OscConfig+0x690>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	0019      	movs	r1, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ecc:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003ed2:	2180      	movs	r1, #128	; 0x80
 8003ed4:	0449      	lsls	r1, r1, #17
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7fd f801 	bl	8000ee0 <HAL_GetTick>
 8003ede:	0003      	movs	r3, r0
 8003ee0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fc fffc 	bl	8000ee0 <HAL_GetTick>
 8003ee8:	0002      	movs	r2, r0
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e054      	b.n	8003fa0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	049b      	lsls	r3, r3, #18
 8003efe:	4013      	ands	r3, r2
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x644>
 8003f02:	e04c      	b.n	8003f9e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <HAL_RCC_OscConfig+0x67c>)
 8003f0a:	4908      	ldr	r1, [pc, #32]	; (8003f2c <HAL_RCC_OscConfig+0x68c>)
 8003f0c:	400a      	ands	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f10:	f7fc ffe6 	bl	8000ee0 <HAL_GetTick>
 8003f14:	0003      	movs	r3, r0
 8003f16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f18:	e015      	b.n	8003f46 <HAL_RCC_OscConfig+0x6a6>
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	00001388 	.word	0x00001388
 8003f24:	efffffff 	.word	0xefffffff
 8003f28:	fffeffff 	.word	0xfffeffff
 8003f2c:	feffffff 	.word	0xfeffffff
 8003f30:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fc ffd4 	bl	8000ee0 <HAL_GetTick>
 8003f38:	0002      	movs	r2, r0
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e02c      	b.n	8003fa0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f46:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <HAL_RCC_OscConfig+0x708>)
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	2380      	movs	r3, #128	; 0x80
 8003f4c:	049b      	lsls	r3, r3, #18
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x694>
 8003f52:	e024      	b.n	8003f9e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e01f      	b.n	8003fa0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003f60:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <HAL_RCC_OscConfig+0x708>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003f66:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <HAL_RCC_OscConfig+0x708>)
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	23c0      	movs	r3, #192	; 0xc0
 8003f70:	025b      	lsls	r3, r3, #9
 8003f72:	401a      	ands	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d10e      	bne.n	8003f9a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	220f      	movs	r2, #15
 8003f80:	401a      	ands	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d107      	bne.n	8003f9a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	23f0      	movs	r3, #240	; 0xf0
 8003f8e:	039b      	lsls	r3, r3, #14
 8003f90:	401a      	ands	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d001      	beq.n	8003f9e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b008      	add	sp, #32
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40021000 	.word	0x40021000

08003fac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0bf      	b.n	8004140 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc0:	4b61      	ldr	r3, [pc, #388]	; (8004148 <HAL_RCC_ClockConfig+0x19c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d911      	bls.n	8003ff2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fce:	4b5e      	ldr	r3, [pc, #376]	; (8004148 <HAL_RCC_ClockConfig+0x19c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	4393      	bics	r3, r2
 8003fd6:	0019      	movs	r1, r3
 8003fd8:	4b5b      	ldr	r3, [pc, #364]	; (8004148 <HAL_RCC_ClockConfig+0x19c>)
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe0:	4b59      	ldr	r3, [pc, #356]	; (8004148 <HAL_RCC_ClockConfig+0x19c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d001      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e0a6      	b.n	8004140 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d015      	beq.n	8004028 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2204      	movs	r2, #4
 8004002:	4013      	ands	r3, r2
 8004004:	d006      	beq.n	8004014 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004006:	4b51      	ldr	r3, [pc, #324]	; (800414c <HAL_RCC_ClockConfig+0x1a0>)
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	4b50      	ldr	r3, [pc, #320]	; (800414c <HAL_RCC_ClockConfig+0x1a0>)
 800400c:	21e0      	movs	r1, #224	; 0xe0
 800400e:	00c9      	lsls	r1, r1, #3
 8004010:	430a      	orrs	r2, r1
 8004012:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004014:	4b4d      	ldr	r3, [pc, #308]	; (800414c <HAL_RCC_ClockConfig+0x1a0>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	22f0      	movs	r2, #240	; 0xf0
 800401a:	4393      	bics	r3, r2
 800401c:	0019      	movs	r1, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	4b4a      	ldr	r3, [pc, #296]	; (800414c <HAL_RCC_ClockConfig+0x1a0>)
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2201      	movs	r2, #1
 800402e:	4013      	ands	r3, r2
 8004030:	d04c      	beq.n	80040cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d107      	bne.n	800404a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403a:	4b44      	ldr	r3, [pc, #272]	; (800414c <HAL_RCC_ClockConfig+0x1a0>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	029b      	lsls	r3, r3, #10
 8004042:	4013      	ands	r3, r2
 8004044:	d120      	bne.n	8004088 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e07a      	b.n	8004140 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d107      	bne.n	8004062 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004052:	4b3e      	ldr	r3, [pc, #248]	; (800414c <HAL_RCC_ClockConfig+0x1a0>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	2380      	movs	r3, #128	; 0x80
 8004058:	049b      	lsls	r3, r3, #18
 800405a:	4013      	ands	r3, r2
 800405c:	d114      	bne.n	8004088 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e06e      	b.n	8004140 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b03      	cmp	r3, #3
 8004068:	d107      	bne.n	800407a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800406a:	4b38      	ldr	r3, [pc, #224]	; (800414c <HAL_RCC_ClockConfig+0x1a0>)
 800406c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800406e:	2380      	movs	r3, #128	; 0x80
 8004070:	029b      	lsls	r3, r3, #10
 8004072:	4013      	ands	r3, r2
 8004074:	d108      	bne.n	8004088 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e062      	b.n	8004140 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407a:	4b34      	ldr	r3, [pc, #208]	; (800414c <HAL_RCC_ClockConfig+0x1a0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2202      	movs	r2, #2
 8004080:	4013      	ands	r3, r2
 8004082:	d101      	bne.n	8004088 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e05b      	b.n	8004140 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004088:	4b30      	ldr	r3, [pc, #192]	; (800414c <HAL_RCC_ClockConfig+0x1a0>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2203      	movs	r2, #3
 800408e:	4393      	bics	r3, r2
 8004090:	0019      	movs	r1, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	4b2d      	ldr	r3, [pc, #180]	; (800414c <HAL_RCC_ClockConfig+0x1a0>)
 8004098:	430a      	orrs	r2, r1
 800409a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800409c:	f7fc ff20 	bl	8000ee0 <HAL_GetTick>
 80040a0:	0003      	movs	r3, r0
 80040a2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a4:	e009      	b.n	80040ba <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a6:	f7fc ff1b 	bl	8000ee0 <HAL_GetTick>
 80040aa:	0002      	movs	r2, r0
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	4a27      	ldr	r2, [pc, #156]	; (8004150 <HAL_RCC_ClockConfig+0x1a4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e042      	b.n	8004140 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ba:	4b24      	ldr	r3, [pc, #144]	; (800414c <HAL_RCC_ClockConfig+0x1a0>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	220c      	movs	r2, #12
 80040c0:	401a      	ands	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d1ec      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040cc:	4b1e      	ldr	r3, [pc, #120]	; (8004148 <HAL_RCC_ClockConfig+0x19c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2201      	movs	r2, #1
 80040d2:	4013      	ands	r3, r2
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d211      	bcs.n	80040fe <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040da:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <HAL_RCC_ClockConfig+0x19c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2201      	movs	r2, #1
 80040e0:	4393      	bics	r3, r2
 80040e2:	0019      	movs	r1, r3
 80040e4:	4b18      	ldr	r3, [pc, #96]	; (8004148 <HAL_RCC_ClockConfig+0x19c>)
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ec:	4b16      	ldr	r3, [pc, #88]	; (8004148 <HAL_RCC_ClockConfig+0x19c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2201      	movs	r2, #1
 80040f2:	4013      	ands	r3, r2
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d001      	beq.n	80040fe <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e020      	b.n	8004140 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2204      	movs	r2, #4
 8004104:	4013      	ands	r3, r2
 8004106:	d009      	beq.n	800411c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004108:	4b10      	ldr	r3, [pc, #64]	; (800414c <HAL_RCC_ClockConfig+0x1a0>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	4a11      	ldr	r2, [pc, #68]	; (8004154 <HAL_RCC_ClockConfig+0x1a8>)
 800410e:	4013      	ands	r3, r2
 8004110:	0019      	movs	r1, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	4b0d      	ldr	r3, [pc, #52]	; (800414c <HAL_RCC_ClockConfig+0x1a0>)
 8004118:	430a      	orrs	r2, r1
 800411a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800411c:	f000 f820 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 8004120:	0001      	movs	r1, r0
 8004122:	4b0a      	ldr	r3, [pc, #40]	; (800414c <HAL_RCC_ClockConfig+0x1a0>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	091b      	lsrs	r3, r3, #4
 8004128:	220f      	movs	r2, #15
 800412a:	4013      	ands	r3, r2
 800412c:	4a0a      	ldr	r2, [pc, #40]	; (8004158 <HAL_RCC_ClockConfig+0x1ac>)
 800412e:	5cd3      	ldrb	r3, [r2, r3]
 8004130:	000a      	movs	r2, r1
 8004132:	40da      	lsrs	r2, r3
 8004134:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_RCC_ClockConfig+0x1b0>)
 8004136:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004138:	2003      	movs	r0, #3
 800413a:	f7fc fda9 	bl	8000c90 <HAL_InitTick>
  
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	0018      	movs	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	b004      	add	sp, #16
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40022000 	.word	0x40022000
 800414c:	40021000 	.word	0x40021000
 8004150:	00001388 	.word	0x00001388
 8004154:	fffff8ff 	.word	0xfffff8ff
 8004158:	080074e8 	.word	0x080074e8
 800415c:	20000000 	.word	0x20000000

08004160 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	2300      	movs	r3, #0
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	2300      	movs	r3, #0
 8004174:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800417a:	4b2d      	ldr	r3, [pc, #180]	; (8004230 <HAL_RCC_GetSysClockFreq+0xd0>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	220c      	movs	r2, #12
 8004184:	4013      	ands	r3, r2
 8004186:	2b0c      	cmp	r3, #12
 8004188:	d046      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0xb8>
 800418a:	d848      	bhi.n	800421e <HAL_RCC_GetSysClockFreq+0xbe>
 800418c:	2b04      	cmp	r3, #4
 800418e:	d002      	beq.n	8004196 <HAL_RCC_GetSysClockFreq+0x36>
 8004190:	2b08      	cmp	r3, #8
 8004192:	d003      	beq.n	800419c <HAL_RCC_GetSysClockFreq+0x3c>
 8004194:	e043      	b.n	800421e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004196:	4b27      	ldr	r3, [pc, #156]	; (8004234 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004198:	613b      	str	r3, [r7, #16]
      break;
 800419a:	e043      	b.n	8004224 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	0c9b      	lsrs	r3, r3, #18
 80041a0:	220f      	movs	r2, #15
 80041a2:	4013      	ands	r3, r2
 80041a4:	4a24      	ldr	r2, [pc, #144]	; (8004238 <HAL_RCC_GetSysClockFreq+0xd8>)
 80041a6:	5cd3      	ldrb	r3, [r2, r3]
 80041a8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80041aa:	4b21      	ldr	r3, [pc, #132]	; (8004230 <HAL_RCC_GetSysClockFreq+0xd0>)
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	220f      	movs	r2, #15
 80041b0:	4013      	ands	r3, r2
 80041b2:	4a22      	ldr	r2, [pc, #136]	; (800423c <HAL_RCC_GetSysClockFreq+0xdc>)
 80041b4:	5cd3      	ldrb	r3, [r2, r3]
 80041b6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	23c0      	movs	r3, #192	; 0xc0
 80041bc:	025b      	lsls	r3, r3, #9
 80041be:	401a      	ands	r2, r3
 80041c0:	2380      	movs	r3, #128	; 0x80
 80041c2:	025b      	lsls	r3, r3, #9
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d109      	bne.n	80041dc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	481a      	ldr	r0, [pc, #104]	; (8004234 <HAL_RCC_GetSysClockFreq+0xd4>)
 80041cc:	f7fb ff9c 	bl	8000108 <__udivsi3>
 80041d0:	0003      	movs	r3, r0
 80041d2:	001a      	movs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4353      	muls	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	e01a      	b.n	8004212 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	23c0      	movs	r3, #192	; 0xc0
 80041e0:	025b      	lsls	r3, r3, #9
 80041e2:	401a      	ands	r2, r3
 80041e4:	23c0      	movs	r3, #192	; 0xc0
 80041e6:	025b      	lsls	r3, r3, #9
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d109      	bne.n	8004200 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	4814      	ldr	r0, [pc, #80]	; (8004240 <HAL_RCC_GetSysClockFreq+0xe0>)
 80041f0:	f7fb ff8a 	bl	8000108 <__udivsi3>
 80041f4:	0003      	movs	r3, r0
 80041f6:	001a      	movs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4353      	muls	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	e008      	b.n	8004212 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004200:	68b9      	ldr	r1, [r7, #8]
 8004202:	480c      	ldr	r0, [pc, #48]	; (8004234 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004204:	f7fb ff80 	bl	8000108 <__udivsi3>
 8004208:	0003      	movs	r3, r0
 800420a:	001a      	movs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4353      	muls	r3, r2
 8004210:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	613b      	str	r3, [r7, #16]
      break;
 8004216:	e005      	b.n	8004224 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004218:	4b09      	ldr	r3, [pc, #36]	; (8004240 <HAL_RCC_GetSysClockFreq+0xe0>)
 800421a:	613b      	str	r3, [r7, #16]
      break;
 800421c:	e002      	b.n	8004224 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800421e:	4b05      	ldr	r3, [pc, #20]	; (8004234 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004220:	613b      	str	r3, [r7, #16]
      break;
 8004222:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004224:	693b      	ldr	r3, [r7, #16]
}
 8004226:	0018      	movs	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	b006      	add	sp, #24
 800422c:	bd80      	pop	{r7, pc}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	40021000 	.word	0x40021000
 8004234:	007a1200 	.word	0x007a1200
 8004238:	08007500 	.word	0x08007500
 800423c:	08007510 	.word	0x08007510
 8004240:	02dc6c00 	.word	0x02dc6c00

08004244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004248:	4b02      	ldr	r3, [pc, #8]	; (8004254 <HAL_RCC_GetHCLKFreq+0x10>)
 800424a:	681b      	ldr	r3, [r3, #0]
}
 800424c:	0018      	movs	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	20000000 	.word	0x20000000

08004258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800425c:	f7ff fff2 	bl	8004244 <HAL_RCC_GetHCLKFreq>
 8004260:	0001      	movs	r1, r0
 8004262:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	0a1b      	lsrs	r3, r3, #8
 8004268:	2207      	movs	r2, #7
 800426a:	4013      	ands	r3, r2
 800426c:	4a04      	ldr	r2, [pc, #16]	; (8004280 <HAL_RCC_GetPCLK1Freq+0x28>)
 800426e:	5cd3      	ldrb	r3, [r2, r3]
 8004270:	40d9      	lsrs	r1, r3
 8004272:	000b      	movs	r3, r1
}    
 8004274:	0018      	movs	r0, r3
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	40021000 	.word	0x40021000
 8004280:	080074f8 	.word	0x080074f8

08004284 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2207      	movs	r2, #7
 8004292:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004294:	4b0e      	ldr	r3, [pc, #56]	; (80042d0 <HAL_RCC_GetClockConfig+0x4c>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2203      	movs	r2, #3
 800429a:	401a      	ands	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80042a0:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <HAL_RCC_GetClockConfig+0x4c>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	22f0      	movs	r2, #240	; 0xf0
 80042a6:	401a      	ands	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80042ac:	4b08      	ldr	r3, [pc, #32]	; (80042d0 <HAL_RCC_GetClockConfig+0x4c>)
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	23e0      	movs	r3, #224	; 0xe0
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	401a      	ands	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_RCC_GetClockConfig+0x50>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2201      	movs	r2, #1
 80042c0:	401a      	ands	r2, r3
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	601a      	str	r2, [r3, #0]
}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b002      	add	sp, #8
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	40021000 	.word	0x40021000
 80042d4:	40022000 	.word	0x40022000

080042d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	2380      	movs	r3, #128	; 0x80
 80042ee:	025b      	lsls	r3, r3, #9
 80042f0:	4013      	ands	r3, r2
 80042f2:	d100      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80042f4:	e08e      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80042f6:	2017      	movs	r0, #23
 80042f8:	183b      	adds	r3, r7, r0
 80042fa:	2200      	movs	r2, #0
 80042fc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042fe:	4b6e      	ldr	r3, [pc, #440]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004300:	69da      	ldr	r2, [r3, #28]
 8004302:	2380      	movs	r3, #128	; 0x80
 8004304:	055b      	lsls	r3, r3, #21
 8004306:	4013      	ands	r3, r2
 8004308:	d110      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800430a:	4b6b      	ldr	r3, [pc, #428]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800430c:	69da      	ldr	r2, [r3, #28]
 800430e:	4b6a      	ldr	r3, [pc, #424]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004310:	2180      	movs	r1, #128	; 0x80
 8004312:	0549      	lsls	r1, r1, #21
 8004314:	430a      	orrs	r2, r1
 8004316:	61da      	str	r2, [r3, #28]
 8004318:	4b67      	ldr	r3, [pc, #412]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800431a:	69da      	ldr	r2, [r3, #28]
 800431c:	2380      	movs	r3, #128	; 0x80
 800431e:	055b      	lsls	r3, r3, #21
 8004320:	4013      	ands	r3, r2
 8004322:	60bb      	str	r3, [r7, #8]
 8004324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004326:	183b      	adds	r3, r7, r0
 8004328:	2201      	movs	r2, #1
 800432a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432c:	4b63      	ldr	r3, [pc, #396]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	4013      	ands	r3, r2
 8004336:	d11a      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004338:	4b60      	ldr	r3, [pc, #384]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	4b5f      	ldr	r3, [pc, #380]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800433e:	2180      	movs	r1, #128	; 0x80
 8004340:	0049      	lsls	r1, r1, #1
 8004342:	430a      	orrs	r2, r1
 8004344:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004346:	f7fc fdcb 	bl	8000ee0 <HAL_GetTick>
 800434a:	0003      	movs	r3, r0
 800434c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434e:	e008      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004350:	f7fc fdc6 	bl	8000ee0 <HAL_GetTick>
 8004354:	0002      	movs	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b64      	cmp	r3, #100	; 0x64
 800435c:	d901      	bls.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e0a6      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004362:	4b56      	ldr	r3, [pc, #344]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	2380      	movs	r3, #128	; 0x80
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4013      	ands	r3, r2
 800436c:	d0f0      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800436e:	4b52      	ldr	r3, [pc, #328]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004370:	6a1a      	ldr	r2, [r3, #32]
 8004372:	23c0      	movs	r3, #192	; 0xc0
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4013      	ands	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d034      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	23c0      	movs	r3, #192	; 0xc0
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4013      	ands	r3, r2
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	429a      	cmp	r2, r3
 800438e:	d02c      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004390:	4b49      	ldr	r3, [pc, #292]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	4a4a      	ldr	r2, [pc, #296]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004396:	4013      	ands	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800439a:	4b47      	ldr	r3, [pc, #284]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800439c:	6a1a      	ldr	r2, [r3, #32]
 800439e:	4b46      	ldr	r3, [pc, #280]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043a0:	2180      	movs	r1, #128	; 0x80
 80043a2:	0249      	lsls	r1, r1, #9
 80043a4:	430a      	orrs	r2, r1
 80043a6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043a8:	4b43      	ldr	r3, [pc, #268]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043aa:	6a1a      	ldr	r2, [r3, #32]
 80043ac:	4b42      	ldr	r3, [pc, #264]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043ae:	4945      	ldr	r1, [pc, #276]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80043b0:	400a      	ands	r2, r1
 80043b2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043b4:	4b40      	ldr	r3, [pc, #256]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	4013      	ands	r3, r2
 80043c0:	d013      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c2:	f7fc fd8d 	bl	8000ee0 <HAL_GetTick>
 80043c6:	0003      	movs	r3, r0
 80043c8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ca:	e009      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043cc:	f7fc fd88 	bl	8000ee0 <HAL_GetTick>
 80043d0:	0002      	movs	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	4a3c      	ldr	r2, [pc, #240]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d901      	bls.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e067      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e0:	4b35      	ldr	r3, [pc, #212]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	2202      	movs	r2, #2
 80043e6:	4013      	ands	r3, r2
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ea:	4b33      	ldr	r3, [pc, #204]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	4a34      	ldr	r2, [pc, #208]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80043f0:	4013      	ands	r3, r2
 80043f2:	0019      	movs	r1, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	4b2f      	ldr	r3, [pc, #188]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043fa:	430a      	orrs	r2, r1
 80043fc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80043fe:	2317      	movs	r3, #23
 8004400:	18fb      	adds	r3, r7, r3
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d105      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004408:	4b2b      	ldr	r3, [pc, #172]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800440a:	69da      	ldr	r2, [r3, #28]
 800440c:	4b2a      	ldr	r3, [pc, #168]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800440e:	492f      	ldr	r1, [pc, #188]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004410:	400a      	ands	r2, r1
 8004412:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2201      	movs	r2, #1
 800441a:	4013      	ands	r3, r2
 800441c:	d009      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800441e:	4b26      	ldr	r3, [pc, #152]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	2203      	movs	r2, #3
 8004424:	4393      	bics	r3, r2
 8004426:	0019      	movs	r1, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	4b22      	ldr	r3, [pc, #136]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800442e:	430a      	orrs	r2, r1
 8004430:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2202      	movs	r2, #2
 8004438:	4013      	ands	r3, r2
 800443a:	d009      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800443c:	4b1e      	ldr	r3, [pc, #120]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	4a23      	ldr	r2, [pc, #140]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004442:	4013      	ands	r3, r2
 8004444:	0019      	movs	r1, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800444c:	430a      	orrs	r2, r1
 800444e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2220      	movs	r2, #32
 8004456:	4013      	ands	r3, r2
 8004458:	d009      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800445a:	4b17      	ldr	r3, [pc, #92]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	2210      	movs	r2, #16
 8004460:	4393      	bics	r3, r2
 8004462:	0019      	movs	r1, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800446a:	430a      	orrs	r2, r1
 800446c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	2380      	movs	r3, #128	; 0x80
 8004474:	029b      	lsls	r3, r3, #10
 8004476:	4013      	ands	r3, r2
 8004478:	d009      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800447a:	4b0f      	ldr	r3, [pc, #60]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	2280      	movs	r2, #128	; 0x80
 8004480:	4393      	bics	r3, r2
 8004482:	0019      	movs	r1, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699a      	ldr	r2, [r3, #24]
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800448a:	430a      	orrs	r2, r1
 800448c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	2380      	movs	r3, #128	; 0x80
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	4013      	ands	r3, r2
 8004498:	d009      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800449a:	4b07      	ldr	r3, [pc, #28]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	2240      	movs	r2, #64	; 0x40
 80044a0:	4393      	bics	r3, r2
 80044a2:	0019      	movs	r1, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	695a      	ldr	r2, [r3, #20]
 80044a8:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044aa:	430a      	orrs	r2, r1
 80044ac:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	0018      	movs	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b006      	add	sp, #24
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40021000 	.word	0x40021000
 80044bc:	40007000 	.word	0x40007000
 80044c0:	fffffcff 	.word	0xfffffcff
 80044c4:	fffeffff 	.word	0xfffeffff
 80044c8:	00001388 	.word	0x00001388
 80044cc:	efffffff 	.word	0xefffffff
 80044d0:	fffcffff 	.word	0xfffcffff

080044d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e0a8      	b.n	8004638 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	2382      	movs	r3, #130	; 0x82
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d009      	beq.n	800450e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	61da      	str	r2, [r3, #28]
 8004500:	e005      	b.n	800450e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	225d      	movs	r2, #93	; 0x5d
 8004518:	5c9b      	ldrb	r3, [r3, r2]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d107      	bne.n	8004530 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	225c      	movs	r2, #92	; 0x5c
 8004524:	2100      	movs	r1, #0
 8004526:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	0018      	movs	r0, r3
 800452c:	f7fc f9ea 	bl	8000904 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	225d      	movs	r2, #93	; 0x5d
 8004534:	2102      	movs	r1, #2
 8004536:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2140      	movs	r1, #64	; 0x40
 8004544:	438a      	bics	r2, r1
 8004546:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	23e0      	movs	r3, #224	; 0xe0
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	429a      	cmp	r2, r3
 8004552:	d902      	bls.n	800455a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	e002      	b.n	8004560 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800455a:	2380      	movs	r3, #128	; 0x80
 800455c:	015b      	lsls	r3, r3, #5
 800455e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	23f0      	movs	r3, #240	; 0xf0
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	429a      	cmp	r2, r3
 800456a:	d008      	beq.n	800457e <HAL_SPI_Init+0xaa>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	23e0      	movs	r3, #224	; 0xe0
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	429a      	cmp	r2, r3
 8004576:	d002      	beq.n	800457e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	2382      	movs	r3, #130	; 0x82
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	401a      	ands	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6899      	ldr	r1, [r3, #8]
 800458c:	2384      	movs	r3, #132	; 0x84
 800458e:	021b      	lsls	r3, r3, #8
 8004590:	400b      	ands	r3, r1
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	2102      	movs	r1, #2
 800459a:	400b      	ands	r3, r1
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	2101      	movs	r1, #1
 80045a4:	400b      	ands	r3, r1
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6999      	ldr	r1, [r3, #24]
 80045ac:	2380      	movs	r3, #128	; 0x80
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	400b      	ands	r3, r1
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	2138      	movs	r1, #56	; 0x38
 80045ba:	400b      	ands	r3, r1
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	2180      	movs	r1, #128	; 0x80
 80045c4:	400b      	ands	r3, r1
 80045c6:	431a      	orrs	r2, r3
 80045c8:	0011      	movs	r1, r2
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ce:	2380      	movs	r3, #128	; 0x80
 80045d0:	019b      	lsls	r3, r3, #6
 80045d2:	401a      	ands	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	0c1b      	lsrs	r3, r3, #16
 80045e2:	2204      	movs	r2, #4
 80045e4:	401a      	ands	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	2110      	movs	r1, #16
 80045ec:	400b      	ands	r3, r1
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f4:	2108      	movs	r1, #8
 80045f6:	400b      	ands	r3, r1
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68d9      	ldr	r1, [r3, #12]
 80045fe:	23f0      	movs	r3, #240	; 0xf0
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	400b      	ands	r3, r1
 8004604:	431a      	orrs	r2, r3
 8004606:	0011      	movs	r1, r2
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	2380      	movs	r3, #128	; 0x80
 800460c:	015b      	lsls	r3, r3, #5
 800460e:	401a      	ands	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69da      	ldr	r2, [r3, #28]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4907      	ldr	r1, [pc, #28]	; (8004640 <HAL_SPI_Init+0x16c>)
 8004624:	400a      	ands	r2, r1
 8004626:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	225d      	movs	r2, #93	; 0x5d
 8004632:	2101      	movs	r1, #1
 8004634:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	0018      	movs	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	b004      	add	sp, #16
 800463e:	bd80      	pop	{r7, pc}
 8004640:	fffff7ff 	.word	0xfffff7ff

08004644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e042      	b.n	80046dc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	223d      	movs	r2, #61	; 0x3d
 800465a:	5c9b      	ldrb	r3, [r3, r2]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d107      	bne.n	8004672 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	223c      	movs	r2, #60	; 0x3c
 8004666:	2100      	movs	r1, #0
 8004668:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	0018      	movs	r0, r3
 800466e:	f7fc f997 	bl	80009a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	223d      	movs	r2, #61	; 0x3d
 8004676:	2102      	movs	r1, #2
 8004678:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3304      	adds	r3, #4
 8004682:	0019      	movs	r1, r3
 8004684:	0010      	movs	r0, r2
 8004686:	f000 f9b5 	bl	80049f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2246      	movs	r2, #70	; 0x46
 800468e:	2101      	movs	r1, #1
 8004690:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	223e      	movs	r2, #62	; 0x3e
 8004696:	2101      	movs	r1, #1
 8004698:	5499      	strb	r1, [r3, r2]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	223f      	movs	r2, #63	; 0x3f
 800469e:	2101      	movs	r1, #1
 80046a0:	5499      	strb	r1, [r3, r2]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2240      	movs	r2, #64	; 0x40
 80046a6:	2101      	movs	r1, #1
 80046a8:	5499      	strb	r1, [r3, r2]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2241      	movs	r2, #65	; 0x41
 80046ae:	2101      	movs	r1, #1
 80046b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2242      	movs	r2, #66	; 0x42
 80046b6:	2101      	movs	r1, #1
 80046b8:	5499      	strb	r1, [r3, r2]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2243      	movs	r2, #67	; 0x43
 80046be:	2101      	movs	r1, #1
 80046c0:	5499      	strb	r1, [r3, r2]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2244      	movs	r2, #68	; 0x44
 80046c6:	2101      	movs	r1, #1
 80046c8:	5499      	strb	r1, [r3, r2]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2245      	movs	r2, #69	; 0x45
 80046ce:	2101      	movs	r1, #1
 80046d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	223d      	movs	r2, #61	; 0x3d
 80046d6:	2101      	movs	r1, #1
 80046d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	0018      	movs	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	b002      	add	sp, #8
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	223d      	movs	r2, #61	; 0x3d
 80046f0:	5c9b      	ldrb	r3, [r3, r2]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d001      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e03b      	b.n	8004774 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	223d      	movs	r2, #61	; 0x3d
 8004700:	2102      	movs	r1, #2
 8004702:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2101      	movs	r1, #1
 8004710:	430a      	orrs	r2, r1
 8004712:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a18      	ldr	r2, [pc, #96]	; (800477c <HAL_TIM_Base_Start_IT+0x98>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00f      	beq.n	800473e <HAL_TIM_Base_Start_IT+0x5a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	2380      	movs	r3, #128	; 0x80
 8004724:	05db      	lsls	r3, r3, #23
 8004726:	429a      	cmp	r2, r3
 8004728:	d009      	beq.n	800473e <HAL_TIM_Base_Start_IT+0x5a>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a14      	ldr	r2, [pc, #80]	; (8004780 <HAL_TIM_Base_Start_IT+0x9c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d004      	beq.n	800473e <HAL_TIM_Base_Start_IT+0x5a>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a12      	ldr	r2, [pc, #72]	; (8004784 <HAL_TIM_Base_Start_IT+0xa0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d111      	bne.n	8004762 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2207      	movs	r2, #7
 8004746:	4013      	ands	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b06      	cmp	r3, #6
 800474e:	d010      	beq.n	8004772 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2101      	movs	r1, #1
 800475c:	430a      	orrs	r2, r1
 800475e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004760:	e007      	b.n	8004772 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2101      	movs	r1, #1
 800476e:	430a      	orrs	r2, r1
 8004770:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	0018      	movs	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	b004      	add	sp, #16
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40012c00 	.word	0x40012c00
 8004780:	40000400 	.word	0x40000400
 8004784:	40014000 	.word	0x40014000

08004788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2202      	movs	r2, #2
 8004798:	4013      	ands	r3, r2
 800479a:	2b02      	cmp	r3, #2
 800479c:	d124      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	2202      	movs	r2, #2
 80047a6:	4013      	ands	r3, r2
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d11d      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2203      	movs	r2, #3
 80047b2:	4252      	negs	r2, r2
 80047b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	2203      	movs	r2, #3
 80047c4:	4013      	ands	r3, r2
 80047c6:	d004      	beq.n	80047d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	0018      	movs	r0, r3
 80047cc:	f000 f8fa 	bl	80049c4 <HAL_TIM_IC_CaptureCallback>
 80047d0:	e007      	b.n	80047e2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	0018      	movs	r0, r3
 80047d6:	f000 f8ed 	bl	80049b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	0018      	movs	r0, r3
 80047de:	f000 f8f9 	bl	80049d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2204      	movs	r2, #4
 80047f0:	4013      	ands	r3, r2
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d125      	bne.n	8004842 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	2204      	movs	r2, #4
 80047fe:	4013      	ands	r3, r2
 8004800:	2b04      	cmp	r3, #4
 8004802:	d11e      	bne.n	8004842 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2205      	movs	r2, #5
 800480a:	4252      	negs	r2, r2
 800480c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2202      	movs	r2, #2
 8004812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	23c0      	movs	r3, #192	; 0xc0
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4013      	ands	r3, r2
 8004820:	d004      	beq.n	800482c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	0018      	movs	r0, r3
 8004826:	f000 f8cd 	bl	80049c4 <HAL_TIM_IC_CaptureCallback>
 800482a:	e007      	b.n	800483c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	0018      	movs	r0, r3
 8004830:	f000 f8c0 	bl	80049b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	0018      	movs	r0, r3
 8004838:	f000 f8cc 	bl	80049d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	2208      	movs	r2, #8
 800484a:	4013      	ands	r3, r2
 800484c:	2b08      	cmp	r3, #8
 800484e:	d124      	bne.n	800489a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	2208      	movs	r2, #8
 8004858:	4013      	ands	r3, r2
 800485a:	2b08      	cmp	r3, #8
 800485c:	d11d      	bne.n	800489a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2209      	movs	r2, #9
 8004864:	4252      	negs	r2, r2
 8004866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2204      	movs	r2, #4
 800486c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	2203      	movs	r2, #3
 8004876:	4013      	ands	r3, r2
 8004878:	d004      	beq.n	8004884 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	0018      	movs	r0, r3
 800487e:	f000 f8a1 	bl	80049c4 <HAL_TIM_IC_CaptureCallback>
 8004882:	e007      	b.n	8004894 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	0018      	movs	r0, r3
 8004888:	f000 f894 	bl	80049b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	0018      	movs	r0, r3
 8004890:	f000 f8a0 	bl	80049d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	2210      	movs	r2, #16
 80048a2:	4013      	ands	r3, r2
 80048a4:	2b10      	cmp	r3, #16
 80048a6:	d125      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	2210      	movs	r2, #16
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b10      	cmp	r3, #16
 80048b4:	d11e      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2211      	movs	r2, #17
 80048bc:	4252      	negs	r2, r2
 80048be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2208      	movs	r2, #8
 80048c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69da      	ldr	r2, [r3, #28]
 80048cc:	23c0      	movs	r3, #192	; 0xc0
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4013      	ands	r3, r2
 80048d2:	d004      	beq.n	80048de <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	0018      	movs	r0, r3
 80048d8:	f000 f874 	bl	80049c4 <HAL_TIM_IC_CaptureCallback>
 80048dc:	e007      	b.n	80048ee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	0018      	movs	r0, r3
 80048e2:	f000 f867 	bl	80049b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	0018      	movs	r0, r3
 80048ea:	f000 f873 	bl	80049d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	2201      	movs	r2, #1
 80048fc:	4013      	ands	r3, r2
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d10f      	bne.n	8004922 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	4013      	ands	r3, r2
 800490c:	2b01      	cmp	r3, #1
 800490e:	d108      	bne.n	8004922 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2202      	movs	r2, #2
 8004916:	4252      	negs	r2, r2
 8004918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	0018      	movs	r0, r3
 800491e:	f7fb ff07 	bl	8000730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	2280      	movs	r2, #128	; 0x80
 800492a:	4013      	ands	r3, r2
 800492c:	2b80      	cmp	r3, #128	; 0x80
 800492e:	d10f      	bne.n	8004950 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	2280      	movs	r2, #128	; 0x80
 8004938:	4013      	ands	r3, r2
 800493a:	2b80      	cmp	r3, #128	; 0x80
 800493c:	d108      	bne.n	8004950 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2281      	movs	r2, #129	; 0x81
 8004944:	4252      	negs	r2, r2
 8004946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	0018      	movs	r0, r3
 800494c:	f000 f8da 	bl	8004b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2240      	movs	r2, #64	; 0x40
 8004958:	4013      	ands	r3, r2
 800495a:	2b40      	cmp	r3, #64	; 0x40
 800495c:	d10f      	bne.n	800497e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	2240      	movs	r2, #64	; 0x40
 8004966:	4013      	ands	r3, r2
 8004968:	2b40      	cmp	r3, #64	; 0x40
 800496a:	d108      	bne.n	800497e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2241      	movs	r2, #65	; 0x41
 8004972:	4252      	negs	r2, r2
 8004974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	0018      	movs	r0, r3
 800497a:	f000 f833 	bl	80049e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	2220      	movs	r2, #32
 8004986:	4013      	ands	r3, r2
 8004988:	2b20      	cmp	r3, #32
 800498a:	d10f      	bne.n	80049ac <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	2220      	movs	r2, #32
 8004994:	4013      	ands	r3, r2
 8004996:	2b20      	cmp	r3, #32
 8004998:	d108      	bne.n	80049ac <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2221      	movs	r2, #33	; 0x21
 80049a0:	4252      	negs	r2, r2
 80049a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	0018      	movs	r0, r3
 80049a8:	f000 f8a4 	bl	8004af4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049ac:	46c0      	nop			; (mov r8, r8)
 80049ae:	46bd      	mov	sp, r7
 80049b0:	b002      	add	sp, #8
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049bc:	46c0      	nop			; (mov r8, r8)
 80049be:	46bd      	mov	sp, r7
 80049c0:	b002      	add	sp, #8
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049cc:	46c0      	nop			; (mov r8, r8)
 80049ce:	46bd      	mov	sp, r7
 80049d0:	b002      	add	sp, #8
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049dc:	46c0      	nop			; (mov r8, r8)
 80049de:	46bd      	mov	sp, r7
 80049e0:	b002      	add	sp, #8
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049ec:	46c0      	nop			; (mov r8, r8)
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b002      	add	sp, #8
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a34      	ldr	r2, [pc, #208]	; (8004ad8 <TIM_Base_SetConfig+0xe4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d008      	beq.n	8004a1e <TIM_Base_SetConfig+0x2a>
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	2380      	movs	r3, #128	; 0x80
 8004a10:	05db      	lsls	r3, r3, #23
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d003      	beq.n	8004a1e <TIM_Base_SetConfig+0x2a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a30      	ldr	r2, [pc, #192]	; (8004adc <TIM_Base_SetConfig+0xe8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d108      	bne.n	8004a30 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2270      	movs	r2, #112	; 0x70
 8004a22:	4393      	bics	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a29      	ldr	r2, [pc, #164]	; (8004ad8 <TIM_Base_SetConfig+0xe4>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d018      	beq.n	8004a6a <TIM_Base_SetConfig+0x76>
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	2380      	movs	r3, #128	; 0x80
 8004a3c:	05db      	lsls	r3, r3, #23
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d013      	beq.n	8004a6a <TIM_Base_SetConfig+0x76>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a25      	ldr	r2, [pc, #148]	; (8004adc <TIM_Base_SetConfig+0xe8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00f      	beq.n	8004a6a <TIM_Base_SetConfig+0x76>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a24      	ldr	r2, [pc, #144]	; (8004ae0 <TIM_Base_SetConfig+0xec>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00b      	beq.n	8004a6a <TIM_Base_SetConfig+0x76>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a23      	ldr	r2, [pc, #140]	; (8004ae4 <TIM_Base_SetConfig+0xf0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d007      	beq.n	8004a6a <TIM_Base_SetConfig+0x76>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a22      	ldr	r2, [pc, #136]	; (8004ae8 <TIM_Base_SetConfig+0xf4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d003      	beq.n	8004a6a <TIM_Base_SetConfig+0x76>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a21      	ldr	r2, [pc, #132]	; (8004aec <TIM_Base_SetConfig+0xf8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d108      	bne.n	8004a7c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4a20      	ldr	r2, [pc, #128]	; (8004af0 <TIM_Base_SetConfig+0xfc>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2280      	movs	r2, #128	; 0x80
 8004a80:	4393      	bics	r3, r2
 8004a82:	001a      	movs	r2, r3
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a0c      	ldr	r2, [pc, #48]	; (8004ad8 <TIM_Base_SetConfig+0xe4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00b      	beq.n	8004ac2 <TIM_Base_SetConfig+0xce>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a0d      	ldr	r2, [pc, #52]	; (8004ae4 <TIM_Base_SetConfig+0xf0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d007      	beq.n	8004ac2 <TIM_Base_SetConfig+0xce>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a0c      	ldr	r2, [pc, #48]	; (8004ae8 <TIM_Base_SetConfig+0xf4>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d003      	beq.n	8004ac2 <TIM_Base_SetConfig+0xce>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a0b      	ldr	r2, [pc, #44]	; (8004aec <TIM_Base_SetConfig+0xf8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d103      	bne.n	8004aca <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	691a      	ldr	r2, [r3, #16]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	615a      	str	r2, [r3, #20]
}
 8004ad0:	46c0      	nop			; (mov r8, r8)
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b004      	add	sp, #16
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40012c00 	.word	0x40012c00
 8004adc:	40000400 	.word	0x40000400
 8004ae0:	40002000 	.word	0x40002000
 8004ae4:	40014000 	.word	0x40014000
 8004ae8:	40014400 	.word	0x40014400
 8004aec:	40014800 	.word	0x40014800
 8004af0:	fffffcff 	.word	0xfffffcff

08004af4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004afc:	46c0      	nop			; (mov r8, r8)
 8004afe:	46bd      	mov	sp, r7
 8004b00:	b002      	add	sp, #8
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b0c:	46c0      	nop			; (mov r8, r8)
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	b002      	add	sp, #8
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8004b14:	b590      	push	{r4, r7, lr}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e074      	b.n	8004c10 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	223c      	movs	r2, #60	; 0x3c
 8004b2a:	5c9b      	ldrb	r3, [r3, r2]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d107      	bne.n	8004b42 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	223d      	movs	r2, #61	; 0x3d
 8004b36:	2100      	movs	r1, #0
 8004b38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f7fb ff57 	bl	80009f0 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	223c      	movs	r2, #60	; 0x3c
 8004b46:	2102      	movs	r1, #2
 8004b48:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6819      	ldr	r1, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8004b60:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8004b68:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8004b6e:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8004b74:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8004b7a:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8004b80:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8004b86:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	7b1b      	ldrb	r3, [r3, #12]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d108      	bne.n	8004baa <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2180      	movs	r1, #128	; 0x80
 8004ba4:	0249      	lsls	r1, r1, #9
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	43d2      	mvns	r2, r2
 8004bc0:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bda:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681c      	ldr	r4, [r3, #0]
 8004be4:	0010      	movs	r0, r2
 8004be6:	f000 f817 	bl	8004c18 <TSC_extract_groups>
 8004bea:	0003      	movs	r3, r0
 8004bec:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2103      	movs	r1, #3
 8004bfa:	438a      	bics	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2203      	movs	r2, #3
 8004c04:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	223c      	movs	r2, #60	; 0x3c
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	0018      	movs	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b003      	add	sp, #12
 8004c16:	bd90      	pop	{r4, r7, pc}

08004c18 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8004c24:	2300      	movs	r3, #0
 8004c26:	60bb      	str	r3, [r7, #8]
 8004c28:	e011      	b.n	8004c4e <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	220f      	movs	r2, #15
 8004c30:	409a      	lsls	r2, r3
 8004c32:	0013      	movs	r3, r2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	4013      	ands	r3, r2
 8004c38:	d006      	beq.n	8004c48 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	0013      	movs	r3, r2
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2b07      	cmp	r3, #7
 8004c52:	d9ea      	bls.n	8004c2a <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8004c54:	68fb      	ldr	r3, [r7, #12]
}
 8004c56:	0018      	movs	r0, r3
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	b004      	add	sp, #16
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e044      	b.n	8004cfc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d107      	bne.n	8004c8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2278      	movs	r2, #120	; 0x78
 8004c7e:	2100      	movs	r1, #0
 8004c80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	0018      	movs	r0, r3
 8004c86:	f7fb ff51 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2224      	movs	r2, #36	; 0x24
 8004c8e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	438a      	bics	r2, r1
 8004c9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f000 fb30 	bl	8005308 <UART_SetConfig>
 8004ca8:	0003      	movs	r3, r0
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e024      	b.n	8004cfc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f000 fcab 	bl	8005618 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	490d      	ldr	r1, [pc, #52]	; (8004d04 <HAL_UART_Init+0xa4>)
 8004cce:	400a      	ands	r2, r1
 8004cd0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	212a      	movs	r1, #42	; 0x2a
 8004cde:	438a      	bics	r2, r1
 8004ce0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2101      	movs	r1, #1
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f000 fd43 	bl	8005780 <UART_CheckIdleState>
 8004cfa:	0003      	movs	r3, r0
}
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b002      	add	sp, #8
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	ffffb7ff 	.word	0xffffb7ff

08004d08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d08:	b590      	push	{r4, r7, lr}
 8004d0a:	b0ab      	sub	sp, #172	; 0xac
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	22a4      	movs	r2, #164	; 0xa4
 8004d18:	18b9      	adds	r1, r7, r2
 8004d1a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	20a0      	movs	r0, #160	; 0xa0
 8004d24:	1839      	adds	r1, r7, r0
 8004d26:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	219c      	movs	r1, #156	; 0x9c
 8004d30:	1879      	adds	r1, r7, r1
 8004d32:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d34:	0011      	movs	r1, r2
 8004d36:	18bb      	adds	r3, r7, r2
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a99      	ldr	r2, [pc, #612]	; (8004fa0 <HAL_UART_IRQHandler+0x298>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2298      	movs	r2, #152	; 0x98
 8004d40:	18bc      	adds	r4, r7, r2
 8004d42:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004d44:	18bb      	adds	r3, r7, r2
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d114      	bne.n	8004d76 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d4c:	187b      	adds	r3, r7, r1
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2220      	movs	r2, #32
 8004d52:	4013      	ands	r3, r2
 8004d54:	d00f      	beq.n	8004d76 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d56:	183b      	adds	r3, r7, r0
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	d00a      	beq.n	8004d76 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d100      	bne.n	8004d6a <HAL_UART_IRQHandler+0x62>
 8004d68:	e29e      	b.n	80052a8 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	0010      	movs	r0, r2
 8004d72:	4798      	blx	r3
      }
      return;
 8004d74:	e298      	b.n	80052a8 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d76:	2398      	movs	r3, #152	; 0x98
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d100      	bne.n	8004d82 <HAL_UART_IRQHandler+0x7a>
 8004d80:	e114      	b.n	8004fac <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d82:	239c      	movs	r3, #156	; 0x9c
 8004d84:	18fb      	adds	r3, r7, r3
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	d106      	bne.n	8004d9c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004d8e:	23a0      	movs	r3, #160	; 0xa0
 8004d90:	18fb      	adds	r3, r7, r3
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a83      	ldr	r2, [pc, #524]	; (8004fa4 <HAL_UART_IRQHandler+0x29c>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	d100      	bne.n	8004d9c <HAL_UART_IRQHandler+0x94>
 8004d9a:	e107      	b.n	8004fac <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d9c:	23a4      	movs	r3, #164	; 0xa4
 8004d9e:	18fb      	adds	r3, r7, r3
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2201      	movs	r2, #1
 8004da4:	4013      	ands	r3, r2
 8004da6:	d012      	beq.n	8004dce <HAL_UART_IRQHandler+0xc6>
 8004da8:	23a0      	movs	r3, #160	; 0xa0
 8004daa:	18fb      	adds	r3, r7, r3
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	2380      	movs	r3, #128	; 0x80
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	4013      	ands	r3, r2
 8004db4:	d00b      	beq.n	8004dce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2284      	movs	r2, #132	; 0x84
 8004dc2:	589b      	ldr	r3, [r3, r2]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2184      	movs	r1, #132	; 0x84
 8004dcc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dce:	23a4      	movs	r3, #164	; 0xa4
 8004dd0:	18fb      	adds	r3, r7, r3
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d011      	beq.n	8004dfe <HAL_UART_IRQHandler+0xf6>
 8004dda:	239c      	movs	r3, #156	; 0x9c
 8004ddc:	18fb      	adds	r3, r7, r3
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2201      	movs	r2, #1
 8004de2:	4013      	ands	r3, r2
 8004de4:	d00b      	beq.n	8004dfe <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2202      	movs	r2, #2
 8004dec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2284      	movs	r2, #132	; 0x84
 8004df2:	589b      	ldr	r3, [r3, r2]
 8004df4:	2204      	movs	r2, #4
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2184      	movs	r1, #132	; 0x84
 8004dfc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dfe:	23a4      	movs	r3, #164	; 0xa4
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2204      	movs	r2, #4
 8004e06:	4013      	ands	r3, r2
 8004e08:	d011      	beq.n	8004e2e <HAL_UART_IRQHandler+0x126>
 8004e0a:	239c      	movs	r3, #156	; 0x9c
 8004e0c:	18fb      	adds	r3, r7, r3
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2201      	movs	r2, #1
 8004e12:	4013      	ands	r3, r2
 8004e14:	d00b      	beq.n	8004e2e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2204      	movs	r2, #4
 8004e1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2284      	movs	r2, #132	; 0x84
 8004e22:	589b      	ldr	r3, [r3, r2]
 8004e24:	2202      	movs	r2, #2
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2184      	movs	r1, #132	; 0x84
 8004e2c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e2e:	23a4      	movs	r3, #164	; 0xa4
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2208      	movs	r2, #8
 8004e36:	4013      	ands	r3, r2
 8004e38:	d017      	beq.n	8004e6a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e3a:	23a0      	movs	r3, #160	; 0xa0
 8004e3c:	18fb      	adds	r3, r7, r3
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2220      	movs	r2, #32
 8004e42:	4013      	ands	r3, r2
 8004e44:	d105      	bne.n	8004e52 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e46:	239c      	movs	r3, #156	; 0x9c
 8004e48:	18fb      	adds	r3, r7, r3
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e50:	d00b      	beq.n	8004e6a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2208      	movs	r2, #8
 8004e58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2284      	movs	r2, #132	; 0x84
 8004e5e:	589b      	ldr	r3, [r3, r2]
 8004e60:	2208      	movs	r2, #8
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2184      	movs	r1, #132	; 0x84
 8004e68:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e6a:	23a4      	movs	r3, #164	; 0xa4
 8004e6c:	18fb      	adds	r3, r7, r3
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	2380      	movs	r3, #128	; 0x80
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	4013      	ands	r3, r2
 8004e76:	d013      	beq.n	8004ea0 <HAL_UART_IRQHandler+0x198>
 8004e78:	23a0      	movs	r3, #160	; 0xa0
 8004e7a:	18fb      	adds	r3, r7, r3
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	2380      	movs	r3, #128	; 0x80
 8004e80:	04db      	lsls	r3, r3, #19
 8004e82:	4013      	ands	r3, r2
 8004e84:	d00c      	beq.n	8004ea0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2280      	movs	r2, #128	; 0x80
 8004e8c:	0112      	lsls	r2, r2, #4
 8004e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2284      	movs	r2, #132	; 0x84
 8004e94:	589b      	ldr	r3, [r3, r2]
 8004e96:	2220      	movs	r2, #32
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2184      	movs	r1, #132	; 0x84
 8004e9e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2284      	movs	r2, #132	; 0x84
 8004ea4:	589b      	ldr	r3, [r3, r2]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d100      	bne.n	8004eac <HAL_UART_IRQHandler+0x1a4>
 8004eaa:	e1ff      	b.n	80052ac <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004eac:	23a4      	movs	r3, #164	; 0xa4
 8004eae:	18fb      	adds	r3, r7, r3
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	d00e      	beq.n	8004ed6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004eb8:	23a0      	movs	r3, #160	; 0xa0
 8004eba:	18fb      	adds	r3, r7, r3
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	d008      	beq.n	8004ed6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d004      	beq.n	8004ed6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	0010      	movs	r0, r2
 8004ed4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2284      	movs	r2, #132	; 0x84
 8004eda:	589b      	ldr	r3, [r3, r2]
 8004edc:	2194      	movs	r1, #148	; 0x94
 8004ede:	187a      	adds	r2, r7, r1
 8004ee0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2240      	movs	r2, #64	; 0x40
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b40      	cmp	r3, #64	; 0x40
 8004eee:	d004      	beq.n	8004efa <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ef0:	187b      	adds	r3, r7, r1
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2228      	movs	r2, #40	; 0x28
 8004ef6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ef8:	d047      	beq.n	8004f8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	0018      	movs	r0, r3
 8004efe:	f000 fe15 	bl	8005b2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	2240      	movs	r2, #64	; 0x40
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d137      	bne.n	8004f80 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f10:	f3ef 8310 	mrs	r3, PRIMASK
 8004f14:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004f16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f18:	2090      	movs	r0, #144	; 0x90
 8004f1a:	183a      	adds	r2, r7, r0
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	2301      	movs	r3, #1
 8004f20:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f24:	f383 8810 	msr	PRIMASK, r3
}
 8004f28:	46c0      	nop			; (mov r8, r8)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2140      	movs	r1, #64	; 0x40
 8004f36:	438a      	bics	r2, r1
 8004f38:	609a      	str	r2, [r3, #8]
 8004f3a:	183b      	adds	r3, r7, r0
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f42:	f383 8810 	msr	PRIMASK, r3
}
 8004f46:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d012      	beq.n	8004f76 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f54:	4a14      	ldr	r2, [pc, #80]	; (8004fa8 <HAL_UART_IRQHandler+0x2a0>)
 8004f56:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	f7fc fc77 	bl	8001850 <HAL_DMA_Abort_IT>
 8004f62:	1e03      	subs	r3, r0, #0
 8004f64:	d01a      	beq.n	8004f9c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f70:	0018      	movs	r0, r3
 8004f72:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f74:	e012      	b.n	8004f9c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f000 f9bd 	bl	80052f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7e:	e00d      	b.n	8004f9c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	0018      	movs	r0, r3
 8004f84:	f000 f9b8 	bl	80052f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f88:	e008      	b.n	8004f9c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	f000 f9b3 	bl	80052f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2284      	movs	r2, #132	; 0x84
 8004f96:	2100      	movs	r1, #0
 8004f98:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004f9a:	e187      	b.n	80052ac <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f9c:	46c0      	nop			; (mov r8, r8)
    return;
 8004f9e:	e185      	b.n	80052ac <HAL_UART_IRQHandler+0x5a4>
 8004fa0:	0000080f 	.word	0x0000080f
 8004fa4:	04000120 	.word	0x04000120
 8004fa8:	08005de7 	.word	0x08005de7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d000      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x2ae>
 8004fb4:	e139      	b.n	800522a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004fb6:	23a4      	movs	r3, #164	; 0xa4
 8004fb8:	18fb      	adds	r3, r7, r3
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2210      	movs	r2, #16
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d100      	bne.n	8004fc4 <HAL_UART_IRQHandler+0x2bc>
 8004fc2:	e132      	b.n	800522a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004fc4:	23a0      	movs	r3, #160	; 0xa0
 8004fc6:	18fb      	adds	r3, r7, r3
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2210      	movs	r2, #16
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d100      	bne.n	8004fd2 <HAL_UART_IRQHandler+0x2ca>
 8004fd0:	e12b      	b.n	800522a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2210      	movs	r2, #16
 8004fd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2240      	movs	r2, #64	; 0x40
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b40      	cmp	r3, #64	; 0x40
 8004fe6:	d000      	beq.n	8004fea <HAL_UART_IRQHandler+0x2e2>
 8004fe8:	e09f      	b.n	800512a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	217e      	movs	r1, #126	; 0x7e
 8004ff4:	187b      	adds	r3, r7, r1
 8004ff6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004ff8:	187b      	adds	r3, r7, r1
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d100      	bne.n	8005002 <HAL_UART_IRQHandler+0x2fa>
 8005000:	e156      	b.n	80052b0 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2258      	movs	r2, #88	; 0x58
 8005006:	5a9b      	ldrh	r3, [r3, r2]
 8005008:	187a      	adds	r2, r7, r1
 800500a:	8812      	ldrh	r2, [r2, #0]
 800500c:	429a      	cmp	r2, r3
 800500e:	d300      	bcc.n	8005012 <HAL_UART_IRQHandler+0x30a>
 8005010:	e14e      	b.n	80052b0 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	187a      	adds	r2, r7, r1
 8005016:	215a      	movs	r1, #90	; 0x5a
 8005018:	8812      	ldrh	r2, [r2, #0]
 800501a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	2b20      	cmp	r3, #32
 8005024:	d06f      	beq.n	8005106 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005026:	f3ef 8310 	mrs	r3, PRIMASK
 800502a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800502e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005030:	2301      	movs	r3, #1
 8005032:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005036:	f383 8810 	msr	PRIMASK, r3
}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	499e      	ldr	r1, [pc, #632]	; (80052c0 <HAL_UART_IRQHandler+0x5b8>)
 8005048:	400a      	ands	r2, r1
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800504e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005052:	f383 8810 	msr	PRIMASK, r3
}
 8005056:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005058:	f3ef 8310 	mrs	r3, PRIMASK
 800505c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800505e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005060:	677b      	str	r3, [r7, #116]	; 0x74
 8005062:	2301      	movs	r3, #1
 8005064:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005068:	f383 8810 	msr	PRIMASK, r3
}
 800506c:	46c0      	nop			; (mov r8, r8)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2101      	movs	r1, #1
 800507a:	438a      	bics	r2, r1
 800507c:	609a      	str	r2, [r3, #8]
 800507e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005080:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005084:	f383 8810 	msr	PRIMASK, r3
}
 8005088:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800508a:	f3ef 8310 	mrs	r3, PRIMASK
 800508e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005090:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005092:	673b      	str	r3, [r7, #112]	; 0x70
 8005094:	2301      	movs	r3, #1
 8005096:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800509a:	f383 8810 	msr	PRIMASK, r3
}
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2140      	movs	r1, #64	; 0x40
 80050ac:	438a      	bics	r2, r1
 80050ae:	609a      	str	r2, [r3, #8]
 80050b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050b2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050b6:	f383 8810 	msr	PRIMASK, r3
}
 80050ba:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2280      	movs	r2, #128	; 0x80
 80050c0:	2120      	movs	r1, #32
 80050c2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ca:	f3ef 8310 	mrs	r3, PRIMASK
 80050ce:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80050d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050d4:	2301      	movs	r3, #1
 80050d6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050da:	f383 8810 	msr	PRIMASK, r3
}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2110      	movs	r1, #16
 80050ec:	438a      	bics	r2, r1
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050f6:	f383 8810 	msr	PRIMASK, r3
}
 80050fa:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005100:	0018      	movs	r0, r3
 8005102:	f7fc fb6d 	bl	80017e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2202      	movs	r2, #2
 800510a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2258      	movs	r2, #88	; 0x58
 8005110:	5a9a      	ldrh	r2, [r3, r2]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	215a      	movs	r1, #90	; 0x5a
 8005116:	5a5b      	ldrh	r3, [r3, r1]
 8005118:	b29b      	uxth	r3, r3
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	b29a      	uxth	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	0011      	movs	r1, r2
 8005122:	0018      	movs	r0, r3
 8005124:	f002 f946 	bl	80073b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005128:	e0c2      	b.n	80052b0 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2258      	movs	r2, #88	; 0x58
 800512e:	5a99      	ldrh	r1, [r3, r2]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	225a      	movs	r2, #90	; 0x5a
 8005134:	5a9b      	ldrh	r3, [r3, r2]
 8005136:	b29a      	uxth	r2, r3
 8005138:	208e      	movs	r0, #142	; 0x8e
 800513a:	183b      	adds	r3, r7, r0
 800513c:	1a8a      	subs	r2, r1, r2
 800513e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	225a      	movs	r2, #90	; 0x5a
 8005144:	5a9b      	ldrh	r3, [r3, r2]
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d100      	bne.n	800514e <HAL_UART_IRQHandler+0x446>
 800514c:	e0b2      	b.n	80052b4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800514e:	183b      	adds	r3, r7, r0
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d100      	bne.n	8005158 <HAL_UART_IRQHandler+0x450>
 8005156:	e0ad      	b.n	80052b4 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005158:	f3ef 8310 	mrs	r3, PRIMASK
 800515c:	60fb      	str	r3, [r7, #12]
  return(result);
 800515e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005160:	2488      	movs	r4, #136	; 0x88
 8005162:	193a      	adds	r2, r7, r4
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	2301      	movs	r3, #1
 8005168:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f383 8810 	msr	PRIMASK, r3
}
 8005170:	46c0      	nop			; (mov r8, r8)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4951      	ldr	r1, [pc, #324]	; (80052c4 <HAL_UART_IRQHandler+0x5bc>)
 800517e:	400a      	ands	r2, r1
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	193b      	adds	r3, r7, r4
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f383 8810 	msr	PRIMASK, r3
}
 800518e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005190:	f3ef 8310 	mrs	r3, PRIMASK
 8005194:	61bb      	str	r3, [r7, #24]
  return(result);
 8005196:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005198:	2484      	movs	r4, #132	; 0x84
 800519a:	193a      	adds	r2, r7, r4
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	2301      	movs	r3, #1
 80051a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	f383 8810 	msr	PRIMASK, r3
}
 80051a8:	46c0      	nop			; (mov r8, r8)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2101      	movs	r1, #1
 80051b6:	438a      	bics	r2, r1
 80051b8:	609a      	str	r2, [r3, #8]
 80051ba:	193b      	adds	r3, r7, r4
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	f383 8810 	msr	PRIMASK, r3
}
 80051c6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2280      	movs	r2, #128	; 0x80
 80051cc:	2120      	movs	r1, #32
 80051ce:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051dc:	f3ef 8310 	mrs	r3, PRIMASK
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e4:	2480      	movs	r4, #128	; 0x80
 80051e6:	193a      	adds	r2, r7, r4
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	2301      	movs	r3, #1
 80051ec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	f383 8810 	msr	PRIMASK, r3
}
 80051f4:	46c0      	nop			; (mov r8, r8)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2110      	movs	r1, #16
 8005202:	438a      	bics	r2, r1
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	193b      	adds	r3, r7, r4
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520e:	f383 8810 	msr	PRIMASK, r3
}
 8005212:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800521a:	183b      	adds	r3, r7, r0
 800521c:	881a      	ldrh	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	0011      	movs	r1, r2
 8005222:	0018      	movs	r0, r3
 8005224:	f002 f8c6 	bl	80073b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005228:	e044      	b.n	80052b4 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800522a:	23a4      	movs	r3, #164	; 0xa4
 800522c:	18fb      	adds	r3, r7, r3
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	2380      	movs	r3, #128	; 0x80
 8005232:	035b      	lsls	r3, r3, #13
 8005234:	4013      	ands	r3, r2
 8005236:	d010      	beq.n	800525a <HAL_UART_IRQHandler+0x552>
 8005238:	239c      	movs	r3, #156	; 0x9c
 800523a:	18fb      	adds	r3, r7, r3
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	2380      	movs	r3, #128	; 0x80
 8005240:	03db      	lsls	r3, r3, #15
 8005242:	4013      	ands	r3, r2
 8005244:	d009      	beq.n	800525a <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2280      	movs	r2, #128	; 0x80
 800524c:	0352      	lsls	r2, r2, #13
 800524e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	0018      	movs	r0, r3
 8005254:	f000 fe09 	bl	8005e6a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005258:	e02f      	b.n	80052ba <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800525a:	23a4      	movs	r3, #164	; 0xa4
 800525c:	18fb      	adds	r3, r7, r3
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2280      	movs	r2, #128	; 0x80
 8005262:	4013      	ands	r3, r2
 8005264:	d00f      	beq.n	8005286 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005266:	23a0      	movs	r3, #160	; 0xa0
 8005268:	18fb      	adds	r3, r7, r3
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2280      	movs	r2, #128	; 0x80
 800526e:	4013      	ands	r3, r2
 8005270:	d009      	beq.n	8005286 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d01e      	beq.n	80052b8 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	0010      	movs	r0, r2
 8005282:	4798      	blx	r3
    }
    return;
 8005284:	e018      	b.n	80052b8 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005286:	23a4      	movs	r3, #164	; 0xa4
 8005288:	18fb      	adds	r3, r7, r3
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2240      	movs	r2, #64	; 0x40
 800528e:	4013      	ands	r3, r2
 8005290:	d013      	beq.n	80052ba <HAL_UART_IRQHandler+0x5b2>
 8005292:	23a0      	movs	r3, #160	; 0xa0
 8005294:	18fb      	adds	r3, r7, r3
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2240      	movs	r2, #64	; 0x40
 800529a:	4013      	ands	r3, r2
 800529c:	d00d      	beq.n	80052ba <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	0018      	movs	r0, r3
 80052a2:	f000 fdb7 	bl	8005e14 <UART_EndTransmit_IT>
    return;
 80052a6:	e008      	b.n	80052ba <HAL_UART_IRQHandler+0x5b2>
      return;
 80052a8:	46c0      	nop			; (mov r8, r8)
 80052aa:	e006      	b.n	80052ba <HAL_UART_IRQHandler+0x5b2>
    return;
 80052ac:	46c0      	nop			; (mov r8, r8)
 80052ae:	e004      	b.n	80052ba <HAL_UART_IRQHandler+0x5b2>
      return;
 80052b0:	46c0      	nop			; (mov r8, r8)
 80052b2:	e002      	b.n	80052ba <HAL_UART_IRQHandler+0x5b2>
      return;
 80052b4:	46c0      	nop			; (mov r8, r8)
 80052b6:	e000      	b.n	80052ba <HAL_UART_IRQHandler+0x5b2>
    return;
 80052b8:	46c0      	nop			; (mov r8, r8)
  }

}
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b02b      	add	sp, #172	; 0xac
 80052be:	bd90      	pop	{r4, r7, pc}
 80052c0:	fffffeff 	.word	0xfffffeff
 80052c4:	fffffedf 	.word	0xfffffedf

080052c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052d0:	46c0      	nop			; (mov r8, r8)
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b002      	add	sp, #8
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80052e0:	46c0      	nop			; (mov r8, r8)
 80052e2:	46bd      	mov	sp, r7
 80052e4:	b002      	add	sp, #8
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80052f0:	46c0      	nop			; (mov r8, r8)
 80052f2:	46bd      	mov	sp, r7
 80052f4:	b002      	add	sp, #8
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005300:	46c0      	nop			; (mov r8, r8)
 8005302:	46bd      	mov	sp, r7
 8005304:	b002      	add	sp, #8
 8005306:	bd80      	pop	{r7, pc}

08005308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b088      	sub	sp, #32
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005310:	231e      	movs	r3, #30
 8005312:	18fb      	adds	r3, r7, r3
 8005314:	2200      	movs	r2, #0
 8005316:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4aaf      	ldr	r2, [pc, #700]	; (80055f4 <UART_SetConfig+0x2ec>)
 8005338:	4013      	ands	r3, r2
 800533a:	0019      	movs	r1, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	430a      	orrs	r2, r1
 8005344:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	4aaa      	ldr	r2, [pc, #680]	; (80055f8 <UART_SetConfig+0x2f0>)
 800534e:	4013      	ands	r3, r2
 8005350:	0019      	movs	r1, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	4aa1      	ldr	r2, [pc, #644]	; (80055fc <UART_SetConfig+0x2f4>)
 8005376:	4013      	ands	r3, r2
 8005378:	0019      	movs	r1, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	430a      	orrs	r2, r1
 8005382:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a9d      	ldr	r2, [pc, #628]	; (8005600 <UART_SetConfig+0x2f8>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d127      	bne.n	80053de <UART_SetConfig+0xd6>
 800538e:	4b9d      	ldr	r3, [pc, #628]	; (8005604 <UART_SetConfig+0x2fc>)
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	2203      	movs	r2, #3
 8005394:	4013      	ands	r3, r2
 8005396:	2b03      	cmp	r3, #3
 8005398:	d00d      	beq.n	80053b6 <UART_SetConfig+0xae>
 800539a:	d81b      	bhi.n	80053d4 <UART_SetConfig+0xcc>
 800539c:	2b02      	cmp	r3, #2
 800539e:	d014      	beq.n	80053ca <UART_SetConfig+0xc2>
 80053a0:	d818      	bhi.n	80053d4 <UART_SetConfig+0xcc>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <UART_SetConfig+0xa4>
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d00a      	beq.n	80053c0 <UART_SetConfig+0xb8>
 80053aa:	e013      	b.n	80053d4 <UART_SetConfig+0xcc>
 80053ac:	231f      	movs	r3, #31
 80053ae:	18fb      	adds	r3, r7, r3
 80053b0:	2200      	movs	r2, #0
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	e065      	b.n	8005482 <UART_SetConfig+0x17a>
 80053b6:	231f      	movs	r3, #31
 80053b8:	18fb      	adds	r3, r7, r3
 80053ba:	2202      	movs	r2, #2
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	e060      	b.n	8005482 <UART_SetConfig+0x17a>
 80053c0:	231f      	movs	r3, #31
 80053c2:	18fb      	adds	r3, r7, r3
 80053c4:	2204      	movs	r2, #4
 80053c6:	701a      	strb	r2, [r3, #0]
 80053c8:	e05b      	b.n	8005482 <UART_SetConfig+0x17a>
 80053ca:	231f      	movs	r3, #31
 80053cc:	18fb      	adds	r3, r7, r3
 80053ce:	2208      	movs	r2, #8
 80053d0:	701a      	strb	r2, [r3, #0]
 80053d2:	e056      	b.n	8005482 <UART_SetConfig+0x17a>
 80053d4:	231f      	movs	r3, #31
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	2210      	movs	r2, #16
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	e051      	b.n	8005482 <UART_SetConfig+0x17a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a89      	ldr	r2, [pc, #548]	; (8005608 <UART_SetConfig+0x300>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d134      	bne.n	8005452 <UART_SetConfig+0x14a>
 80053e8:	4b86      	ldr	r3, [pc, #536]	; (8005604 <UART_SetConfig+0x2fc>)
 80053ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ec:	23c0      	movs	r3, #192	; 0xc0
 80053ee:	029b      	lsls	r3, r3, #10
 80053f0:	4013      	ands	r3, r2
 80053f2:	22c0      	movs	r2, #192	; 0xc0
 80053f4:	0292      	lsls	r2, r2, #10
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d017      	beq.n	800542a <UART_SetConfig+0x122>
 80053fa:	22c0      	movs	r2, #192	; 0xc0
 80053fc:	0292      	lsls	r2, r2, #10
 80053fe:	4293      	cmp	r3, r2
 8005400:	d822      	bhi.n	8005448 <UART_SetConfig+0x140>
 8005402:	2280      	movs	r2, #128	; 0x80
 8005404:	0292      	lsls	r2, r2, #10
 8005406:	4293      	cmp	r3, r2
 8005408:	d019      	beq.n	800543e <UART_SetConfig+0x136>
 800540a:	2280      	movs	r2, #128	; 0x80
 800540c:	0292      	lsls	r2, r2, #10
 800540e:	4293      	cmp	r3, r2
 8005410:	d81a      	bhi.n	8005448 <UART_SetConfig+0x140>
 8005412:	2b00      	cmp	r3, #0
 8005414:	d004      	beq.n	8005420 <UART_SetConfig+0x118>
 8005416:	2280      	movs	r2, #128	; 0x80
 8005418:	0252      	lsls	r2, r2, #9
 800541a:	4293      	cmp	r3, r2
 800541c:	d00a      	beq.n	8005434 <UART_SetConfig+0x12c>
 800541e:	e013      	b.n	8005448 <UART_SetConfig+0x140>
 8005420:	231f      	movs	r3, #31
 8005422:	18fb      	adds	r3, r7, r3
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]
 8005428:	e02b      	b.n	8005482 <UART_SetConfig+0x17a>
 800542a:	231f      	movs	r3, #31
 800542c:	18fb      	adds	r3, r7, r3
 800542e:	2202      	movs	r2, #2
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	e026      	b.n	8005482 <UART_SetConfig+0x17a>
 8005434:	231f      	movs	r3, #31
 8005436:	18fb      	adds	r3, r7, r3
 8005438:	2204      	movs	r2, #4
 800543a:	701a      	strb	r2, [r3, #0]
 800543c:	e021      	b.n	8005482 <UART_SetConfig+0x17a>
 800543e:	231f      	movs	r3, #31
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	2208      	movs	r2, #8
 8005444:	701a      	strb	r2, [r3, #0]
 8005446:	e01c      	b.n	8005482 <UART_SetConfig+0x17a>
 8005448:	231f      	movs	r3, #31
 800544a:	18fb      	adds	r3, r7, r3
 800544c:	2210      	movs	r2, #16
 800544e:	701a      	strb	r2, [r3, #0]
 8005450:	e017      	b.n	8005482 <UART_SetConfig+0x17a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a6d      	ldr	r2, [pc, #436]	; (800560c <UART_SetConfig+0x304>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d104      	bne.n	8005466 <UART_SetConfig+0x15e>
 800545c:	231f      	movs	r3, #31
 800545e:	18fb      	adds	r3, r7, r3
 8005460:	2200      	movs	r2, #0
 8005462:	701a      	strb	r2, [r3, #0]
 8005464:	e00d      	b.n	8005482 <UART_SetConfig+0x17a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a69      	ldr	r2, [pc, #420]	; (8005610 <UART_SetConfig+0x308>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d104      	bne.n	800547a <UART_SetConfig+0x172>
 8005470:	231f      	movs	r3, #31
 8005472:	18fb      	adds	r3, r7, r3
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	e003      	b.n	8005482 <UART_SetConfig+0x17a>
 800547a:	231f      	movs	r3, #31
 800547c:	18fb      	adds	r3, r7, r3
 800547e:	2210      	movs	r2, #16
 8005480:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	69da      	ldr	r2, [r3, #28]
 8005486:	2380      	movs	r3, #128	; 0x80
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	429a      	cmp	r2, r3
 800548c:	d15c      	bne.n	8005548 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800548e:	231f      	movs	r3, #31
 8005490:	18fb      	adds	r3, r7, r3
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b08      	cmp	r3, #8
 8005496:	d015      	beq.n	80054c4 <UART_SetConfig+0x1bc>
 8005498:	dc18      	bgt.n	80054cc <UART_SetConfig+0x1c4>
 800549a:	2b04      	cmp	r3, #4
 800549c:	d00d      	beq.n	80054ba <UART_SetConfig+0x1b2>
 800549e:	dc15      	bgt.n	80054cc <UART_SetConfig+0x1c4>
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <UART_SetConfig+0x1a2>
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d005      	beq.n	80054b4 <UART_SetConfig+0x1ac>
 80054a8:	e010      	b.n	80054cc <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054aa:	f7fe fed5 	bl	8004258 <HAL_RCC_GetPCLK1Freq>
 80054ae:	0003      	movs	r3, r0
 80054b0:	61bb      	str	r3, [r7, #24]
        break;
 80054b2:	e012      	b.n	80054da <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054b4:	4b57      	ldr	r3, [pc, #348]	; (8005614 <UART_SetConfig+0x30c>)
 80054b6:	61bb      	str	r3, [r7, #24]
        break;
 80054b8:	e00f      	b.n	80054da <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ba:	f7fe fe51 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 80054be:	0003      	movs	r3, r0
 80054c0:	61bb      	str	r3, [r7, #24]
        break;
 80054c2:	e00a      	b.n	80054da <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054c4:	2380      	movs	r3, #128	; 0x80
 80054c6:	021b      	lsls	r3, r3, #8
 80054c8:	61bb      	str	r3, [r7, #24]
        break;
 80054ca:	e006      	b.n	80054da <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054d0:	231e      	movs	r3, #30
 80054d2:	18fb      	adds	r3, r7, r3
 80054d4:	2201      	movs	r2, #1
 80054d6:	701a      	strb	r2, [r3, #0]
        break;
 80054d8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d100      	bne.n	80054e2 <UART_SetConfig+0x1da>
 80054e0:	e07a      	b.n	80055d8 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	005a      	lsls	r2, r3, #1
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	085b      	lsrs	r3, r3, #1
 80054ec:	18d2      	adds	r2, r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	0019      	movs	r1, r3
 80054f4:	0010      	movs	r0, r2
 80054f6:	f7fa fe07 	bl	8000108 <__udivsi3>
 80054fa:	0003      	movs	r3, r0
 80054fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	2b0f      	cmp	r3, #15
 8005502:	d91c      	bls.n	800553e <UART_SetConfig+0x236>
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	2380      	movs	r3, #128	; 0x80
 8005508:	025b      	lsls	r3, r3, #9
 800550a:	429a      	cmp	r2, r3
 800550c:	d217      	bcs.n	800553e <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	b29a      	uxth	r2, r3
 8005512:	200e      	movs	r0, #14
 8005514:	183b      	adds	r3, r7, r0
 8005516:	210f      	movs	r1, #15
 8005518:	438a      	bics	r2, r1
 800551a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	085b      	lsrs	r3, r3, #1
 8005520:	b29b      	uxth	r3, r3
 8005522:	2207      	movs	r2, #7
 8005524:	4013      	ands	r3, r2
 8005526:	b299      	uxth	r1, r3
 8005528:	183b      	adds	r3, r7, r0
 800552a:	183a      	adds	r2, r7, r0
 800552c:	8812      	ldrh	r2, [r2, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	183a      	adds	r2, r7, r0
 8005538:	8812      	ldrh	r2, [r2, #0]
 800553a:	60da      	str	r2, [r3, #12]
 800553c:	e04c      	b.n	80055d8 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800553e:	231e      	movs	r3, #30
 8005540:	18fb      	adds	r3, r7, r3
 8005542:	2201      	movs	r2, #1
 8005544:	701a      	strb	r2, [r3, #0]
 8005546:	e047      	b.n	80055d8 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005548:	231f      	movs	r3, #31
 800554a:	18fb      	adds	r3, r7, r3
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b08      	cmp	r3, #8
 8005550:	d015      	beq.n	800557e <UART_SetConfig+0x276>
 8005552:	dc18      	bgt.n	8005586 <UART_SetConfig+0x27e>
 8005554:	2b04      	cmp	r3, #4
 8005556:	d00d      	beq.n	8005574 <UART_SetConfig+0x26c>
 8005558:	dc15      	bgt.n	8005586 <UART_SetConfig+0x27e>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <UART_SetConfig+0x25c>
 800555e:	2b02      	cmp	r3, #2
 8005560:	d005      	beq.n	800556e <UART_SetConfig+0x266>
 8005562:	e010      	b.n	8005586 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005564:	f7fe fe78 	bl	8004258 <HAL_RCC_GetPCLK1Freq>
 8005568:	0003      	movs	r3, r0
 800556a:	61bb      	str	r3, [r7, #24]
        break;
 800556c:	e012      	b.n	8005594 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800556e:	4b29      	ldr	r3, [pc, #164]	; (8005614 <UART_SetConfig+0x30c>)
 8005570:	61bb      	str	r3, [r7, #24]
        break;
 8005572:	e00f      	b.n	8005594 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005574:	f7fe fdf4 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 8005578:	0003      	movs	r3, r0
 800557a:	61bb      	str	r3, [r7, #24]
        break;
 800557c:	e00a      	b.n	8005594 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800557e:	2380      	movs	r3, #128	; 0x80
 8005580:	021b      	lsls	r3, r3, #8
 8005582:	61bb      	str	r3, [r7, #24]
        break;
 8005584:	e006      	b.n	8005594 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800558a:	231e      	movs	r3, #30
 800558c:	18fb      	adds	r3, r7, r3
 800558e:	2201      	movs	r2, #1
 8005590:	701a      	strb	r2, [r3, #0]
        break;
 8005592:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d01e      	beq.n	80055d8 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	085a      	lsrs	r2, r3, #1
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	18d2      	adds	r2, r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	0019      	movs	r1, r3
 80055aa:	0010      	movs	r0, r2
 80055ac:	f7fa fdac 	bl	8000108 <__udivsi3>
 80055b0:	0003      	movs	r3, r0
 80055b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	2b0f      	cmp	r3, #15
 80055b8:	d90a      	bls.n	80055d0 <UART_SetConfig+0x2c8>
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	2380      	movs	r3, #128	; 0x80
 80055be:	025b      	lsls	r3, r3, #9
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d205      	bcs.n	80055d0 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	60da      	str	r2, [r3, #12]
 80055ce:	e003      	b.n	80055d8 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80055d0:	231e      	movs	r3, #30
 80055d2:	18fb      	adds	r3, r7, r3
 80055d4:	2201      	movs	r2, #1
 80055d6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80055e4:	231e      	movs	r3, #30
 80055e6:	18fb      	adds	r3, r7, r3
 80055e8:	781b      	ldrb	r3, [r3, #0]
}
 80055ea:	0018      	movs	r0, r3
 80055ec:	46bd      	mov	sp, r7
 80055ee:	b008      	add	sp, #32
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	46c0      	nop			; (mov r8, r8)
 80055f4:	efff69f3 	.word	0xefff69f3
 80055f8:	ffffcfff 	.word	0xffffcfff
 80055fc:	fffff4ff 	.word	0xfffff4ff
 8005600:	40013800 	.word	0x40013800
 8005604:	40021000 	.word	0x40021000
 8005608:	40004400 	.word	0x40004400
 800560c:	40004800 	.word	0x40004800
 8005610:	40004c00 	.word	0x40004c00
 8005614:	007a1200 	.word	0x007a1200

08005618 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	2201      	movs	r2, #1
 8005626:	4013      	ands	r3, r2
 8005628:	d00b      	beq.n	8005642 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	4a4a      	ldr	r2, [pc, #296]	; (800575c <UART_AdvFeatureConfig+0x144>)
 8005632:	4013      	ands	r3, r2
 8005634:	0019      	movs	r1, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	2202      	movs	r2, #2
 8005648:	4013      	ands	r3, r2
 800564a:	d00b      	beq.n	8005664 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	4a43      	ldr	r2, [pc, #268]	; (8005760 <UART_AdvFeatureConfig+0x148>)
 8005654:	4013      	ands	r3, r2
 8005656:	0019      	movs	r1, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	2204      	movs	r2, #4
 800566a:	4013      	ands	r3, r2
 800566c:	d00b      	beq.n	8005686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	4a3b      	ldr	r2, [pc, #236]	; (8005764 <UART_AdvFeatureConfig+0x14c>)
 8005676:	4013      	ands	r3, r2
 8005678:	0019      	movs	r1, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	2208      	movs	r2, #8
 800568c:	4013      	ands	r3, r2
 800568e:	d00b      	beq.n	80056a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	4a34      	ldr	r2, [pc, #208]	; (8005768 <UART_AdvFeatureConfig+0x150>)
 8005698:	4013      	ands	r3, r2
 800569a:	0019      	movs	r1, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	2210      	movs	r2, #16
 80056ae:	4013      	ands	r3, r2
 80056b0:	d00b      	beq.n	80056ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	4a2c      	ldr	r2, [pc, #176]	; (800576c <UART_AdvFeatureConfig+0x154>)
 80056ba:	4013      	ands	r3, r2
 80056bc:	0019      	movs	r1, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	2220      	movs	r2, #32
 80056d0:	4013      	ands	r3, r2
 80056d2:	d00b      	beq.n	80056ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	4a25      	ldr	r2, [pc, #148]	; (8005770 <UART_AdvFeatureConfig+0x158>)
 80056dc:	4013      	ands	r3, r2
 80056de:	0019      	movs	r1, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	2240      	movs	r2, #64	; 0x40
 80056f2:	4013      	ands	r3, r2
 80056f4:	d01d      	beq.n	8005732 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	4a1d      	ldr	r2, [pc, #116]	; (8005774 <UART_AdvFeatureConfig+0x15c>)
 80056fe:	4013      	ands	r3, r2
 8005700:	0019      	movs	r1, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005712:	2380      	movs	r3, #128	; 0x80
 8005714:	035b      	lsls	r3, r3, #13
 8005716:	429a      	cmp	r2, r3
 8005718:	d10b      	bne.n	8005732 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	4a15      	ldr	r2, [pc, #84]	; (8005778 <UART_AdvFeatureConfig+0x160>)
 8005722:	4013      	ands	r3, r2
 8005724:	0019      	movs	r1, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	2280      	movs	r2, #128	; 0x80
 8005738:	4013      	ands	r3, r2
 800573a:	d00b      	beq.n	8005754 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	4a0e      	ldr	r2, [pc, #56]	; (800577c <UART_AdvFeatureConfig+0x164>)
 8005744:	4013      	ands	r3, r2
 8005746:	0019      	movs	r1, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	605a      	str	r2, [r3, #4]
  }
}
 8005754:	46c0      	nop			; (mov r8, r8)
 8005756:	46bd      	mov	sp, r7
 8005758:	b002      	add	sp, #8
 800575a:	bd80      	pop	{r7, pc}
 800575c:	fffdffff 	.word	0xfffdffff
 8005760:	fffeffff 	.word	0xfffeffff
 8005764:	fffbffff 	.word	0xfffbffff
 8005768:	ffff7fff 	.word	0xffff7fff
 800576c:	ffffefff 	.word	0xffffefff
 8005770:	ffffdfff 	.word	0xffffdfff
 8005774:	ffefffff 	.word	0xffefffff
 8005778:	ff9fffff 	.word	0xff9fffff
 800577c:	fff7ffff 	.word	0xfff7ffff

08005780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b092      	sub	sp, #72	; 0x48
 8005784:	af02      	add	r7, sp, #8
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2284      	movs	r2, #132	; 0x84
 800578c:	2100      	movs	r1, #0
 800578e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005790:	f7fb fba6 	bl	8000ee0 <HAL_GetTick>
 8005794:	0003      	movs	r3, r0
 8005796:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2208      	movs	r2, #8
 80057a0:	4013      	ands	r3, r2
 80057a2:	2b08      	cmp	r3, #8
 80057a4:	d12c      	bne.n	8005800 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a8:	2280      	movs	r2, #128	; 0x80
 80057aa:	0391      	lsls	r1, r2, #14
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	4a46      	ldr	r2, [pc, #280]	; (80058c8 <UART_CheckIdleState+0x148>)
 80057b0:	9200      	str	r2, [sp, #0]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f000 f88c 	bl	80058d0 <UART_WaitOnFlagUntilTimeout>
 80057b8:	1e03      	subs	r3, r0, #0
 80057ba:	d021      	beq.n	8005800 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057bc:	f3ef 8310 	mrs	r3, PRIMASK
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80057c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80057c6:	2301      	movs	r3, #1
 80057c8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057cc:	f383 8810 	msr	PRIMASK, r3
}
 80057d0:	46c0      	nop			; (mov r8, r8)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2180      	movs	r1, #128	; 0x80
 80057de:	438a      	bics	r2, r1
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e8:	f383 8810 	msr	PRIMASK, r3
}
 80057ec:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2220      	movs	r2, #32
 80057f2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2278      	movs	r2, #120	; 0x78
 80057f8:	2100      	movs	r1, #0
 80057fa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e05f      	b.n	80058c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2204      	movs	r2, #4
 8005808:	4013      	ands	r3, r2
 800580a:	2b04      	cmp	r3, #4
 800580c:	d146      	bne.n	800589c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800580e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005810:	2280      	movs	r2, #128	; 0x80
 8005812:	03d1      	lsls	r1, r2, #15
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	4a2c      	ldr	r2, [pc, #176]	; (80058c8 <UART_CheckIdleState+0x148>)
 8005818:	9200      	str	r2, [sp, #0]
 800581a:	2200      	movs	r2, #0
 800581c:	f000 f858 	bl	80058d0 <UART_WaitOnFlagUntilTimeout>
 8005820:	1e03      	subs	r3, r0, #0
 8005822:	d03b      	beq.n	800589c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005824:	f3ef 8310 	mrs	r3, PRIMASK
 8005828:	60fb      	str	r3, [r7, #12]
  return(result);
 800582a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800582c:	637b      	str	r3, [r7, #52]	; 0x34
 800582e:	2301      	movs	r3, #1
 8005830:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f383 8810 	msr	PRIMASK, r3
}
 8005838:	46c0      	nop			; (mov r8, r8)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4921      	ldr	r1, [pc, #132]	; (80058cc <UART_CheckIdleState+0x14c>)
 8005846:	400a      	ands	r2, r1
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f383 8810 	msr	PRIMASK, r3
}
 8005854:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005856:	f3ef 8310 	mrs	r3, PRIMASK
 800585a:	61bb      	str	r3, [r7, #24]
  return(result);
 800585c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585e:	633b      	str	r3, [r7, #48]	; 0x30
 8005860:	2301      	movs	r3, #1
 8005862:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	f383 8810 	msr	PRIMASK, r3
}
 800586a:	46c0      	nop			; (mov r8, r8)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689a      	ldr	r2, [r3, #8]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2101      	movs	r1, #1
 8005878:	438a      	bics	r2, r1
 800587a:	609a      	str	r2, [r3, #8]
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	f383 8810 	msr	PRIMASK, r3
}
 8005886:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2280      	movs	r2, #128	; 0x80
 800588c:	2120      	movs	r1, #32
 800588e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2278      	movs	r2, #120	; 0x78
 8005894:	2100      	movs	r1, #0
 8005896:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e011      	b.n	80058c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2220      	movs	r2, #32
 80058a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2280      	movs	r2, #128	; 0x80
 80058a6:	2120      	movs	r1, #32
 80058a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2278      	movs	r2, #120	; 0x78
 80058ba:	2100      	movs	r1, #0
 80058bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	0018      	movs	r0, r3
 80058c2:	46bd      	mov	sp, r7
 80058c4:	b010      	add	sp, #64	; 0x40
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	01ffffff 	.word	0x01ffffff
 80058cc:	fffffedf 	.word	0xfffffedf

080058d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	1dfb      	adds	r3, r7, #7
 80058de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e0:	e04b      	b.n	800597a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	3301      	adds	r3, #1
 80058e6:	d048      	beq.n	800597a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e8:	f7fb fafa 	bl	8000ee0 <HAL_GetTick>
 80058ec:	0002      	movs	r2, r0
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d302      	bcc.n	80058fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e04b      	b.n	800599a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2204      	movs	r2, #4
 800590a:	4013      	ands	r3, r2
 800590c:	d035      	beq.n	800597a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	2208      	movs	r2, #8
 8005916:	4013      	ands	r3, r2
 8005918:	2b08      	cmp	r3, #8
 800591a:	d111      	bne.n	8005940 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2208      	movs	r2, #8
 8005922:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	0018      	movs	r0, r3
 8005928:	f000 f900 	bl	8005b2c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2284      	movs	r2, #132	; 0x84
 8005930:	2108      	movs	r1, #8
 8005932:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2278      	movs	r2, #120	; 0x78
 8005938:	2100      	movs	r1, #0
 800593a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e02c      	b.n	800599a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	69da      	ldr	r2, [r3, #28]
 8005946:	2380      	movs	r3, #128	; 0x80
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	401a      	ands	r2, r3
 800594c:	2380      	movs	r3, #128	; 0x80
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	429a      	cmp	r2, r3
 8005952:	d112      	bne.n	800597a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2280      	movs	r2, #128	; 0x80
 800595a:	0112      	lsls	r2, r2, #4
 800595c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	0018      	movs	r0, r3
 8005962:	f000 f8e3 	bl	8005b2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2284      	movs	r2, #132	; 0x84
 800596a:	2120      	movs	r1, #32
 800596c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2278      	movs	r2, #120	; 0x78
 8005972:	2100      	movs	r1, #0
 8005974:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e00f      	b.n	800599a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	4013      	ands	r3, r2
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	425a      	negs	r2, r3
 800598a:	4153      	adcs	r3, r2
 800598c:	b2db      	uxtb	r3, r3
 800598e:	001a      	movs	r2, r3
 8005990:	1dfb      	adds	r3, r7, #7
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	429a      	cmp	r2, r3
 8005996:	d0a4      	beq.n	80058e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	0018      	movs	r0, r3
 800599c:	46bd      	mov	sp, r7
 800599e:	b004      	add	sp, #16
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b090      	sub	sp, #64	; 0x40
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	1dbb      	adds	r3, r7, #6
 80059b0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	1dba      	adds	r2, r7, #6
 80059bc:	2158      	movs	r1, #88	; 0x58
 80059be:	8812      	ldrh	r2, [r2, #0]
 80059c0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2284      	movs	r2, #132	; 0x84
 80059c6:	2100      	movs	r1, #0
 80059c8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2280      	movs	r2, #128	; 0x80
 80059ce:	2122      	movs	r1, #34	; 0x22
 80059d0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d028      	beq.n	8005a2c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059de:	4a3e      	ldr	r2, [pc, #248]	; (8005ad8 <UART_Start_Receive_DMA+0x134>)
 80059e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e6:	4a3d      	ldr	r2, [pc, #244]	; (8005adc <UART_Start_Receive_DMA+0x138>)
 80059e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ee:	4a3c      	ldr	r2, [pc, #240]	; (8005ae0 <UART_Start_Receive_DMA+0x13c>)
 80059f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059f6:	2200      	movs	r2, #0
 80059f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3324      	adds	r3, #36	; 0x24
 8005a04:	0019      	movs	r1, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0a:	001a      	movs	r2, r3
 8005a0c:	1dbb      	adds	r3, r7, #6
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	f7fb fe80 	bl	8001714 <HAL_DMA_Start_IT>
 8005a14:	1e03      	subs	r3, r0, #0
 8005a16:	d009      	beq.n	8005a2c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2284      	movs	r2, #132	; 0x84
 8005a1c:	2110      	movs	r1, #16
 8005a1e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2280      	movs	r2, #128	; 0x80
 8005a24:	2120      	movs	r1, #32
 8005a26:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e050      	b.n	8005ace <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d019      	beq.n	8005a68 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a34:	f3ef 8310 	mrs	r3, PRIMASK
 8005a38:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a3e:	2301      	movs	r3, #1
 8005a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a44:	f383 8810 	msr	PRIMASK, r3
}
 8005a48:	46c0      	nop			; (mov r8, r8)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2180      	movs	r1, #128	; 0x80
 8005a56:	0049      	lsls	r1, r1, #1
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a62:	f383 8810 	msr	PRIMASK, r3
}
 8005a66:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a68:	f3ef 8310 	mrs	r3, PRIMASK
 8005a6c:	613b      	str	r3, [r7, #16]
  return(result);
 8005a6e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a70:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a72:	2301      	movs	r3, #1
 8005a74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f383 8810 	msr	PRIMASK, r3
}
 8005a7c:	46c0      	nop			; (mov r8, r8)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2101      	movs	r1, #1
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	609a      	str	r2, [r3, #8]
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	f383 8810 	msr	PRIMASK, r3
}
 8005a98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a9e:	61fb      	str	r3, [r7, #28]
  return(result);
 8005aa0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	f383 8810 	msr	PRIMASK, r3
}
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689a      	ldr	r2, [r3, #8]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2140      	movs	r1, #64	; 0x40
 8005abc:	430a      	orrs	r2, r1
 8005abe:	609a      	str	r2, [r3, #8]
 8005ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	f383 8810 	msr	PRIMASK, r3
}
 8005aca:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	0018      	movs	r0, r3
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	b010      	add	sp, #64	; 0x40
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	46c0      	nop			; (mov r8, r8)
 8005ad8:	08005bf5 	.word	0x08005bf5
 8005adc:	08005d21 	.word	0x08005d21
 8005ae0:	08005d63 	.word	0x08005d63

08005ae4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aec:	f3ef 8310 	mrs	r3, PRIMASK
 8005af0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005af2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	2301      	movs	r3, #1
 8005af8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f383 8810 	msr	PRIMASK, r3
}
 8005b00:	46c0      	nop			; (mov r8, r8)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	21c0      	movs	r1, #192	; 0xc0
 8005b0e:	438a      	bics	r2, r1
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f383 8810 	msr	PRIMASK, r3
}
 8005b1c:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2220      	movs	r2, #32
 8005b22:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005b24:	46c0      	nop			; (mov r8, r8)
 8005b26:	46bd      	mov	sp, r7
 8005b28:	b006      	add	sp, #24
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08e      	sub	sp, #56	; 0x38
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b34:	f3ef 8310 	mrs	r3, PRIMASK
 8005b38:	617b      	str	r3, [r7, #20]
  return(result);
 8005b3a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b3e:	2301      	movs	r3, #1
 8005b40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	f383 8810 	msr	PRIMASK, r3
}
 8005b48:	46c0      	nop			; (mov r8, r8)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4926      	ldr	r1, [pc, #152]	; (8005bf0 <UART_EndRxTransfer+0xc4>)
 8005b56:	400a      	ands	r2, r1
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	f383 8810 	msr	PRIMASK, r3
}
 8005b64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b66:	f3ef 8310 	mrs	r3, PRIMASK
 8005b6a:	623b      	str	r3, [r7, #32]
  return(result);
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b70:	2301      	movs	r3, #1
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	f383 8810 	msr	PRIMASK, r3
}
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2101      	movs	r1, #1
 8005b88:	438a      	bics	r2, r1
 8005b8a:	609a      	str	r2, [r3, #8]
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	f383 8810 	msr	PRIMASK, r3
}
 8005b96:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d118      	bne.n	8005bd2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ba0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ba4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005baa:	2301      	movs	r3, #1
 8005bac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f383 8810 	msr	PRIMASK, r3
}
 8005bb4:	46c0      	nop			; (mov r8, r8)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2110      	movs	r1, #16
 8005bc2:	438a      	bics	r2, r1
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	f383 8810 	msr	PRIMASK, r3
}
 8005bd0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2280      	movs	r2, #128	; 0x80
 8005bd6:	2120      	movs	r1, #32
 8005bd8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005be6:	46c0      	nop			; (mov r8, r8)
 8005be8:	46bd      	mov	sp, r7
 8005bea:	b00e      	add	sp, #56	; 0x38
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	46c0      	nop			; (mov r8, r8)
 8005bf0:	fffffedf 	.word	0xfffffedf

08005bf4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b094      	sub	sp, #80	; 0x50
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	2b20      	cmp	r3, #32
 8005c08:	d06f      	beq.n	8005cea <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8005c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c0c:	225a      	movs	r2, #90	; 0x5a
 8005c0e:	2100      	movs	r1, #0
 8005c10:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c12:	f3ef 8310 	mrs	r3, PRIMASK
 8005c16:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c18:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	f383 8810 	msr	PRIMASK, r3
}
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	493a      	ldr	r1, [pc, #232]	; (8005d1c <UART_DMAReceiveCplt+0x128>)
 8005c34:	400a      	ands	r2, r1
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	f383 8810 	msr	PRIMASK, r3
}
 8005c42:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c44:	f3ef 8310 	mrs	r3, PRIMASK
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c4c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c4e:	2301      	movs	r3, #1
 8005c50:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	f383 8810 	msr	PRIMASK, r3
}
 8005c58:	46c0      	nop			; (mov r8, r8)
 8005c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2101      	movs	r1, #1
 8005c66:	438a      	bics	r2, r1
 8005c68:	609a      	str	r2, [r3, #8]
 8005c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c70:	f383 8810 	msr	PRIMASK, r3
}
 8005c74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c76:	f3ef 8310 	mrs	r3, PRIMASK
 8005c7a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7e:	643b      	str	r3, [r7, #64]	; 0x40
 8005c80:	2301      	movs	r3, #1
 8005c82:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c86:	f383 8810 	msr	PRIMASK, r3
}
 8005c8a:	46c0      	nop			; (mov r8, r8)
 8005c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2140      	movs	r1, #64	; 0x40
 8005c98:	438a      	bics	r2, r1
 8005c9a:	609a      	str	r2, [r3, #8]
 8005c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca2:	f383 8810 	msr	PRIMASK, r3
}
 8005ca6:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005caa:	2280      	movs	r2, #128	; 0x80
 8005cac:	2120      	movs	r1, #32
 8005cae:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d118      	bne.n	8005cea <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8005cbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f383 8810 	msr	PRIMASK, r3
}
 8005ccc:	46c0      	nop			; (mov r8, r8)
 8005cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2110      	movs	r1, #16
 8005cda:	438a      	bics	r2, r1
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f383 8810 	msr	PRIMASK, r3
}
 8005ce8:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cec:	2200      	movs	r2, #0
 8005cee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d108      	bne.n	8005d0a <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cfa:	2258      	movs	r2, #88	; 0x58
 8005cfc:	5a9a      	ldrh	r2, [r3, r2]
 8005cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d00:	0011      	movs	r1, r2
 8005d02:	0018      	movs	r0, r3
 8005d04:	f001 fb56 	bl	80073b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d08:	e003      	b.n	8005d12 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	f7ff fae3 	bl	80052d8 <HAL_UART_RxCpltCallback>
}
 8005d12:	46c0      	nop			; (mov r8, r8)
 8005d14:	46bd      	mov	sp, r7
 8005d16:	b014      	add	sp, #80	; 0x50
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	46c0      	nop			; (mov r8, r8)
 8005d1c:	fffffeff 	.word	0xfffffeff

08005d20 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2201      	movs	r2, #1
 8005d32:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d10a      	bne.n	8005d52 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2258      	movs	r2, #88	; 0x58
 8005d40:	5a9b      	ldrh	r3, [r3, r2]
 8005d42:	085b      	lsrs	r3, r3, #1
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	0011      	movs	r1, r2
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	f001 fb32 	bl	80073b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d50:	e003      	b.n	8005d5a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	0018      	movs	r0, r3
 8005d56:	f7ff fac7 	bl	80052e8 <HAL_UART_RxHalfCpltCallback>
}
 8005d5a:	46c0      	nop			; (mov r8, r8)
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	b004      	add	sp, #16
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b086      	sub	sp, #24
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d74:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2280      	movs	r2, #128	; 0x80
 8005d7a:	589b      	ldr	r3, [r3, r2]
 8005d7c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	2280      	movs	r2, #128	; 0x80
 8005d86:	4013      	ands	r3, r2
 8005d88:	2b80      	cmp	r3, #128	; 0x80
 8005d8a:	d10a      	bne.n	8005da2 <UART_DMAError+0x40>
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	2b21      	cmp	r3, #33	; 0x21
 8005d90:	d107      	bne.n	8005da2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2252      	movs	r2, #82	; 0x52
 8005d96:	2100      	movs	r1, #0
 8005d98:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	f7ff fea1 	bl	8005ae4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	2240      	movs	r2, #64	; 0x40
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b40      	cmp	r3, #64	; 0x40
 8005dae:	d10a      	bne.n	8005dc6 <UART_DMAError+0x64>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b22      	cmp	r3, #34	; 0x22
 8005db4:	d107      	bne.n	8005dc6 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	225a      	movs	r2, #90	; 0x5a
 8005dba:	2100      	movs	r1, #0
 8005dbc:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	f7ff feb3 	bl	8005b2c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2284      	movs	r2, #132	; 0x84
 8005dca:	589b      	ldr	r3, [r3, r2]
 8005dcc:	2210      	movs	r2, #16
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2184      	movs	r1, #132	; 0x84
 8005dd4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f7ff fa8d 	bl	80052f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	46bd      	mov	sp, r7
 8005de2:	b006      	add	sp, #24
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	225a      	movs	r2, #90	; 0x5a
 8005df8:	2100      	movs	r1, #0
 8005dfa:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2252      	movs	r2, #82	; 0x52
 8005e00:	2100      	movs	r1, #0
 8005e02:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	0018      	movs	r0, r3
 8005e08:	f7ff fa76 	bl	80052f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e0c:	46c0      	nop			; (mov r8, r8)
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	b004      	add	sp, #16
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e20:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e22:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	2301      	movs	r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f383 8810 	msr	PRIMASK, r3
}
 8005e30:	46c0      	nop			; (mov r8, r8)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2140      	movs	r1, #64	; 0x40
 8005e3e:	438a      	bics	r2, r1
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f383 8810 	msr	PRIMASK, r3
}
 8005e4c:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f7ff fa33 	bl	80052c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	46bd      	mov	sp, r7
 8005e66:	b006      	add	sp, #24
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b082      	sub	sp, #8
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b002      	add	sp, #8
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e7a:	b5b0      	push	{r4, r5, r7, lr}
 8005e7c:	b08a      	sub	sp, #40	; 0x28
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	60f8      	str	r0, [r7, #12]
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	1dbb      	adds	r3, r7, #6
 8005e86:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2280      	movs	r2, #128	; 0x80
 8005e8c:	589b      	ldr	r3, [r3, r2]
 8005e8e:	2b20      	cmp	r3, #32
 8005e90:	d156      	bne.n	8005f40 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005e98:	1dbb      	adds	r3, r7, #6
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e04e      	b.n	8005f42 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	2380      	movs	r3, #128	; 0x80
 8005eaa:	015b      	lsls	r3, r3, #5
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d109      	bne.n	8005ec4 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d105      	bne.n	8005ec4 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	d001      	beq.n	8005ec4 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e03e      	b.n	8005f42 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005ed0:	2527      	movs	r5, #39	; 0x27
 8005ed2:	197c      	adds	r4, r7, r5
 8005ed4:	1dbb      	adds	r3, r7, #6
 8005ed6:	881a      	ldrh	r2, [r3, #0]
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	0018      	movs	r0, r3
 8005ede:	f7ff fd61 	bl	80059a4 <UART_Start_Receive_DMA>
 8005ee2:	0003      	movs	r3, r0
 8005ee4:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005ee6:	197b      	adds	r3, r7, r5
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d124      	bne.n	8005f38 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d11c      	bne.n	8005f30 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2210      	movs	r2, #16
 8005efc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005efe:	f3ef 8310 	mrs	r3, PRIMASK
 8005f02:	617b      	str	r3, [r7, #20]
  return(result);
 8005f04:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f06:	623b      	str	r3, [r7, #32]
 8005f08:	2301      	movs	r3, #1
 8005f0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	f383 8810 	msr	PRIMASK, r3
}
 8005f12:	46c0      	nop			; (mov r8, r8)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2110      	movs	r1, #16
 8005f20:	430a      	orrs	r2, r1
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	f383 8810 	msr	PRIMASK, r3
}
 8005f2e:	e003      	b.n	8005f38 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005f30:	2327      	movs	r3, #39	; 0x27
 8005f32:	18fb      	adds	r3, r7, r3
 8005f34:	2201      	movs	r2, #1
 8005f36:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8005f38:	2327      	movs	r3, #39	; 0x27
 8005f3a:	18fb      	adds	r3, r7, r3
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	e000      	b.n	8005f42 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8005f40:	2302      	movs	r3, #2
  }
}
 8005f42:	0018      	movs	r0, r3
 8005f44:	46bd      	mov	sp, r7
 8005f46:	b00a      	add	sp, #40	; 0x28
 8005f48:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005f4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f54:	4b09      	ldr	r3, [pc, #36]	; (8005f7c <USB_DisableGlobalInt+0x30>)
 8005f56:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2240      	movs	r2, #64	; 0x40
 8005f5c:	5a9b      	ldrh	r3, [r3, r2]
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	b292      	uxth	r2, r2
 8005f64:	43d2      	mvns	r2, r2
 8005f66:	b292      	uxth	r2, r2
 8005f68:	4013      	ands	r3, r2
 8005f6a:	b299      	uxth	r1, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2240      	movs	r2, #64	; 0x40
 8005f70:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	0018      	movs	r0, r3
 8005f76:	46bd      	mov	sp, r7
 8005f78:	b004      	add	sp, #16
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	0000bf80 	.word	0x0000bf80

08005f80 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f80:	b084      	sub	sp, #16
 8005f82:	b590      	push	{r4, r7, lr}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	2004      	movs	r0, #4
 8005f8c:	2410      	movs	r4, #16
 8005f8e:	1900      	adds	r0, r0, r4
 8005f90:	2408      	movs	r4, #8
 8005f92:	46a4      	mov	ip, r4
 8005f94:	44bc      	add	ip, r7
 8005f96:	4460      	add	r0, ip
 8005f98:	6001      	str	r1, [r0, #0]
 8005f9a:	6042      	str	r2, [r0, #4]
 8005f9c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2240      	movs	r2, #64	; 0x40
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2240      	movs	r2, #64	; 0x40
 8005faa:	2100      	movs	r1, #0
 8005fac:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2244      	movs	r2, #68	; 0x44
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2250      	movs	r2, #80	; 0x50
 8005fba:	2100      	movs	r1, #0
 8005fbc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	b003      	add	sp, #12
 8005fc6:	bc90      	pop	{r4, r7}
 8005fc8:	bc08      	pop	{r3}
 8005fca:	b004      	add	sp, #16
 8005fcc:	4718      	bx	r3
	...

08005fd0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fd0:	b590      	push	{r4, r7, lr}
 8005fd2:	b0c3      	sub	sp, #268	; 0x10c
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	785b      	ldrb	r3, [r3, #1]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d001      	beq.n	8005fe6 <USB_EPStartXfer+0x16>
 8005fe2:	f000 fd2d 	bl	8006a40 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	699a      	ldr	r2, [r3, #24]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d905      	bls.n	8005ffe <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	1d7a      	adds	r2, r7, #5
 8005ff8:	32ff      	adds	r2, #255	; 0xff
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	e004      	b.n	8006008 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	1d7a      	adds	r2, r7, #5
 8006004:	32ff      	adds	r2, #255	; 0xff
 8006006:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	7b1b      	ldrb	r3, [r3, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d125      	bne.n	800605c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	6959      	ldr	r1, [r3, #20]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	88da      	ldrh	r2, [r3, #6]
 8006018:	1d7b      	adds	r3, r7, #5
 800601a:	33ff      	adds	r3, #255	; 0xff
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	b29b      	uxth	r3, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 f92f 	bl	8007284 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2250      	movs	r2, #80	; 0x50
 800602e:	5a9b      	ldrh	r3, [r3, r2]
 8006030:	b29b      	uxth	r3, r3
 8006032:	001a      	movs	r2, r3
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	189b      	adds	r3, r3, r2
 8006038:	613b      	str	r3, [r7, #16]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	00da      	lsls	r2, r3, #3
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	18d3      	adds	r3, r2, r3
 8006044:	4ad7      	ldr	r2, [pc, #860]	; (80063a4 <USB_EPStartXfer+0x3d4>)
 8006046:	4694      	mov	ip, r2
 8006048:	4463      	add	r3, ip
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	1d7b      	adds	r3, r7, #5
 800604e:	33ff      	adds	r3, #255	; 0xff
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	b29a      	uxth	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	801a      	strh	r2, [r3, #0]
 8006058:	f000 fccd 	bl	80069f6 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	78db      	ldrb	r3, [r3, #3]
 8006060:	2b02      	cmp	r3, #2
 8006062:	d000      	beq.n	8006066 <USB_EPStartXfer+0x96>
 8006064:	e362      	b.n	800672c <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	6a1a      	ldr	r2, [r3, #32]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	429a      	cmp	r2, r3
 8006070:	d800      	bhi.n	8006074 <USB_EPStartXfer+0xa4>
 8006072:	e309      	b.n	8006688 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	18d3      	adds	r3, r2, r3
 800607e:	881b      	ldrh	r3, [r3, #0]
 8006080:	b29a      	uxth	r2, r3
 8006082:	2056      	movs	r0, #86	; 0x56
 8006084:	183b      	adds	r3, r7, r0
 8006086:	49c8      	ldr	r1, [pc, #800]	; (80063a8 <USB_EPStartXfer+0x3d8>)
 8006088:	400a      	ands	r2, r1
 800608a:	801a      	strh	r2, [r3, #0]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	18d3      	adds	r3, r2, r3
 8006096:	183a      	adds	r2, r7, r0
 8006098:	8812      	ldrh	r2, [r2, #0]
 800609a:	49c4      	ldr	r1, [pc, #784]	; (80063ac <USB_EPStartXfer+0x3dc>)
 800609c:	430a      	orrs	r2, r1
 800609e:	b292      	uxth	r2, r2
 80060a0:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	6a1a      	ldr	r2, [r3, #32]
 80060a6:	1d7b      	adds	r3, r7, #5
 80060a8:	33ff      	adds	r3, #255	; 0xff
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	1ad2      	subs	r2, r2, r3
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	18d3      	adds	r3, r2, r3
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	001a      	movs	r2, r3
 80060c2:	2340      	movs	r3, #64	; 0x40
 80060c4:	4013      	ands	r3, r2
 80060c6:	d100      	bne.n	80060ca <USB_EPStartXfer+0xfa>
 80060c8:	e176      	b.n	80063b8 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	633b      	str	r3, [r7, #48]	; 0x30
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	785b      	ldrb	r3, [r3, #1]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d000      	beq.n	80060d8 <USB_EPStartXfer+0x108>
 80060d6:	e074      	b.n	80061c2 <USB_EPStartXfer+0x1f2>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	62bb      	str	r3, [r7, #40]	; 0x28
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2250      	movs	r2, #80	; 0x50
 80060e0:	5a9b      	ldrh	r3, [r3, r2]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	001a      	movs	r2, r3
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	189b      	adds	r3, r3, r2
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	00da      	lsls	r2, r3, #3
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	18d3      	adds	r3, r2, r3
 80060f6:	4aae      	ldr	r2, [pc, #696]	; (80063b0 <USB_EPStartXfer+0x3e0>)
 80060f8:	4694      	mov	ip, r2
 80060fa:	4463      	add	r3, ip
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	b29b      	uxth	r3, r3
 8006104:	059b      	lsls	r3, r3, #22
 8006106:	0d9b      	lsrs	r3, r3, #22
 8006108:	b29a      	uxth	r2, r3
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	801a      	strh	r2, [r3, #0]
 800610e:	1d7b      	adds	r3, r7, #5
 8006110:	33ff      	adds	r3, #255	; 0xff
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b3e      	cmp	r3, #62	; 0x3e
 8006116:	d924      	bls.n	8006162 <USB_EPStartXfer+0x192>
 8006118:	1d7b      	adds	r3, r7, #5
 800611a:	33ff      	adds	r3, #255	; 0xff
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	095b      	lsrs	r3, r3, #5
 8006120:	1c7a      	adds	r2, r7, #1
 8006122:	32ff      	adds	r2, #255	; 0xff
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	1d7b      	adds	r3, r7, #5
 8006128:	33ff      	adds	r3, #255	; 0xff
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	221f      	movs	r2, #31
 800612e:	4013      	ands	r3, r2
 8006130:	d106      	bne.n	8006140 <USB_EPStartXfer+0x170>
 8006132:	1c7b      	adds	r3, r7, #1
 8006134:	33ff      	adds	r3, #255	; 0xff
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3b01      	subs	r3, #1
 800613a:	1c7a      	adds	r2, r7, #1
 800613c:	32ff      	adds	r2, #255	; 0xff
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	b29a      	uxth	r2, r3
 8006146:	1c7b      	adds	r3, r7, #1
 8006148:	33ff      	adds	r3, #255	; 0xff
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	029b      	lsls	r3, r3, #10
 8006150:	b29b      	uxth	r3, r3
 8006152:	4313      	orrs	r3, r2
 8006154:	b29b      	uxth	r3, r3
 8006156:	4a97      	ldr	r2, [pc, #604]	; (80063b4 <USB_EPStartXfer+0x3e4>)
 8006158:	4313      	orrs	r3, r2
 800615a:	b29a      	uxth	r2, r3
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	801a      	strh	r2, [r3, #0]
 8006160:	e04a      	b.n	80061f8 <USB_EPStartXfer+0x228>
 8006162:	1d7b      	adds	r3, r7, #5
 8006164:	33ff      	adds	r3, #255	; 0xff
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d108      	bne.n	800617e <USB_EPStartXfer+0x1ae>
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	b29b      	uxth	r3, r3
 8006172:	4a90      	ldr	r2, [pc, #576]	; (80063b4 <USB_EPStartXfer+0x3e4>)
 8006174:	4313      	orrs	r3, r2
 8006176:	b29a      	uxth	r2, r3
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	801a      	strh	r2, [r3, #0]
 800617c:	e03c      	b.n	80061f8 <USB_EPStartXfer+0x228>
 800617e:	1d7b      	adds	r3, r7, #5
 8006180:	33ff      	adds	r3, #255	; 0xff
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	085b      	lsrs	r3, r3, #1
 8006186:	1c7a      	adds	r2, r7, #1
 8006188:	32ff      	adds	r2, #255	; 0xff
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	1d7b      	adds	r3, r7, #5
 800618e:	33ff      	adds	r3, #255	; 0xff
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2201      	movs	r2, #1
 8006194:	4013      	ands	r3, r2
 8006196:	d006      	beq.n	80061a6 <USB_EPStartXfer+0x1d6>
 8006198:	1c7b      	adds	r3, r7, #1
 800619a:	33ff      	adds	r3, #255	; 0xff
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3301      	adds	r3, #1
 80061a0:	1c7a      	adds	r2, r7, #1
 80061a2:	32ff      	adds	r2, #255	; 0xff
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	1c7b      	adds	r3, r7, #1
 80061ae:	33ff      	adds	r3, #255	; 0xff
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	029b      	lsls	r3, r3, #10
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	4313      	orrs	r3, r2
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	801a      	strh	r2, [r3, #0]
 80061c0:	e01a      	b.n	80061f8 <USB_EPStartXfer+0x228>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	785b      	ldrb	r3, [r3, #1]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d116      	bne.n	80061f8 <USB_EPStartXfer+0x228>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2250      	movs	r2, #80	; 0x50
 80061ce:	5a9b      	ldrh	r3, [r3, r2]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	001a      	movs	r2, r3
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	189b      	adds	r3, r3, r2
 80061d8:	633b      	str	r3, [r7, #48]	; 0x30
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	00da      	lsls	r2, r3, #3
 80061e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e2:	18d3      	adds	r3, r2, r3
 80061e4:	4a72      	ldr	r2, [pc, #456]	; (80063b0 <USB_EPStartXfer+0x3e0>)
 80061e6:	4694      	mov	ip, r2
 80061e8:	4463      	add	r3, ip
 80061ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ec:	1d7b      	adds	r3, r7, #5
 80061ee:	33ff      	adds	r3, #255	; 0xff
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80061f8:	2076      	movs	r0, #118	; 0x76
 80061fa:	183b      	adds	r3, r7, r0
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	8952      	ldrh	r2, [r2, #10]
 8006200:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	6959      	ldr	r1, [r3, #20]
 8006206:	1d7b      	adds	r3, r7, #5
 8006208:	33ff      	adds	r3, #255	; 0xff
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	b29c      	uxth	r4, r3
 800620e:	183b      	adds	r3, r7, r0
 8006210:	881a      	ldrh	r2, [r3, #0]
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	0023      	movs	r3, r4
 8006216:	f001 f835 	bl	8007284 <USB_WritePMA>
            ep->xfer_buff += len;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	695a      	ldr	r2, [r3, #20]
 800621e:	1d7b      	adds	r3, r7, #5
 8006220:	33ff      	adds	r3, #255	; 0xff
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	18d2      	adds	r2, r2, r3
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	6a1a      	ldr	r2, [r3, #32]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	429a      	cmp	r2, r3
 8006234:	d908      	bls.n	8006248 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	6a1a      	ldr	r2, [r3, #32]
 800623a:	1d7b      	adds	r3, r7, #5
 800623c:	33ff      	adds	r3, #255	; 0xff
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	1ad2      	subs	r2, r2, r3
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	621a      	str	r2, [r3, #32]
 8006246:	e007      	b.n	8006258 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	1d7a      	adds	r2, r7, #5
 800624e:	32ff      	adds	r2, #255	; 0xff
 8006250:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2200      	movs	r2, #0
 8006256:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	785b      	ldrb	r3, [r3, #1]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d000      	beq.n	8006262 <USB_EPStartXfer+0x292>
 8006260:	e070      	b.n	8006344 <USB_EPStartXfer+0x374>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	61bb      	str	r3, [r7, #24]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2250      	movs	r2, #80	; 0x50
 800626a:	5a9b      	ldrh	r3, [r3, r2]
 800626c:	b29b      	uxth	r3, r3
 800626e:	001a      	movs	r2, r3
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	189b      	adds	r3, r3, r2
 8006274:	61bb      	str	r3, [r7, #24]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	00da      	lsls	r2, r3, #3
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	18d3      	adds	r3, r2, r3
 8006280:	4a48      	ldr	r2, [pc, #288]	; (80063a4 <USB_EPStartXfer+0x3d4>)
 8006282:	4694      	mov	ip, r2
 8006284:	4463      	add	r3, ip
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	b29b      	uxth	r3, r3
 800628e:	059b      	lsls	r3, r3, #22
 8006290:	0d9b      	lsrs	r3, r3, #22
 8006292:	b29a      	uxth	r2, r3
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	1d7b      	adds	r3, r7, #5
 800629a:	33ff      	adds	r3, #255	; 0xff
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b3e      	cmp	r3, #62	; 0x3e
 80062a0:	d922      	bls.n	80062e8 <USB_EPStartXfer+0x318>
 80062a2:	1d7b      	adds	r3, r7, #5
 80062a4:	33ff      	adds	r3, #255	; 0xff
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	21fc      	movs	r1, #252	; 0xfc
 80062ac:	187a      	adds	r2, r7, r1
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	1d7b      	adds	r3, r7, #5
 80062b2:	33ff      	adds	r3, #255	; 0xff
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	221f      	movs	r2, #31
 80062b8:	4013      	ands	r3, r2
 80062ba:	d104      	bne.n	80062c6 <USB_EPStartXfer+0x2f6>
 80062bc:	187b      	adds	r3, r7, r1
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3b01      	subs	r3, #1
 80062c2:	187a      	adds	r2, r7, r1
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	23fc      	movs	r3, #252	; 0xfc
 80062ce:	18fb      	adds	r3, r7, r3
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	029b      	lsls	r3, r3, #10
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	4313      	orrs	r3, r2
 80062da:	b29b      	uxth	r3, r3
 80062dc:	4a35      	ldr	r2, [pc, #212]	; (80063b4 <USB_EPStartXfer+0x3e4>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	801a      	strh	r2, [r3, #0]
 80062e6:	e04a      	b.n	800637e <USB_EPStartXfer+0x3ae>
 80062e8:	1d7b      	adds	r3, r7, #5
 80062ea:	33ff      	adds	r3, #255	; 0xff
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d108      	bne.n	8006304 <USB_EPStartXfer+0x334>
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	4a2e      	ldr	r2, [pc, #184]	; (80063b4 <USB_EPStartXfer+0x3e4>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	801a      	strh	r2, [r3, #0]
 8006302:	e03c      	b.n	800637e <USB_EPStartXfer+0x3ae>
 8006304:	1d7b      	adds	r3, r7, #5
 8006306:	33ff      	adds	r3, #255	; 0xff
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	085b      	lsrs	r3, r3, #1
 800630c:	21fc      	movs	r1, #252	; 0xfc
 800630e:	187a      	adds	r2, r7, r1
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	1d7b      	adds	r3, r7, #5
 8006314:	33ff      	adds	r3, #255	; 0xff
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2201      	movs	r2, #1
 800631a:	4013      	ands	r3, r2
 800631c:	d004      	beq.n	8006328 <USB_EPStartXfer+0x358>
 800631e:	187b      	adds	r3, r7, r1
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3301      	adds	r3, #1
 8006324:	187a      	adds	r2, r7, r1
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29a      	uxth	r2, r3
 800632e:	23fc      	movs	r3, #252	; 0xfc
 8006330:	18fb      	adds	r3, r7, r3
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	b29b      	uxth	r3, r3
 8006336:	029b      	lsls	r3, r3, #10
 8006338:	b29b      	uxth	r3, r3
 800633a:	4313      	orrs	r3, r2
 800633c:	b29a      	uxth	r2, r3
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	801a      	strh	r2, [r3, #0]
 8006342:	e01c      	b.n	800637e <USB_EPStartXfer+0x3ae>
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	785b      	ldrb	r3, [r3, #1]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d118      	bne.n	800637e <USB_EPStartXfer+0x3ae>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	623b      	str	r3, [r7, #32]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2250      	movs	r2, #80	; 0x50
 8006354:	5a9b      	ldrh	r3, [r3, r2]
 8006356:	b29b      	uxth	r3, r3
 8006358:	001a      	movs	r2, r3
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	189b      	adds	r3, r3, r2
 800635e:	623b      	str	r3, [r7, #32]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	00da      	lsls	r2, r3, #3
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	18d3      	adds	r3, r2, r3
 800636a:	4a0e      	ldr	r2, [pc, #56]	; (80063a4 <USB_EPStartXfer+0x3d4>)
 800636c:	4694      	mov	ip, r2
 800636e:	4463      	add	r3, ip
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	1d7b      	adds	r3, r7, #5
 8006374:	33ff      	adds	r3, #255	; 0xff
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	b29a      	uxth	r2, r3
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800637e:	2076      	movs	r0, #118	; 0x76
 8006380:	183b      	adds	r3, r7, r0
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	8912      	ldrh	r2, [r2, #8]
 8006386:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	6959      	ldr	r1, [r3, #20]
 800638c:	1d7b      	adds	r3, r7, #5
 800638e:	33ff      	adds	r3, #255	; 0xff
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	b29c      	uxth	r4, r3
 8006394:	183b      	adds	r3, r7, r0
 8006396:	881a      	ldrh	r2, [r3, #0]
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	0023      	movs	r3, r4
 800639c:	f000 ff72 	bl	8007284 <USB_WritePMA>
 80063a0:	e329      	b.n	80069f6 <USB_EPStartXfer+0xa26>
 80063a2:	46c0      	nop			; (mov r8, r8)
 80063a4:	00000402 	.word	0x00000402
 80063a8:	ffff8f8f 	.word	0xffff8f8f
 80063ac:	ffff8180 	.word	0xffff8180
 80063b0:	00000406 	.word	0x00000406
 80063b4:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	785b      	ldrb	r3, [r3, #1]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d000      	beq.n	80063c2 <USB_EPStartXfer+0x3f2>
 80063c0:	e070      	b.n	80064a4 <USB_EPStartXfer+0x4d4>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2250      	movs	r2, #80	; 0x50
 80063ca:	5a9b      	ldrh	r3, [r3, r2]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	001a      	movs	r2, r3
 80063d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063d2:	189b      	adds	r3, r3, r2
 80063d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	00da      	lsls	r2, r3, #3
 80063dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063de:	18d3      	adds	r3, r2, r3
 80063e0:	4acd      	ldr	r2, [pc, #820]	; (8006718 <USB_EPStartXfer+0x748>)
 80063e2:	4694      	mov	ip, r2
 80063e4:	4463      	add	r3, ip
 80063e6:	647b      	str	r3, [r7, #68]	; 0x44
 80063e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ea:	881b      	ldrh	r3, [r3, #0]
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	059b      	lsls	r3, r3, #22
 80063f0:	0d9b      	lsrs	r3, r3, #22
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063f6:	801a      	strh	r2, [r3, #0]
 80063f8:	1d7b      	adds	r3, r7, #5
 80063fa:	33ff      	adds	r3, #255	; 0xff
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b3e      	cmp	r3, #62	; 0x3e
 8006400:	d922      	bls.n	8006448 <USB_EPStartXfer+0x478>
 8006402:	1d7b      	adds	r3, r7, #5
 8006404:	33ff      	adds	r3, #255	; 0xff
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	095b      	lsrs	r3, r3, #5
 800640a:	21f8      	movs	r1, #248	; 0xf8
 800640c:	187a      	adds	r2, r7, r1
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	1d7b      	adds	r3, r7, #5
 8006412:	33ff      	adds	r3, #255	; 0xff
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	221f      	movs	r2, #31
 8006418:	4013      	ands	r3, r2
 800641a:	d104      	bne.n	8006426 <USB_EPStartXfer+0x456>
 800641c:	187b      	adds	r3, r7, r1
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3b01      	subs	r3, #1
 8006422:	187a      	adds	r2, r7, r1
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	b29a      	uxth	r2, r3
 800642c:	23f8      	movs	r3, #248	; 0xf8
 800642e:	18fb      	adds	r3, r7, r3
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	b29b      	uxth	r3, r3
 8006434:	029b      	lsls	r3, r3, #10
 8006436:	b29b      	uxth	r3, r3
 8006438:	4313      	orrs	r3, r2
 800643a:	b29b      	uxth	r3, r3
 800643c:	4ab7      	ldr	r2, [pc, #732]	; (800671c <USB_EPStartXfer+0x74c>)
 800643e:	4313      	orrs	r3, r2
 8006440:	b29a      	uxth	r2, r3
 8006442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006444:	801a      	strh	r2, [r3, #0]
 8006446:	e04a      	b.n	80064de <USB_EPStartXfer+0x50e>
 8006448:	1d7b      	adds	r3, r7, #5
 800644a:	33ff      	adds	r3, #255	; 0xff
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d108      	bne.n	8006464 <USB_EPStartXfer+0x494>
 8006452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	4ab0      	ldr	r2, [pc, #704]	; (800671c <USB_EPStartXfer+0x74c>)
 800645a:	4313      	orrs	r3, r2
 800645c:	b29a      	uxth	r2, r3
 800645e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006460:	801a      	strh	r2, [r3, #0]
 8006462:	e03c      	b.n	80064de <USB_EPStartXfer+0x50e>
 8006464:	1d7b      	adds	r3, r7, #5
 8006466:	33ff      	adds	r3, #255	; 0xff
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	085b      	lsrs	r3, r3, #1
 800646c:	21f8      	movs	r1, #248	; 0xf8
 800646e:	187a      	adds	r2, r7, r1
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	1d7b      	adds	r3, r7, #5
 8006474:	33ff      	adds	r3, #255	; 0xff
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2201      	movs	r2, #1
 800647a:	4013      	ands	r3, r2
 800647c:	d004      	beq.n	8006488 <USB_EPStartXfer+0x4b8>
 800647e:	187b      	adds	r3, r7, r1
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3301      	adds	r3, #1
 8006484:	187a      	adds	r2, r7, r1
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800648a:	881b      	ldrh	r3, [r3, #0]
 800648c:	b29a      	uxth	r2, r3
 800648e:	23f8      	movs	r3, #248	; 0xf8
 8006490:	18fb      	adds	r3, r7, r3
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	b29b      	uxth	r3, r3
 8006496:	029b      	lsls	r3, r3, #10
 8006498:	b29b      	uxth	r3, r3
 800649a:	4313      	orrs	r3, r2
 800649c:	b29a      	uxth	r2, r3
 800649e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	e01c      	b.n	80064de <USB_EPStartXfer+0x50e>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	785b      	ldrb	r3, [r3, #1]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d118      	bne.n	80064de <USB_EPStartXfer+0x50e>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	653b      	str	r3, [r7, #80]	; 0x50
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2250      	movs	r2, #80	; 0x50
 80064b4:	5a9b      	ldrh	r3, [r3, r2]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	001a      	movs	r2, r3
 80064ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064bc:	189b      	adds	r3, r3, r2
 80064be:	653b      	str	r3, [r7, #80]	; 0x50
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	00da      	lsls	r2, r3, #3
 80064c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064c8:	18d3      	adds	r3, r2, r3
 80064ca:	4a93      	ldr	r2, [pc, #588]	; (8006718 <USB_EPStartXfer+0x748>)
 80064cc:	4694      	mov	ip, r2
 80064ce:	4463      	add	r3, ip
 80064d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064d2:	1d7b      	adds	r3, r7, #5
 80064d4:	33ff      	adds	r3, #255	; 0xff
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	b29a      	uxth	r2, r3
 80064da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064de:	2076      	movs	r0, #118	; 0x76
 80064e0:	183b      	adds	r3, r7, r0
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	8912      	ldrh	r2, [r2, #8]
 80064e6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	6959      	ldr	r1, [r3, #20]
 80064ec:	1d7b      	adds	r3, r7, #5
 80064ee:	33ff      	adds	r3, #255	; 0xff
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	b29c      	uxth	r4, r3
 80064f4:	183b      	adds	r3, r7, r0
 80064f6:	881a      	ldrh	r2, [r3, #0]
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	0023      	movs	r3, r4
 80064fc:	f000 fec2 	bl	8007284 <USB_WritePMA>
            ep->xfer_buff += len;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	695a      	ldr	r2, [r3, #20]
 8006504:	1d7b      	adds	r3, r7, #5
 8006506:	33ff      	adds	r3, #255	; 0xff
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	18d2      	adds	r2, r2, r3
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	6a1a      	ldr	r2, [r3, #32]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	429a      	cmp	r2, r3
 800651a:	d908      	bls.n	800652e <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	6a1a      	ldr	r2, [r3, #32]
 8006520:	1d7b      	adds	r3, r7, #5
 8006522:	33ff      	adds	r3, #255	; 0xff
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	1ad2      	subs	r2, r2, r3
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	621a      	str	r2, [r3, #32]
 800652c:	e007      	b.n	800653e <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	1d7a      	adds	r2, r7, #5
 8006534:	32ff      	adds	r2, #255	; 0xff
 8006536:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2200      	movs	r2, #0
 800653c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	643b      	str	r3, [r7, #64]	; 0x40
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	785b      	ldrb	r3, [r3, #1]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d000      	beq.n	800654c <USB_EPStartXfer+0x57c>
 800654a:	e070      	b.n	800662e <USB_EPStartXfer+0x65e>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2250      	movs	r2, #80	; 0x50
 8006554:	5a9b      	ldrh	r3, [r3, r2]
 8006556:	b29b      	uxth	r3, r3
 8006558:	001a      	movs	r2, r3
 800655a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655c:	189b      	adds	r3, r3, r2
 800655e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	00da      	lsls	r2, r3, #3
 8006566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006568:	18d3      	adds	r3, r2, r3
 800656a:	4a6d      	ldr	r2, [pc, #436]	; (8006720 <USB_EPStartXfer+0x750>)
 800656c:	4694      	mov	ip, r2
 800656e:	4463      	add	r3, ip
 8006570:	637b      	str	r3, [r7, #52]	; 0x34
 8006572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	b29b      	uxth	r3, r3
 8006578:	059b      	lsls	r3, r3, #22
 800657a:	0d9b      	lsrs	r3, r3, #22
 800657c:	b29a      	uxth	r2, r3
 800657e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006580:	801a      	strh	r2, [r3, #0]
 8006582:	1d7b      	adds	r3, r7, #5
 8006584:	33ff      	adds	r3, #255	; 0xff
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b3e      	cmp	r3, #62	; 0x3e
 800658a:	d922      	bls.n	80065d2 <USB_EPStartXfer+0x602>
 800658c:	1d7b      	adds	r3, r7, #5
 800658e:	33ff      	adds	r3, #255	; 0xff
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	095b      	lsrs	r3, r3, #5
 8006594:	21f4      	movs	r1, #244	; 0xf4
 8006596:	187a      	adds	r2, r7, r1
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	1d7b      	adds	r3, r7, #5
 800659c:	33ff      	adds	r3, #255	; 0xff
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	221f      	movs	r2, #31
 80065a2:	4013      	ands	r3, r2
 80065a4:	d104      	bne.n	80065b0 <USB_EPStartXfer+0x5e0>
 80065a6:	187b      	adds	r3, r7, r1
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	187a      	adds	r2, r7, r1
 80065ae:	6013      	str	r3, [r2, #0]
 80065b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	23f4      	movs	r3, #244	; 0xf4
 80065b8:	18fb      	adds	r3, r7, r3
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	b29b      	uxth	r3, r3
 80065be:	029b      	lsls	r3, r3, #10
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	4313      	orrs	r3, r2
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	4a55      	ldr	r2, [pc, #340]	; (800671c <USB_EPStartXfer+0x74c>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ce:	801a      	strh	r2, [r3, #0]
 80065d0:	e048      	b.n	8006664 <USB_EPStartXfer+0x694>
 80065d2:	1d7b      	adds	r3, r7, #5
 80065d4:	33ff      	adds	r3, #255	; 0xff
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d108      	bne.n	80065ee <USB_EPStartXfer+0x61e>
 80065dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	4a4e      	ldr	r2, [pc, #312]	; (800671c <USB_EPStartXfer+0x74c>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ea:	801a      	strh	r2, [r3, #0]
 80065ec:	e03a      	b.n	8006664 <USB_EPStartXfer+0x694>
 80065ee:	1d7b      	adds	r3, r7, #5
 80065f0:	33ff      	adds	r3, #255	; 0xff
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	085b      	lsrs	r3, r3, #1
 80065f6:	21f4      	movs	r1, #244	; 0xf4
 80065f8:	187a      	adds	r2, r7, r1
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	1d7b      	adds	r3, r7, #5
 80065fe:	33ff      	adds	r3, #255	; 0xff
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2201      	movs	r2, #1
 8006604:	4013      	ands	r3, r2
 8006606:	d004      	beq.n	8006612 <USB_EPStartXfer+0x642>
 8006608:	187b      	adds	r3, r7, r1
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3301      	adds	r3, #1
 800660e:	187a      	adds	r2, r7, r1
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29a      	uxth	r2, r3
 8006618:	23f4      	movs	r3, #244	; 0xf4
 800661a:	18fb      	adds	r3, r7, r3
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	b29b      	uxth	r3, r3
 8006620:	029b      	lsls	r3, r3, #10
 8006622:	b29b      	uxth	r3, r3
 8006624:	4313      	orrs	r3, r2
 8006626:	b29a      	uxth	r2, r3
 8006628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662a:	801a      	strh	r2, [r3, #0]
 800662c:	e01a      	b.n	8006664 <USB_EPStartXfer+0x694>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	785b      	ldrb	r3, [r3, #1]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d116      	bne.n	8006664 <USB_EPStartXfer+0x694>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2250      	movs	r2, #80	; 0x50
 800663a:	5a9b      	ldrh	r3, [r3, r2]
 800663c:	b29b      	uxth	r3, r3
 800663e:	001a      	movs	r2, r3
 8006640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006642:	189b      	adds	r3, r3, r2
 8006644:	643b      	str	r3, [r7, #64]	; 0x40
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	00da      	lsls	r2, r3, #3
 800664c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800664e:	18d3      	adds	r3, r2, r3
 8006650:	4a33      	ldr	r2, [pc, #204]	; (8006720 <USB_EPStartXfer+0x750>)
 8006652:	4694      	mov	ip, r2
 8006654:	4463      	add	r3, ip
 8006656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006658:	1d7b      	adds	r3, r7, #5
 800665a:	33ff      	adds	r3, #255	; 0xff
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	b29a      	uxth	r2, r3
 8006660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006662:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006664:	2076      	movs	r0, #118	; 0x76
 8006666:	183b      	adds	r3, r7, r0
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	8952      	ldrh	r2, [r2, #10]
 800666c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	6959      	ldr	r1, [r3, #20]
 8006672:	1d7b      	adds	r3, r7, #5
 8006674:	33ff      	adds	r3, #255	; 0xff
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	b29c      	uxth	r4, r3
 800667a:	183b      	adds	r3, r7, r0
 800667c:	881a      	ldrh	r2, [r3, #0]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	0023      	movs	r3, r4
 8006682:	f000 fdff 	bl	8007284 <USB_WritePMA>
 8006686:	e1b6      	b.n	80069f6 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	1d7a      	adds	r2, r7, #5
 800668e:	32ff      	adds	r2, #255	; 0xff
 8006690:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	18d3      	adds	r3, r2, r3
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29a      	uxth	r2, r3
 80066a0:	2062      	movs	r0, #98	; 0x62
 80066a2:	183b      	adds	r3, r7, r0
 80066a4:	491f      	ldr	r1, [pc, #124]	; (8006724 <USB_EPStartXfer+0x754>)
 80066a6:	400a      	ands	r2, r1
 80066a8:	801a      	strh	r2, [r3, #0]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	18d3      	adds	r3, r2, r3
 80066b4:	183a      	adds	r2, r7, r0
 80066b6:	8812      	ldrh	r2, [r2, #0]
 80066b8:	491b      	ldr	r1, [pc, #108]	; (8006728 <USB_EPStartXfer+0x758>)
 80066ba:	430a      	orrs	r2, r1
 80066bc:	b292      	uxth	r2, r2
 80066be:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2250      	movs	r2, #80	; 0x50
 80066c8:	5a9b      	ldrh	r3, [r3, r2]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	001a      	movs	r2, r3
 80066ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066d0:	189b      	adds	r3, r3, r2
 80066d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	00da      	lsls	r2, r3, #3
 80066da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066dc:	18d3      	adds	r3, r2, r3
 80066de:	4a0e      	ldr	r2, [pc, #56]	; (8006718 <USB_EPStartXfer+0x748>)
 80066e0:	4694      	mov	ip, r2
 80066e2:	4463      	add	r3, ip
 80066e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80066e6:	1d7b      	adds	r3, r7, #5
 80066e8:	33ff      	adds	r3, #255	; 0xff
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066f0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80066f2:	2076      	movs	r0, #118	; 0x76
 80066f4:	183b      	adds	r3, r7, r0
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	8912      	ldrh	r2, [r2, #8]
 80066fa:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	6959      	ldr	r1, [r3, #20]
 8006700:	1d7b      	adds	r3, r7, #5
 8006702:	33ff      	adds	r3, #255	; 0xff
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	b29c      	uxth	r4, r3
 8006708:	183b      	adds	r3, r7, r0
 800670a:	881a      	ldrh	r2, [r3, #0]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	0023      	movs	r3, r4
 8006710:	f000 fdb8 	bl	8007284 <USB_WritePMA>
 8006714:	e16f      	b.n	80069f6 <USB_EPStartXfer+0xa26>
 8006716:	46c0      	nop			; (mov r8, r8)
 8006718:	00000402 	.word	0x00000402
 800671c:	ffff8000 	.word	0xffff8000
 8006720:	00000406 	.word	0x00000406
 8006724:	ffff8e8f 	.word	0xffff8e8f
 8006728:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	6a1a      	ldr	r2, [r3, #32]
 8006730:	1d7b      	adds	r3, r7, #5
 8006732:	33ff      	adds	r3, #255	; 0xff
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	1ad2      	subs	r2, r2, r3
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	18d3      	adds	r3, r2, r3
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b29b      	uxth	r3, r3
 800674a:	001a      	movs	r2, r3
 800674c:	2340      	movs	r3, #64	; 0x40
 800674e:	4013      	ands	r3, r2
 8006750:	d100      	bne.n	8006754 <USB_EPStartXfer+0x784>
 8006752:	e0a4      	b.n	800689e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	673b      	str	r3, [r7, #112]	; 0x70
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	785b      	ldrb	r3, [r3, #1]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d000      	beq.n	8006762 <USB_EPStartXfer+0x792>
 8006760:	e070      	b.n	8006844 <USB_EPStartXfer+0x874>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	66bb      	str	r3, [r7, #104]	; 0x68
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2250      	movs	r2, #80	; 0x50
 800676a:	5a9b      	ldrh	r3, [r3, r2]
 800676c:	b29b      	uxth	r3, r3
 800676e:	001a      	movs	r2, r3
 8006770:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006772:	189b      	adds	r3, r3, r2
 8006774:	66bb      	str	r3, [r7, #104]	; 0x68
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	00da      	lsls	r2, r3, #3
 800677c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800677e:	18d3      	adds	r3, r2, r3
 8006780:	4abc      	ldr	r2, [pc, #752]	; (8006a74 <USB_EPStartXfer+0xaa4>)
 8006782:	4694      	mov	ip, r2
 8006784:	4463      	add	r3, ip
 8006786:	667b      	str	r3, [r7, #100]	; 0x64
 8006788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29b      	uxth	r3, r3
 800678e:	059b      	lsls	r3, r3, #22
 8006790:	0d9b      	lsrs	r3, r3, #22
 8006792:	b29a      	uxth	r2, r3
 8006794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006796:	801a      	strh	r2, [r3, #0]
 8006798:	1d7b      	adds	r3, r7, #5
 800679a:	33ff      	adds	r3, #255	; 0xff
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b3e      	cmp	r3, #62	; 0x3e
 80067a0:	d922      	bls.n	80067e8 <USB_EPStartXfer+0x818>
 80067a2:	1d7b      	adds	r3, r7, #5
 80067a4:	33ff      	adds	r3, #255	; 0xff
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	095b      	lsrs	r3, r3, #5
 80067aa:	21f0      	movs	r1, #240	; 0xf0
 80067ac:	187a      	adds	r2, r7, r1
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	1d7b      	adds	r3, r7, #5
 80067b2:	33ff      	adds	r3, #255	; 0xff
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	221f      	movs	r2, #31
 80067b8:	4013      	ands	r3, r2
 80067ba:	d104      	bne.n	80067c6 <USB_EPStartXfer+0x7f6>
 80067bc:	187b      	adds	r3, r7, r1
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	187a      	adds	r2, r7, r1
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	23f0      	movs	r3, #240	; 0xf0
 80067ce:	18fb      	adds	r3, r7, r3
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	029b      	lsls	r3, r3, #10
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	4313      	orrs	r3, r2
 80067da:	b29b      	uxth	r3, r3
 80067dc:	4aa6      	ldr	r2, [pc, #664]	; (8006a78 <USB_EPStartXfer+0xaa8>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067e4:	801a      	strh	r2, [r3, #0]
 80067e6:	e048      	b.n	800687a <USB_EPStartXfer+0x8aa>
 80067e8:	1d7b      	adds	r3, r7, #5
 80067ea:	33ff      	adds	r3, #255	; 0xff
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d108      	bne.n	8006804 <USB_EPStartXfer+0x834>
 80067f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	4a9f      	ldr	r2, [pc, #636]	; (8006a78 <USB_EPStartXfer+0xaa8>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006800:	801a      	strh	r2, [r3, #0]
 8006802:	e03a      	b.n	800687a <USB_EPStartXfer+0x8aa>
 8006804:	1d7b      	adds	r3, r7, #5
 8006806:	33ff      	adds	r3, #255	; 0xff
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	085b      	lsrs	r3, r3, #1
 800680c:	21f0      	movs	r1, #240	; 0xf0
 800680e:	187a      	adds	r2, r7, r1
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	1d7b      	adds	r3, r7, #5
 8006814:	33ff      	adds	r3, #255	; 0xff
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2201      	movs	r2, #1
 800681a:	4013      	ands	r3, r2
 800681c:	d004      	beq.n	8006828 <USB_EPStartXfer+0x858>
 800681e:	187b      	adds	r3, r7, r1
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3301      	adds	r3, #1
 8006824:	187a      	adds	r2, r7, r1
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	b29a      	uxth	r2, r3
 800682e:	23f0      	movs	r3, #240	; 0xf0
 8006830:	18fb      	adds	r3, r7, r3
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	b29b      	uxth	r3, r3
 8006836:	029b      	lsls	r3, r3, #10
 8006838:	b29b      	uxth	r3, r3
 800683a:	4313      	orrs	r3, r2
 800683c:	b29a      	uxth	r2, r3
 800683e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006840:	801a      	strh	r2, [r3, #0]
 8006842:	e01a      	b.n	800687a <USB_EPStartXfer+0x8aa>
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	785b      	ldrb	r3, [r3, #1]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d116      	bne.n	800687a <USB_EPStartXfer+0x8aa>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2250      	movs	r2, #80	; 0x50
 8006850:	5a9b      	ldrh	r3, [r3, r2]
 8006852:	b29b      	uxth	r3, r3
 8006854:	001a      	movs	r2, r3
 8006856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006858:	189b      	adds	r3, r3, r2
 800685a:	673b      	str	r3, [r7, #112]	; 0x70
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	00da      	lsls	r2, r3, #3
 8006862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006864:	18d3      	adds	r3, r2, r3
 8006866:	4a83      	ldr	r2, [pc, #524]	; (8006a74 <USB_EPStartXfer+0xaa4>)
 8006868:	4694      	mov	ip, r2
 800686a:	4463      	add	r3, ip
 800686c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800686e:	1d7b      	adds	r3, r7, #5
 8006870:	33ff      	adds	r3, #255	; 0xff
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	b29a      	uxth	r2, r3
 8006876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006878:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800687a:	2076      	movs	r0, #118	; 0x76
 800687c:	183b      	adds	r3, r7, r0
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	8952      	ldrh	r2, [r2, #10]
 8006882:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	6959      	ldr	r1, [r3, #20]
 8006888:	1d7b      	adds	r3, r7, #5
 800688a:	33ff      	adds	r3, #255	; 0xff
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	b29c      	uxth	r4, r3
 8006890:	183b      	adds	r3, r7, r0
 8006892:	881a      	ldrh	r2, [r3, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	0023      	movs	r3, r4
 8006898:	f000 fcf4 	bl	8007284 <USB_WritePMA>
 800689c:	e0ab      	b.n	80069f6 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	785b      	ldrb	r3, [r3, #1]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d000      	beq.n	80068a8 <USB_EPStartXfer+0x8d8>
 80068a6:	e070      	b.n	800698a <USB_EPStartXfer+0x9ba>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2250      	movs	r2, #80	; 0x50
 80068b0:	5a9b      	ldrh	r3, [r3, r2]
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	001a      	movs	r2, r3
 80068b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068b8:	189b      	adds	r3, r3, r2
 80068ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	00da      	lsls	r2, r3, #3
 80068c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068c4:	18d3      	adds	r3, r2, r3
 80068c6:	4a6d      	ldr	r2, [pc, #436]	; (8006a7c <USB_EPStartXfer+0xaac>)
 80068c8:	4694      	mov	ip, r2
 80068ca:	4463      	add	r3, ip
 80068cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80068ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	059b      	lsls	r3, r3, #22
 80068d6:	0d9b      	lsrs	r3, r3, #22
 80068d8:	b29a      	uxth	r2, r3
 80068da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068dc:	801a      	strh	r2, [r3, #0]
 80068de:	1d7b      	adds	r3, r7, #5
 80068e0:	33ff      	adds	r3, #255	; 0xff
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b3e      	cmp	r3, #62	; 0x3e
 80068e6:	d922      	bls.n	800692e <USB_EPStartXfer+0x95e>
 80068e8:	1d7b      	adds	r3, r7, #5
 80068ea:	33ff      	adds	r3, #255	; 0xff
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	21ec      	movs	r1, #236	; 0xec
 80068f2:	187a      	adds	r2, r7, r1
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	1d7b      	adds	r3, r7, #5
 80068f8:	33ff      	adds	r3, #255	; 0xff
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	221f      	movs	r2, #31
 80068fe:	4013      	ands	r3, r2
 8006900:	d104      	bne.n	800690c <USB_EPStartXfer+0x93c>
 8006902:	187b      	adds	r3, r7, r1
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3b01      	subs	r3, #1
 8006908:	187a      	adds	r2, r7, r1
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29a      	uxth	r2, r3
 8006912:	23ec      	movs	r3, #236	; 0xec
 8006914:	18fb      	adds	r3, r7, r3
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	b29b      	uxth	r3, r3
 800691a:	029b      	lsls	r3, r3, #10
 800691c:	b29b      	uxth	r3, r3
 800691e:	4313      	orrs	r3, r2
 8006920:	b29b      	uxth	r3, r3
 8006922:	4a55      	ldr	r2, [pc, #340]	; (8006a78 <USB_EPStartXfer+0xaa8>)
 8006924:	4313      	orrs	r3, r2
 8006926:	b29a      	uxth	r2, r3
 8006928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800692a:	801a      	strh	r2, [r3, #0]
 800692c:	e052      	b.n	80069d4 <USB_EPStartXfer+0xa04>
 800692e:	1d7b      	adds	r3, r7, #5
 8006930:	33ff      	adds	r3, #255	; 0xff
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d108      	bne.n	800694a <USB_EPStartXfer+0x97a>
 8006938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	4a4e      	ldr	r2, [pc, #312]	; (8006a78 <USB_EPStartXfer+0xaa8>)
 8006940:	4313      	orrs	r3, r2
 8006942:	b29a      	uxth	r2, r3
 8006944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006946:	801a      	strh	r2, [r3, #0]
 8006948:	e044      	b.n	80069d4 <USB_EPStartXfer+0xa04>
 800694a:	1d7b      	adds	r3, r7, #5
 800694c:	33ff      	adds	r3, #255	; 0xff
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	085b      	lsrs	r3, r3, #1
 8006952:	21ec      	movs	r1, #236	; 0xec
 8006954:	187a      	adds	r2, r7, r1
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	1d7b      	adds	r3, r7, #5
 800695a:	33ff      	adds	r3, #255	; 0xff
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2201      	movs	r2, #1
 8006960:	4013      	ands	r3, r2
 8006962:	d004      	beq.n	800696e <USB_EPStartXfer+0x99e>
 8006964:	187b      	adds	r3, r7, r1
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3301      	adds	r3, #1
 800696a:	187a      	adds	r2, r7, r1
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29a      	uxth	r2, r3
 8006974:	23ec      	movs	r3, #236	; 0xec
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	b29b      	uxth	r3, r3
 800697c:	029b      	lsls	r3, r3, #10
 800697e:	b29b      	uxth	r3, r3
 8006980:	4313      	orrs	r3, r2
 8006982:	b29a      	uxth	r2, r3
 8006984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006986:	801a      	strh	r2, [r3, #0]
 8006988:	e024      	b.n	80069d4 <USB_EPStartXfer+0xa04>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	785b      	ldrb	r3, [r3, #1]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d120      	bne.n	80069d4 <USB_EPStartXfer+0xa04>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2184      	movs	r1, #132	; 0x84
 8006996:	187a      	adds	r2, r7, r1
 8006998:	6013      	str	r3, [r2, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2250      	movs	r2, #80	; 0x50
 800699e:	5a9b      	ldrh	r3, [r3, r2]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	001a      	movs	r2, r3
 80069a4:	187b      	adds	r3, r7, r1
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	189b      	adds	r3, r3, r2
 80069aa:	187a      	adds	r2, r7, r1
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	00da      	lsls	r2, r3, #3
 80069b4:	187b      	adds	r3, r7, r1
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	18d3      	adds	r3, r2, r3
 80069ba:	4a30      	ldr	r2, [pc, #192]	; (8006a7c <USB_EPStartXfer+0xaac>)
 80069bc:	4694      	mov	ip, r2
 80069be:	4463      	add	r3, ip
 80069c0:	2180      	movs	r1, #128	; 0x80
 80069c2:	187a      	adds	r2, r7, r1
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	1d7b      	adds	r3, r7, #5
 80069c8:	33ff      	adds	r3, #255	; 0xff
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	187b      	adds	r3, r7, r1
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80069d4:	2076      	movs	r0, #118	; 0x76
 80069d6:	183b      	adds	r3, r7, r0
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	8912      	ldrh	r2, [r2, #8]
 80069dc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	6959      	ldr	r1, [r3, #20]
 80069e2:	1d7b      	adds	r3, r7, #5
 80069e4:	33ff      	adds	r3, #255	; 0xff
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	b29c      	uxth	r4, r3
 80069ea:	183b      	adds	r3, r7, r0
 80069ec:	881a      	ldrh	r2, [r3, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	0023      	movs	r3, r4
 80069f2:	f000 fc47 	bl	8007284 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	18d3      	adds	r3, r2, r3
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	200a      	movs	r0, #10
 8006a06:	183b      	adds	r3, r7, r0
 8006a08:	491d      	ldr	r1, [pc, #116]	; (8006a80 <USB_EPStartXfer+0xab0>)
 8006a0a:	400a      	ands	r2, r1
 8006a0c:	801a      	strh	r2, [r3, #0]
 8006a0e:	183b      	adds	r3, r7, r0
 8006a10:	183a      	adds	r2, r7, r0
 8006a12:	8812      	ldrh	r2, [r2, #0]
 8006a14:	2110      	movs	r1, #16
 8006a16:	404a      	eors	r2, r1
 8006a18:	801a      	strh	r2, [r3, #0]
 8006a1a:	183b      	adds	r3, r7, r0
 8006a1c:	183a      	adds	r2, r7, r0
 8006a1e:	8812      	ldrh	r2, [r2, #0]
 8006a20:	2120      	movs	r1, #32
 8006a22:	404a      	eors	r2, r1
 8006a24:	801a      	strh	r2, [r3, #0]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	18d3      	adds	r3, r2, r3
 8006a30:	183a      	adds	r2, r7, r0
 8006a32:	8812      	ldrh	r2, [r2, #0]
 8006a34:	4913      	ldr	r1, [pc, #76]	; (8006a84 <USB_EPStartXfer+0xab4>)
 8006a36:	430a      	orrs	r2, r1
 8006a38:	b292      	uxth	r2, r2
 8006a3a:	801a      	strh	r2, [r3, #0]
 8006a3c:	f000 fbf4 	bl	8007228 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	7b1b      	ldrb	r3, [r3, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d000      	beq.n	8006a4a <USB_EPStartXfer+0xa7a>
 8006a48:	e0a9      	b.n	8006b9e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	699a      	ldr	r2, [r3, #24]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d918      	bls.n	8006a88 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	1d7a      	adds	r2, r7, #5
 8006a5c:	32ff      	adds	r2, #255	; 0xff
 8006a5e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	699a      	ldr	r2, [r3, #24]
 8006a64:	1d7b      	adds	r3, r7, #5
 8006a66:	33ff      	adds	r3, #255	; 0xff
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	1ad2      	subs	r2, r2, r3
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	619a      	str	r2, [r3, #24]
 8006a70:	e012      	b.n	8006a98 <USB_EPStartXfer+0xac8>
 8006a72:	46c0      	nop			; (mov r8, r8)
 8006a74:	00000406 	.word	0x00000406
 8006a78:	ffff8000 	.word	0xffff8000
 8006a7c:	00000402 	.word	0x00000402
 8006a80:	ffff8fbf 	.word	0xffff8fbf
 8006a84:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	1d7a      	adds	r2, r7, #5
 8006a8e:	32ff      	adds	r2, #255	; 0xff
 8006a90:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2200      	movs	r2, #0
 8006a96:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2190      	movs	r1, #144	; 0x90
 8006a9c:	187a      	adds	r2, r7, r1
 8006a9e:	6013      	str	r3, [r2, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2250      	movs	r2, #80	; 0x50
 8006aa4:	5a9b      	ldrh	r3, [r3, r2]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	001a      	movs	r2, r3
 8006aaa:	187b      	adds	r3, r7, r1
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	189b      	adds	r3, r3, r2
 8006ab0:	187a      	adds	r2, r7, r1
 8006ab2:	6013      	str	r3, [r2, #0]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	00da      	lsls	r2, r3, #3
 8006aba:	187b      	adds	r3, r7, r1
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	18d3      	adds	r3, r2, r3
 8006ac0:	4acf      	ldr	r2, [pc, #828]	; (8006e00 <USB_EPStartXfer+0xe30>)
 8006ac2:	4694      	mov	ip, r2
 8006ac4:	4463      	add	r3, ip
 8006ac6:	218c      	movs	r1, #140	; 0x8c
 8006ac8:	187a      	adds	r2, r7, r1
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	187b      	adds	r3, r7, r1
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	881b      	ldrh	r3, [r3, #0]
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	059b      	lsls	r3, r3, #22
 8006ad6:	0d9b      	lsrs	r3, r3, #22
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	187b      	adds	r3, r7, r1
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	801a      	strh	r2, [r3, #0]
 8006ae0:	1d7b      	adds	r3, r7, #5
 8006ae2:	33ff      	adds	r3, #255	; 0xff
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b3e      	cmp	r3, #62	; 0x3e
 8006ae8:	d925      	bls.n	8006b36 <USB_EPStartXfer+0xb66>
 8006aea:	1d7b      	adds	r3, r7, #5
 8006aec:	33ff      	adds	r3, #255	; 0xff
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	095b      	lsrs	r3, r3, #5
 8006af2:	21e8      	movs	r1, #232	; 0xe8
 8006af4:	187a      	adds	r2, r7, r1
 8006af6:	6013      	str	r3, [r2, #0]
 8006af8:	1d7b      	adds	r3, r7, #5
 8006afa:	33ff      	adds	r3, #255	; 0xff
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	221f      	movs	r2, #31
 8006b00:	4013      	ands	r3, r2
 8006b02:	d104      	bne.n	8006b0e <USB_EPStartXfer+0xb3e>
 8006b04:	187b      	adds	r3, r7, r1
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	187a      	adds	r2, r7, r1
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	218c      	movs	r1, #140	; 0x8c
 8006b10:	187b      	adds	r3, r7, r1
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	23e8      	movs	r3, #232	; 0xe8
 8006b1a:	18fb      	adds	r3, r7, r3
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	029b      	lsls	r3, r3, #10
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	4313      	orrs	r3, r2
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	4ab6      	ldr	r2, [pc, #728]	; (8006e04 <USB_EPStartXfer+0xe34>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	187b      	adds	r3, r7, r1
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	801a      	strh	r2, [r3, #0]
 8006b34:	e353      	b.n	80071de <USB_EPStartXfer+0x120e>
 8006b36:	1d7b      	adds	r3, r7, #5
 8006b38:	33ff      	adds	r3, #255	; 0xff
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10b      	bne.n	8006b58 <USB_EPStartXfer+0xb88>
 8006b40:	218c      	movs	r1, #140	; 0x8c
 8006b42:	187b      	adds	r3, r7, r1
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	4aae      	ldr	r2, [pc, #696]	; (8006e04 <USB_EPStartXfer+0xe34>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	187b      	adds	r3, r7, r1
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	801a      	strh	r2, [r3, #0]
 8006b56:	e342      	b.n	80071de <USB_EPStartXfer+0x120e>
 8006b58:	1d7b      	adds	r3, r7, #5
 8006b5a:	33ff      	adds	r3, #255	; 0xff
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	085b      	lsrs	r3, r3, #1
 8006b60:	21e8      	movs	r1, #232	; 0xe8
 8006b62:	187a      	adds	r2, r7, r1
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	1d7b      	adds	r3, r7, #5
 8006b68:	33ff      	adds	r3, #255	; 0xff
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	4013      	ands	r3, r2
 8006b70:	d004      	beq.n	8006b7c <USB_EPStartXfer+0xbac>
 8006b72:	187b      	adds	r3, r7, r1
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3301      	adds	r3, #1
 8006b78:	187a      	adds	r2, r7, r1
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	218c      	movs	r1, #140	; 0x8c
 8006b7e:	187b      	adds	r3, r7, r1
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	23e8      	movs	r3, #232	; 0xe8
 8006b88:	18fb      	adds	r3, r7, r3
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	029b      	lsls	r3, r3, #10
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	4313      	orrs	r3, r2
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	187b      	adds	r3, r7, r1
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	801a      	strh	r2, [r3, #0]
 8006b9c:	e31f      	b.n	80071de <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	78db      	ldrb	r3, [r3, #3]
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d000      	beq.n	8006ba8 <USB_EPStartXfer+0xbd8>
 8006ba6:	e191      	b.n	8006ecc <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	785b      	ldrb	r3, [r3, #1]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d000      	beq.n	8006bb2 <USB_EPStartXfer+0xbe2>
 8006bb0:	e07c      	b.n	8006cac <USB_EPStartXfer+0xcdc>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	21ac      	movs	r1, #172	; 0xac
 8006bb6:	187a      	adds	r2, r7, r1
 8006bb8:	6013      	str	r3, [r2, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2250      	movs	r2, #80	; 0x50
 8006bbe:	5a9b      	ldrh	r3, [r3, r2]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	001a      	movs	r2, r3
 8006bc4:	187b      	adds	r3, r7, r1
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	189b      	adds	r3, r3, r2
 8006bca:	187a      	adds	r2, r7, r1
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	00da      	lsls	r2, r3, #3
 8006bd4:	187b      	adds	r3, r7, r1
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	18d3      	adds	r3, r2, r3
 8006bda:	4a8b      	ldr	r2, [pc, #556]	; (8006e08 <USB_EPStartXfer+0xe38>)
 8006bdc:	4694      	mov	ip, r2
 8006bde:	4463      	add	r3, ip
 8006be0:	21a8      	movs	r1, #168	; 0xa8
 8006be2:	187a      	adds	r2, r7, r1
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	187b      	adds	r3, r7, r1
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	059b      	lsls	r3, r3, #22
 8006bf0:	0d9b      	lsrs	r3, r3, #22
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	187b      	adds	r3, r7, r1
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	801a      	strh	r2, [r3, #0]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	2b3e      	cmp	r3, #62	; 0x3e
 8006c00:	d923      	bls.n	8006c4a <USB_EPStartXfer+0xc7a>
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	095b      	lsrs	r3, r3, #5
 8006c08:	21e4      	movs	r1, #228	; 0xe4
 8006c0a:	187a      	adds	r2, r7, r1
 8006c0c:	6013      	str	r3, [r2, #0]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	221f      	movs	r2, #31
 8006c14:	4013      	ands	r3, r2
 8006c16:	d104      	bne.n	8006c22 <USB_EPStartXfer+0xc52>
 8006c18:	187b      	adds	r3, r7, r1
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	187a      	adds	r2, r7, r1
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	21a8      	movs	r1, #168	; 0xa8
 8006c24:	187b      	adds	r3, r7, r1
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	23e4      	movs	r3, #228	; 0xe4
 8006c2e:	18fb      	adds	r3, r7, r3
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	029b      	lsls	r3, r3, #10
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	4a71      	ldr	r2, [pc, #452]	; (8006e04 <USB_EPStartXfer+0xe34>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	187b      	adds	r3, r7, r1
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	801a      	strh	r2, [r3, #0]
 8006c48:	e054      	b.n	8006cf4 <USB_EPStartXfer+0xd24>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10b      	bne.n	8006c6a <USB_EPStartXfer+0xc9a>
 8006c52:	21a8      	movs	r1, #168	; 0xa8
 8006c54:	187b      	adds	r3, r7, r1
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	4a69      	ldr	r2, [pc, #420]	; (8006e04 <USB_EPStartXfer+0xe34>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	187b      	adds	r3, r7, r1
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	801a      	strh	r2, [r3, #0]
 8006c68:	e044      	b.n	8006cf4 <USB_EPStartXfer+0xd24>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	085b      	lsrs	r3, r3, #1
 8006c70:	21e4      	movs	r1, #228	; 0xe4
 8006c72:	187a      	adds	r2, r7, r1
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	d004      	beq.n	8006c8a <USB_EPStartXfer+0xcba>
 8006c80:	187b      	adds	r3, r7, r1
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3301      	adds	r3, #1
 8006c86:	187a      	adds	r2, r7, r1
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	21a8      	movs	r1, #168	; 0xa8
 8006c8c:	187b      	adds	r3, r7, r1
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	23e4      	movs	r3, #228	; 0xe4
 8006c96:	18fb      	adds	r3, r7, r3
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	029b      	lsls	r3, r3, #10
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	187b      	adds	r3, r7, r1
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	801a      	strh	r2, [r3, #0]
 8006caa:	e023      	b.n	8006cf4 <USB_EPStartXfer+0xd24>
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	785b      	ldrb	r3, [r3, #1]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d11f      	bne.n	8006cf4 <USB_EPStartXfer+0xd24>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	21b4      	movs	r1, #180	; 0xb4
 8006cb8:	187a      	adds	r2, r7, r1
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2250      	movs	r2, #80	; 0x50
 8006cc0:	5a9b      	ldrh	r3, [r3, r2]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	001a      	movs	r2, r3
 8006cc6:	187b      	adds	r3, r7, r1
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	189b      	adds	r3, r3, r2
 8006ccc:	187a      	adds	r2, r7, r1
 8006cce:	6013      	str	r3, [r2, #0]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	00da      	lsls	r2, r3, #3
 8006cd6:	187b      	adds	r3, r7, r1
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	18d3      	adds	r3, r2, r3
 8006cdc:	4a4a      	ldr	r2, [pc, #296]	; (8006e08 <USB_EPStartXfer+0xe38>)
 8006cde:	4694      	mov	ip, r2
 8006ce0:	4463      	add	r3, ip
 8006ce2:	21b0      	movs	r1, #176	; 0xb0
 8006ce4:	187a      	adds	r2, r7, r1
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	187b      	adds	r3, r7, r1
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	801a      	strh	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	22a4      	movs	r2, #164	; 0xa4
 8006cf8:	18ba      	adds	r2, r7, r2
 8006cfa:	6013      	str	r3, [r2, #0]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	785b      	ldrb	r3, [r3, #1]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d000      	beq.n	8006d06 <USB_EPStartXfer+0xd36>
 8006d04:	e082      	b.n	8006e0c <USB_EPStartXfer+0xe3c>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	219c      	movs	r1, #156	; 0x9c
 8006d0a:	187a      	adds	r2, r7, r1
 8006d0c:	6013      	str	r3, [r2, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2250      	movs	r2, #80	; 0x50
 8006d12:	5a9b      	ldrh	r3, [r3, r2]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	001a      	movs	r2, r3
 8006d18:	187b      	adds	r3, r7, r1
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	189b      	adds	r3, r3, r2
 8006d1e:	187a      	adds	r2, r7, r1
 8006d20:	6013      	str	r3, [r2, #0]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	00da      	lsls	r2, r3, #3
 8006d28:	187b      	adds	r3, r7, r1
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	18d3      	adds	r3, r2, r3
 8006d2e:	4a34      	ldr	r2, [pc, #208]	; (8006e00 <USB_EPStartXfer+0xe30>)
 8006d30:	4694      	mov	ip, r2
 8006d32:	4463      	add	r3, ip
 8006d34:	2198      	movs	r1, #152	; 0x98
 8006d36:	187a      	adds	r2, r7, r1
 8006d38:	6013      	str	r3, [r2, #0]
 8006d3a:	187b      	adds	r3, r7, r1
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	059b      	lsls	r3, r3, #22
 8006d44:	0d9b      	lsrs	r3, r3, #22
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	187b      	adds	r3, r7, r1
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	801a      	strh	r2, [r3, #0]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	2b3e      	cmp	r3, #62	; 0x3e
 8006d54:	d923      	bls.n	8006d9e <USB_EPStartXfer+0xdce>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	095b      	lsrs	r3, r3, #5
 8006d5c:	21e0      	movs	r1, #224	; 0xe0
 8006d5e:	187a      	adds	r2, r7, r1
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	221f      	movs	r2, #31
 8006d68:	4013      	ands	r3, r2
 8006d6a:	d104      	bne.n	8006d76 <USB_EPStartXfer+0xda6>
 8006d6c:	187b      	adds	r3, r7, r1
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3b01      	subs	r3, #1
 8006d72:	187a      	adds	r2, r7, r1
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	2198      	movs	r1, #152	; 0x98
 8006d78:	187b      	adds	r3, r7, r1
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	23e0      	movs	r3, #224	; 0xe0
 8006d82:	18fb      	adds	r3, r7, r3
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	029b      	lsls	r3, r3, #10
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	4a1c      	ldr	r2, [pc, #112]	; (8006e04 <USB_EPStartXfer+0xe34>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	187b      	adds	r3, r7, r1
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	801a      	strh	r2, [r3, #0]
 8006d9c:	e057      	b.n	8006e4e <USB_EPStartXfer+0xe7e>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10b      	bne.n	8006dbe <USB_EPStartXfer+0xdee>
 8006da6:	2198      	movs	r1, #152	; 0x98
 8006da8:	187b      	adds	r3, r7, r1
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	4a14      	ldr	r2, [pc, #80]	; (8006e04 <USB_EPStartXfer+0xe34>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	187b      	adds	r3, r7, r1
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	801a      	strh	r2, [r3, #0]
 8006dbc:	e047      	b.n	8006e4e <USB_EPStartXfer+0xe7e>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	085b      	lsrs	r3, r3, #1
 8006dc4:	21e0      	movs	r1, #224	; 0xe0
 8006dc6:	187a      	adds	r2, r7, r1
 8006dc8:	6013      	str	r3, [r2, #0]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	d004      	beq.n	8006dde <USB_EPStartXfer+0xe0e>
 8006dd4:	187b      	adds	r3, r7, r1
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	187a      	adds	r2, r7, r1
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	2198      	movs	r1, #152	; 0x98
 8006de0:	187b      	adds	r3, r7, r1
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	23e0      	movs	r3, #224	; 0xe0
 8006dea:	18fb      	adds	r3, r7, r3
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	029b      	lsls	r3, r3, #10
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	4313      	orrs	r3, r2
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	187b      	adds	r3, r7, r1
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	801a      	strh	r2, [r3, #0]
 8006dfe:	e026      	b.n	8006e4e <USB_EPStartXfer+0xe7e>
 8006e00:	00000406 	.word	0x00000406
 8006e04:	ffff8000 	.word	0xffff8000
 8006e08:	00000402 	.word	0x00000402
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	785b      	ldrb	r3, [r3, #1]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d11c      	bne.n	8006e4e <USB_EPStartXfer+0xe7e>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2250      	movs	r2, #80	; 0x50
 8006e18:	5a9b      	ldrh	r3, [r3, r2]
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	001a      	movs	r2, r3
 8006e1e:	21a4      	movs	r1, #164	; 0xa4
 8006e20:	187b      	adds	r3, r7, r1
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	189b      	adds	r3, r3, r2
 8006e26:	187a      	adds	r2, r7, r1
 8006e28:	6013      	str	r3, [r2, #0]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	00da      	lsls	r2, r3, #3
 8006e30:	187b      	adds	r3, r7, r1
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	18d3      	adds	r3, r2, r3
 8006e36:	4ad2      	ldr	r2, [pc, #840]	; (8007180 <USB_EPStartXfer+0x11b0>)
 8006e38:	4694      	mov	ip, r2
 8006e3a:	4463      	add	r3, ip
 8006e3c:	21a0      	movs	r1, #160	; 0xa0
 8006e3e:	187a      	adds	r2, r7, r1
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	187b      	adds	r3, r7, r1
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d100      	bne.n	8006e58 <USB_EPStartXfer+0xe88>
 8006e56:	e1c2      	b.n	80071de <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	18d2      	adds	r2, r2, r3
 8006e62:	2196      	movs	r1, #150	; 0x96
 8006e64:	187b      	adds	r3, r7, r1
 8006e66:	8812      	ldrh	r2, [r2, #0]
 8006e68:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e6a:	187b      	adds	r3, r7, r1
 8006e6c:	881a      	ldrh	r2, [r3, #0]
 8006e6e:	2380      	movs	r3, #128	; 0x80
 8006e70:	01db      	lsls	r3, r3, #7
 8006e72:	4013      	ands	r3, r2
 8006e74:	d004      	beq.n	8006e80 <USB_EPStartXfer+0xeb0>
 8006e76:	187b      	adds	r3, r7, r1
 8006e78:	881b      	ldrh	r3, [r3, #0]
 8006e7a:	2240      	movs	r2, #64	; 0x40
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	d10d      	bne.n	8006e9c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e80:	2196      	movs	r1, #150	; 0x96
 8006e82:	187b      	adds	r3, r7, r1
 8006e84:	881a      	ldrh	r2, [r3, #0]
 8006e86:	2380      	movs	r3, #128	; 0x80
 8006e88:	01db      	lsls	r3, r3, #7
 8006e8a:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e8c:	d000      	beq.n	8006e90 <USB_EPStartXfer+0xec0>
 8006e8e:	e1a6      	b.n	80071de <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e90:	187b      	adds	r3, r7, r1
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	2240      	movs	r2, #64	; 0x40
 8006e96:	4013      	ands	r3, r2
 8006e98:	d000      	beq.n	8006e9c <USB_EPStartXfer+0xecc>
 8006e9a:	e1a0      	b.n	80071de <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	18d3      	adds	r3, r2, r3
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	2094      	movs	r0, #148	; 0x94
 8006eac:	183b      	adds	r3, r7, r0
 8006eae:	49b5      	ldr	r1, [pc, #724]	; (8007184 <USB_EPStartXfer+0x11b4>)
 8006eb0:	400a      	ands	r2, r1
 8006eb2:	801a      	strh	r2, [r3, #0]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	18d3      	adds	r3, r2, r3
 8006ebe:	183a      	adds	r2, r7, r0
 8006ec0:	8812      	ldrh	r2, [r2, #0]
 8006ec2:	49b1      	ldr	r1, [pc, #708]	; (8007188 <USB_EPStartXfer+0x11b8>)
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	b292      	uxth	r2, r2
 8006ec8:	801a      	strh	r2, [r3, #0]
 8006eca:	e188      	b.n	80071de <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	78db      	ldrb	r3, [r3, #3]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d000      	beq.n	8006ed6 <USB_EPStartXfer+0xf06>
 8006ed4:	e181      	b.n	80071da <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	699a      	ldr	r2, [r3, #24]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d90d      	bls.n	8006efe <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	1d7a      	adds	r2, r7, #5
 8006ee8:	32ff      	adds	r2, #255	; 0xff
 8006eea:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	699a      	ldr	r2, [r3, #24]
 8006ef0:	1d7b      	adds	r3, r7, #5
 8006ef2:	33ff      	adds	r3, #255	; 0xff
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	1ad2      	subs	r2, r2, r3
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	619a      	str	r2, [r3, #24]
 8006efc:	e007      	b.n	8006f0e <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	1d7a      	adds	r2, r7, #5
 8006f04:	32ff      	adds	r2, #255	; 0xff
 8006f06:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	785b      	ldrb	r3, [r3, #1]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d000      	beq.n	8006f18 <USB_EPStartXfer+0xf48>
 8006f16:	e082      	b.n	800701e <USB_EPStartXfer+0x104e>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	21cc      	movs	r1, #204	; 0xcc
 8006f1c:	187a      	adds	r2, r7, r1
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2250      	movs	r2, #80	; 0x50
 8006f24:	5a9b      	ldrh	r3, [r3, r2]
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	001a      	movs	r2, r3
 8006f2a:	187b      	adds	r3, r7, r1
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	189b      	adds	r3, r3, r2
 8006f30:	187a      	adds	r2, r7, r1
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	00da      	lsls	r2, r3, #3
 8006f3a:	187b      	adds	r3, r7, r1
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	18d3      	adds	r3, r2, r3
 8006f40:	4a92      	ldr	r2, [pc, #584]	; (800718c <USB_EPStartXfer+0x11bc>)
 8006f42:	4694      	mov	ip, r2
 8006f44:	4463      	add	r3, ip
 8006f46:	21c8      	movs	r1, #200	; 0xc8
 8006f48:	187a      	adds	r2, r7, r1
 8006f4a:	6013      	str	r3, [r2, #0]
 8006f4c:	187b      	adds	r3, r7, r1
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	059b      	lsls	r3, r3, #22
 8006f56:	0d9b      	lsrs	r3, r3, #22
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	187b      	adds	r3, r7, r1
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	801a      	strh	r2, [r3, #0]
 8006f60:	1d7b      	adds	r3, r7, #5
 8006f62:	33ff      	adds	r3, #255	; 0xff
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b3e      	cmp	r3, #62	; 0x3e
 8006f68:	d925      	bls.n	8006fb6 <USB_EPStartXfer+0xfe6>
 8006f6a:	1d7b      	adds	r3, r7, #5
 8006f6c:	33ff      	adds	r3, #255	; 0xff
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	095b      	lsrs	r3, r3, #5
 8006f72:	21dc      	movs	r1, #220	; 0xdc
 8006f74:	187a      	adds	r2, r7, r1
 8006f76:	6013      	str	r3, [r2, #0]
 8006f78:	1d7b      	adds	r3, r7, #5
 8006f7a:	33ff      	adds	r3, #255	; 0xff
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	221f      	movs	r2, #31
 8006f80:	4013      	ands	r3, r2
 8006f82:	d104      	bne.n	8006f8e <USB_EPStartXfer+0xfbe>
 8006f84:	187b      	adds	r3, r7, r1
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	187a      	adds	r2, r7, r1
 8006f8c:	6013      	str	r3, [r2, #0]
 8006f8e:	21c8      	movs	r1, #200	; 0xc8
 8006f90:	187b      	adds	r3, r7, r1
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	23dc      	movs	r3, #220	; 0xdc
 8006f9a:	18fb      	adds	r3, r7, r3
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	029b      	lsls	r3, r3, #10
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	4a79      	ldr	r2, [pc, #484]	; (8007190 <USB_EPStartXfer+0x11c0>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	187b      	adds	r3, r7, r1
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	801a      	strh	r2, [r3, #0]
 8006fb4:	e058      	b.n	8007068 <USB_EPStartXfer+0x1098>
 8006fb6:	1d7b      	adds	r3, r7, #5
 8006fb8:	33ff      	adds	r3, #255	; 0xff
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10b      	bne.n	8006fd8 <USB_EPStartXfer+0x1008>
 8006fc0:	21c8      	movs	r1, #200	; 0xc8
 8006fc2:	187b      	adds	r3, r7, r1
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	4a71      	ldr	r2, [pc, #452]	; (8007190 <USB_EPStartXfer+0x11c0>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	187b      	adds	r3, r7, r1
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	801a      	strh	r2, [r3, #0]
 8006fd6:	e047      	b.n	8007068 <USB_EPStartXfer+0x1098>
 8006fd8:	1d7b      	adds	r3, r7, #5
 8006fda:	33ff      	adds	r3, #255	; 0xff
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	085b      	lsrs	r3, r3, #1
 8006fe0:	21dc      	movs	r1, #220	; 0xdc
 8006fe2:	187a      	adds	r2, r7, r1
 8006fe4:	6013      	str	r3, [r2, #0]
 8006fe6:	1d7b      	adds	r3, r7, #5
 8006fe8:	33ff      	adds	r3, #255	; 0xff
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2201      	movs	r2, #1
 8006fee:	4013      	ands	r3, r2
 8006ff0:	d004      	beq.n	8006ffc <USB_EPStartXfer+0x102c>
 8006ff2:	187b      	adds	r3, r7, r1
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	187a      	adds	r2, r7, r1
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	21c8      	movs	r1, #200	; 0xc8
 8006ffe:	187b      	adds	r3, r7, r1
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	b29a      	uxth	r2, r3
 8007006:	23dc      	movs	r3, #220	; 0xdc
 8007008:	18fb      	adds	r3, r7, r3
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	b29b      	uxth	r3, r3
 800700e:	029b      	lsls	r3, r3, #10
 8007010:	b29b      	uxth	r3, r3
 8007012:	4313      	orrs	r3, r2
 8007014:	b29a      	uxth	r2, r3
 8007016:	187b      	adds	r3, r7, r1
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	801a      	strh	r2, [r3, #0]
 800701c:	e024      	b.n	8007068 <USB_EPStartXfer+0x1098>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	785b      	ldrb	r3, [r3, #1]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d120      	bne.n	8007068 <USB_EPStartXfer+0x1098>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	21d4      	movs	r1, #212	; 0xd4
 800702a:	187a      	adds	r2, r7, r1
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2250      	movs	r2, #80	; 0x50
 8007032:	5a9b      	ldrh	r3, [r3, r2]
 8007034:	b29b      	uxth	r3, r3
 8007036:	001a      	movs	r2, r3
 8007038:	187b      	adds	r3, r7, r1
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	189b      	adds	r3, r3, r2
 800703e:	187a      	adds	r2, r7, r1
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	00da      	lsls	r2, r3, #3
 8007048:	187b      	adds	r3, r7, r1
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	18d3      	adds	r3, r2, r3
 800704e:	4a4f      	ldr	r2, [pc, #316]	; (800718c <USB_EPStartXfer+0x11bc>)
 8007050:	4694      	mov	ip, r2
 8007052:	4463      	add	r3, ip
 8007054:	21d0      	movs	r1, #208	; 0xd0
 8007056:	187a      	adds	r2, r7, r1
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	1d7b      	adds	r3, r7, #5
 800705c:	33ff      	adds	r3, #255	; 0xff
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	b29a      	uxth	r2, r3
 8007062:	187b      	adds	r3, r7, r1
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	801a      	strh	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	22c4      	movs	r2, #196	; 0xc4
 800706c:	18ba      	adds	r2, r7, r2
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	785b      	ldrb	r3, [r3, #1]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d000      	beq.n	800707a <USB_EPStartXfer+0x10aa>
 8007078:	e08c      	b.n	8007194 <USB_EPStartXfer+0x11c4>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	21bc      	movs	r1, #188	; 0xbc
 800707e:	187a      	adds	r2, r7, r1
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2250      	movs	r2, #80	; 0x50
 8007086:	5a9b      	ldrh	r3, [r3, r2]
 8007088:	b29b      	uxth	r3, r3
 800708a:	001a      	movs	r2, r3
 800708c:	187b      	adds	r3, r7, r1
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	189b      	adds	r3, r3, r2
 8007092:	187a      	adds	r2, r7, r1
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	00da      	lsls	r2, r3, #3
 800709c:	187b      	adds	r3, r7, r1
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	18d3      	adds	r3, r2, r3
 80070a2:	4a37      	ldr	r2, [pc, #220]	; (8007180 <USB_EPStartXfer+0x11b0>)
 80070a4:	4694      	mov	ip, r2
 80070a6:	4463      	add	r3, ip
 80070a8:	21b8      	movs	r1, #184	; 0xb8
 80070aa:	187a      	adds	r2, r7, r1
 80070ac:	6013      	str	r3, [r2, #0]
 80070ae:	187b      	adds	r3, r7, r1
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	059b      	lsls	r3, r3, #22
 80070b8:	0d9b      	lsrs	r3, r3, #22
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	187b      	adds	r3, r7, r1
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	801a      	strh	r2, [r3, #0]
 80070c2:	1d7b      	adds	r3, r7, #5
 80070c4:	33ff      	adds	r3, #255	; 0xff
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b3e      	cmp	r3, #62	; 0x3e
 80070ca:	d925      	bls.n	8007118 <USB_EPStartXfer+0x1148>
 80070cc:	1d7b      	adds	r3, r7, #5
 80070ce:	33ff      	adds	r3, #255	; 0xff
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	095b      	lsrs	r3, r3, #5
 80070d4:	21d8      	movs	r1, #216	; 0xd8
 80070d6:	187a      	adds	r2, r7, r1
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	1d7b      	adds	r3, r7, #5
 80070dc:	33ff      	adds	r3, #255	; 0xff
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	221f      	movs	r2, #31
 80070e2:	4013      	ands	r3, r2
 80070e4:	d104      	bne.n	80070f0 <USB_EPStartXfer+0x1120>
 80070e6:	187b      	adds	r3, r7, r1
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	187a      	adds	r2, r7, r1
 80070ee:	6013      	str	r3, [r2, #0]
 80070f0:	21b8      	movs	r1, #184	; 0xb8
 80070f2:	187b      	adds	r3, r7, r1
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	23d8      	movs	r3, #216	; 0xd8
 80070fc:	18fb      	adds	r3, r7, r3
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	b29b      	uxth	r3, r3
 8007102:	029b      	lsls	r3, r3, #10
 8007104:	b29b      	uxth	r3, r3
 8007106:	4313      	orrs	r3, r2
 8007108:	b29b      	uxth	r3, r3
 800710a:	4a21      	ldr	r2, [pc, #132]	; (8007190 <USB_EPStartXfer+0x11c0>)
 800710c:	4313      	orrs	r3, r2
 800710e:	b29a      	uxth	r2, r3
 8007110:	187b      	adds	r3, r7, r1
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	801a      	strh	r2, [r3, #0]
 8007116:	e062      	b.n	80071de <USB_EPStartXfer+0x120e>
 8007118:	1d7b      	adds	r3, r7, #5
 800711a:	33ff      	adds	r3, #255	; 0xff
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10b      	bne.n	800713a <USB_EPStartXfer+0x116a>
 8007122:	21b8      	movs	r1, #184	; 0xb8
 8007124:	187b      	adds	r3, r7, r1
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	b29b      	uxth	r3, r3
 800712c:	4a18      	ldr	r2, [pc, #96]	; (8007190 <USB_EPStartXfer+0x11c0>)
 800712e:	4313      	orrs	r3, r2
 8007130:	b29a      	uxth	r2, r3
 8007132:	187b      	adds	r3, r7, r1
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	801a      	strh	r2, [r3, #0]
 8007138:	e051      	b.n	80071de <USB_EPStartXfer+0x120e>
 800713a:	1d7b      	adds	r3, r7, #5
 800713c:	33ff      	adds	r3, #255	; 0xff
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	085b      	lsrs	r3, r3, #1
 8007142:	21d8      	movs	r1, #216	; 0xd8
 8007144:	187a      	adds	r2, r7, r1
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	1d7b      	adds	r3, r7, #5
 800714a:	33ff      	adds	r3, #255	; 0xff
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2201      	movs	r2, #1
 8007150:	4013      	ands	r3, r2
 8007152:	d004      	beq.n	800715e <USB_EPStartXfer+0x118e>
 8007154:	187b      	adds	r3, r7, r1
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3301      	adds	r3, #1
 800715a:	187a      	adds	r2, r7, r1
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	21b8      	movs	r1, #184	; 0xb8
 8007160:	187b      	adds	r3, r7, r1
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	b29a      	uxth	r2, r3
 8007168:	23d8      	movs	r3, #216	; 0xd8
 800716a:	18fb      	adds	r3, r7, r3
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	b29b      	uxth	r3, r3
 8007170:	029b      	lsls	r3, r3, #10
 8007172:	b29b      	uxth	r3, r3
 8007174:	4313      	orrs	r3, r2
 8007176:	b29a      	uxth	r2, r3
 8007178:	187b      	adds	r3, r7, r1
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	801a      	strh	r2, [r3, #0]
 800717e:	e02e      	b.n	80071de <USB_EPStartXfer+0x120e>
 8007180:	00000406 	.word	0x00000406
 8007184:	ffff8f8f 	.word	0xffff8f8f
 8007188:	ffff80c0 	.word	0xffff80c0
 800718c:	00000402 	.word	0x00000402
 8007190:	ffff8000 	.word	0xffff8000
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	785b      	ldrb	r3, [r3, #1]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d120      	bne.n	80071de <USB_EPStartXfer+0x120e>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2250      	movs	r2, #80	; 0x50
 80071a0:	5a9b      	ldrh	r3, [r3, r2]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	001a      	movs	r2, r3
 80071a6:	21c4      	movs	r1, #196	; 0xc4
 80071a8:	187b      	adds	r3, r7, r1
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	189b      	adds	r3, r3, r2
 80071ae:	187a      	adds	r2, r7, r1
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	00da      	lsls	r2, r3, #3
 80071b8:	187b      	adds	r3, r7, r1
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	18d3      	adds	r3, r2, r3
 80071be:	4a1d      	ldr	r2, [pc, #116]	; (8007234 <USB_EPStartXfer+0x1264>)
 80071c0:	4694      	mov	ip, r2
 80071c2:	4463      	add	r3, ip
 80071c4:	21c0      	movs	r1, #192	; 0xc0
 80071c6:	187a      	adds	r2, r7, r1
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	1d7b      	adds	r3, r7, #5
 80071cc:	33ff      	adds	r3, #255	; 0xff
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	187b      	adds	r3, r7, r1
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	801a      	strh	r2, [r3, #0]
 80071d8:	e001      	b.n	80071de <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e025      	b.n	800722a <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	18d3      	adds	r3, r2, r3
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	208a      	movs	r0, #138	; 0x8a
 80071ee:	183b      	adds	r3, r7, r0
 80071f0:	4911      	ldr	r1, [pc, #68]	; (8007238 <USB_EPStartXfer+0x1268>)
 80071f2:	400a      	ands	r2, r1
 80071f4:	801a      	strh	r2, [r3, #0]
 80071f6:	183b      	adds	r3, r7, r0
 80071f8:	183a      	adds	r2, r7, r0
 80071fa:	8812      	ldrh	r2, [r2, #0]
 80071fc:	2180      	movs	r1, #128	; 0x80
 80071fe:	0149      	lsls	r1, r1, #5
 8007200:	404a      	eors	r2, r1
 8007202:	801a      	strh	r2, [r3, #0]
 8007204:	183b      	adds	r3, r7, r0
 8007206:	183a      	adds	r2, r7, r0
 8007208:	8812      	ldrh	r2, [r2, #0]
 800720a:	2180      	movs	r1, #128	; 0x80
 800720c:	0189      	lsls	r1, r1, #6
 800720e:	404a      	eors	r2, r1
 8007210:	801a      	strh	r2, [r3, #0]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	18d3      	adds	r3, r2, r3
 800721c:	183a      	adds	r2, r7, r0
 800721e:	8812      	ldrh	r2, [r2, #0]
 8007220:	4906      	ldr	r1, [pc, #24]	; (800723c <USB_EPStartXfer+0x126c>)
 8007222:	430a      	orrs	r2, r1
 8007224:	b292      	uxth	r2, r2
 8007226:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	0018      	movs	r0, r3
 800722c:	46bd      	mov	sp, r7
 800722e:	b043      	add	sp, #268	; 0x10c
 8007230:	bd90      	pop	{r4, r7, pc}
 8007232:	46c0      	nop			; (mov r8, r8)
 8007234:	00000406 	.word	0x00000406
 8007238:	ffffbf8f 	.word	0xffffbf8f
 800723c:	ffff8080 	.word	0xffff8080

08007240 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	000a      	movs	r2, r1
 800724a:	1cfb      	adds	r3, r7, #3
 800724c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800724e:	1cfb      	adds	r3, r7, #3
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d103      	bne.n	800725e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	224c      	movs	r2, #76	; 0x4c
 800725a:	2180      	movs	r1, #128	; 0x80
 800725c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	0018      	movs	r0, r3
 8007262:	46bd      	mov	sp, r7
 8007264:	b002      	add	sp, #8
 8007266:	bd80      	pop	{r7, pc}

08007268 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2244      	movs	r2, #68	; 0x44
 8007274:	5a9b      	ldrh	r3, [r3, r2]
 8007276:	b29b      	uxth	r3, r3
 8007278:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800727a:	68fb      	ldr	r3, [r7, #12]
}
 800727c:	0018      	movs	r0, r3
 800727e:	46bd      	mov	sp, r7
 8007280:	b004      	add	sp, #16
 8007282:	bd80      	pop	{r7, pc}

08007284 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b08a      	sub	sp, #40	; 0x28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	0019      	movs	r1, r3
 8007290:	1dbb      	adds	r3, r7, #6
 8007292:	801a      	strh	r2, [r3, #0]
 8007294:	1d3b      	adds	r3, r7, #4
 8007296:	1c0a      	adds	r2, r1, #0
 8007298:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800729a:	1d3b      	adds	r3, r7, #4
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	3301      	adds	r3, #1
 80072a0:	085b      	lsrs	r3, r3, #1
 80072a2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80072ac:	1dbb      	adds	r3, r7, #6
 80072ae:	881a      	ldrh	r2, [r3, #0]
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	18d3      	adds	r3, r2, r3
 80072b4:	2280      	movs	r2, #128	; 0x80
 80072b6:	00d2      	lsls	r2, r2, #3
 80072b8:	4694      	mov	ip, r2
 80072ba:	4463      	add	r3, ip
 80072bc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	627b      	str	r3, [r7, #36]	; 0x24
 80072c2:	e020      	b.n	8007306 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	781a      	ldrb	r2, [r3, #0]
 80072c8:	2112      	movs	r1, #18
 80072ca:	187b      	adds	r3, r7, r1
 80072cc:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	3301      	adds	r3, #1
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	021b      	lsls	r3, r3, #8
 80072d6:	b21a      	sxth	r2, r3
 80072d8:	187b      	adds	r3, r7, r1
 80072da:	2000      	movs	r0, #0
 80072dc:	5e1b      	ldrsh	r3, [r3, r0]
 80072de:	4313      	orrs	r3, r2
 80072e0:	b21a      	sxth	r2, r3
 80072e2:	187b      	adds	r3, r7, r1
 80072e4:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	187a      	adds	r2, r7, r1
 80072ea:	8812      	ldrh	r2, [r2, #0]
 80072ec:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	3302      	adds	r3, #2
 80072f2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	3301      	adds	r3, #1
 80072f8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	3301      	adds	r3, #1
 80072fe:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	3b01      	subs	r3, #1
 8007304:	627b      	str	r3, [r7, #36]	; 0x24
 8007306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1db      	bne.n	80072c4 <USB_WritePMA+0x40>
  }
}
 800730c:	46c0      	nop			; (mov r8, r8)
 800730e:	46c0      	nop			; (mov r8, r8)
 8007310:	46bd      	mov	sp, r7
 8007312:	b00a      	add	sp, #40	; 0x28
 8007314:	bd80      	pop	{r7, pc}

08007316 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b08a      	sub	sp, #40	; 0x28
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	60b9      	str	r1, [r7, #8]
 8007320:	0019      	movs	r1, r3
 8007322:	1dbb      	adds	r3, r7, #6
 8007324:	801a      	strh	r2, [r3, #0]
 8007326:	1d3b      	adds	r3, r7, #4
 8007328:	1c0a      	adds	r2, r1, #0
 800732a:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800732c:	1d3b      	adds	r3, r7, #4
 800732e:	881b      	ldrh	r3, [r3, #0]
 8007330:	085b      	lsrs	r3, r3, #1
 8007332:	b29b      	uxth	r3, r3
 8007334:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800733e:	1dbb      	adds	r3, r7, #6
 8007340:	881a      	ldrh	r2, [r3, #0]
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	18d3      	adds	r3, r2, r3
 8007346:	2280      	movs	r2, #128	; 0x80
 8007348:	00d2      	lsls	r2, r2, #3
 800734a:	4694      	mov	ip, r2
 800734c:	4463      	add	r3, ip
 800734e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	627b      	str	r3, [r7, #36]	; 0x24
 8007354:	e018      	b.n	8007388 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	b29b      	uxth	r3, r3
 800735c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	3302      	adds	r3, #2
 8007362:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	b2da      	uxtb	r2, r3
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	3301      	adds	r3, #1
 8007370:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	0a1b      	lsrs	r3, r3, #8
 8007376:	b2da      	uxtb	r2, r3
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	3301      	adds	r3, #1
 8007380:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	3b01      	subs	r3, #1
 8007386:	627b      	str	r3, [r7, #36]	; 0x24
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e3      	bne.n	8007356 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800738e:	1d3b      	adds	r3, r7, #4
 8007390:	881b      	ldrh	r3, [r3, #0]
 8007392:	2201      	movs	r2, #1
 8007394:	4013      	ands	r3, r2
 8007396:	b29b      	uxth	r3, r3
 8007398:	2b00      	cmp	r3, #0
 800739a:	d007      	beq.n	80073ac <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	701a      	strb	r2, [r3, #0]
  }
}
 80073ac:	46c0      	nop			; (mov r8, r8)
 80073ae:	46bd      	mov	sp, r7
 80073b0:	b00a      	add	sp, #40	; 0x28
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <HAL_UARTEx_RxEventCallback>:
extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	000a      	movs	r2, r1
 80073be:	1cbb      	adds	r3, r7, #2
 80073c0:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART3)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a10      	ldr	r2, [pc, #64]	; (8007408 <HAL_UARTEx_RxEventCallback+0x54>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d118      	bne.n	80073fe <HAL_UARTEx_RxEventCallback+0x4a>
	{
		memcpy(RxMainBuffer, UART_DMA_RxBuffer, Size);
 80073cc:	1cbb      	adds	r3, r7, #2
 80073ce:	881a      	ldrh	r2, [r3, #0]
 80073d0:	490e      	ldr	r1, [pc, #56]	; (800740c <HAL_UARTEx_RxEventCallback+0x58>)
 80073d2:	4b0f      	ldr	r3, [pc, #60]	; (8007410 <HAL_UARTEx_RxEventCallback+0x5c>)
 80073d4:	0018      	movs	r0, r3
 80073d6:	f000 f869 	bl	80074ac <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, UART_DMA_RxBuffer, UART_DMA_RX_BUFFER_SIZE);
 80073da:	490c      	ldr	r1, [pc, #48]	; (800740c <HAL_UARTEx_RxEventCallback+0x58>)
 80073dc:	4b0d      	ldr	r3, [pc, #52]	; (8007414 <HAL_UARTEx_RxEventCallback+0x60>)
 80073de:	2280      	movs	r2, #128	; 0x80
 80073e0:	0018      	movs	r0, r3
 80073e2:	f7fe fd4a 	bl	8005e7a <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80073e6:	4b0c      	ldr	r3, [pc, #48]	; (8007418 <HAL_UARTEx_RxEventCallback+0x64>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	4b0a      	ldr	r3, [pc, #40]	; (8007418 <HAL_UARTEx_RxEventCallback+0x64>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2104      	movs	r1, #4
 80073f2:	438a      	bics	r2, r1
 80073f4:	601a      	str	r2, [r3, #0]
		RxBufferCopied = Size;
 80073f6:	4b09      	ldr	r3, [pc, #36]	; (800741c <HAL_UARTEx_RxEventCallback+0x68>)
 80073f8:	1cba      	adds	r2, r7, #2
 80073fa:	8812      	ldrh	r2, [r2, #0]
 80073fc:	801a      	strh	r2, [r3, #0]
	}
}
 80073fe:	46c0      	nop			; (mov r8, r8)
 8007400:	46bd      	mov	sp, r7
 8007402:	b002      	add	sp, #8
 8007404:	bd80      	pop	{r7, pc}
 8007406:	46c0      	nop			; (mov r8, r8)
 8007408:	40004800 	.word	0x40004800
 800740c:	200005a0 	.word	0x200005a0
 8007410:	20000620 	.word	0x20000620
 8007414:	20000194 	.word	0x20000194
 8007418:	2000021c 	.word	0x2000021c
 800741c:	20000720 	.word	0x20000720

08007420 <app_main>:

void app_main(void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, UART_DMA_RxBuffer, UART_DMA_RX_BUFFER_SIZE);
 8007424:	490b      	ldr	r1, [pc, #44]	; (8007454 <app_main+0x34>)
 8007426:	4b0c      	ldr	r3, [pc, #48]	; (8007458 <app_main+0x38>)
 8007428:	2280      	movs	r2, #128	; 0x80
 800742a:	0018      	movs	r0, r3
 800742c:	f7fe fd25 	bl	8005e7a <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8007430:	4b0a      	ldr	r3, [pc, #40]	; (800745c <app_main+0x3c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	4b09      	ldr	r3, [pc, #36]	; (800745c <app_main+0x3c>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2104      	movs	r1, #4
 800743c:	438a      	bics	r2, r1
 800743e:	601a      	str	r2, [r3, #0]
	do
	{
		if(RxBufferCopied)
 8007440:	4b07      	ldr	r3, [pc, #28]	; (8007460 <app_main+0x40>)
 8007442:	881b      	ldrh	r3, [r3, #0]
 8007444:	b29b      	uxth	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0fa      	beq.n	8007440 <app_main+0x20>
		{
			RxBufferCopied = 0;
 800744a:	4b05      	ldr	r3, [pc, #20]	; (8007460 <app_main+0x40>)
 800744c:	2200      	movs	r2, #0
 800744e:	801a      	strh	r2, [r3, #0]
		if(RxBufferCopied)
 8007450:	e7f6      	b.n	8007440 <app_main+0x20>
 8007452:	46c0      	nop			; (mov r8, r8)
 8007454:	200005a0 	.word	0x200005a0
 8007458:	20000194 	.word	0x20000194
 800745c:	2000021c 	.word	0x2000021c
 8007460:	20000720 	.word	0x20000720

08007464 <__libc_init_array>:
 8007464:	b570      	push	{r4, r5, r6, lr}
 8007466:	2600      	movs	r6, #0
 8007468:	4d0c      	ldr	r5, [pc, #48]	; (800749c <__libc_init_array+0x38>)
 800746a:	4c0d      	ldr	r4, [pc, #52]	; (80074a0 <__libc_init_array+0x3c>)
 800746c:	1b64      	subs	r4, r4, r5
 800746e:	10a4      	asrs	r4, r4, #2
 8007470:	42a6      	cmp	r6, r4
 8007472:	d109      	bne.n	8007488 <__libc_init_array+0x24>
 8007474:	2600      	movs	r6, #0
 8007476:	f000 f82b 	bl	80074d0 <_init>
 800747a:	4d0a      	ldr	r5, [pc, #40]	; (80074a4 <__libc_init_array+0x40>)
 800747c:	4c0a      	ldr	r4, [pc, #40]	; (80074a8 <__libc_init_array+0x44>)
 800747e:	1b64      	subs	r4, r4, r5
 8007480:	10a4      	asrs	r4, r4, #2
 8007482:	42a6      	cmp	r6, r4
 8007484:	d105      	bne.n	8007492 <__libc_init_array+0x2e>
 8007486:	bd70      	pop	{r4, r5, r6, pc}
 8007488:	00b3      	lsls	r3, r6, #2
 800748a:	58eb      	ldr	r3, [r5, r3]
 800748c:	4798      	blx	r3
 800748e:	3601      	adds	r6, #1
 8007490:	e7ee      	b.n	8007470 <__libc_init_array+0xc>
 8007492:	00b3      	lsls	r3, r6, #2
 8007494:	58eb      	ldr	r3, [r5, r3]
 8007496:	4798      	blx	r3
 8007498:	3601      	adds	r6, #1
 800749a:	e7f2      	b.n	8007482 <__libc_init_array+0x1e>
 800749c:	08007520 	.word	0x08007520
 80074a0:	08007520 	.word	0x08007520
 80074a4:	08007520 	.word	0x08007520
 80074a8:	08007524 	.word	0x08007524

080074ac <memcpy>:
 80074ac:	2300      	movs	r3, #0
 80074ae:	b510      	push	{r4, lr}
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d100      	bne.n	80074b6 <memcpy+0xa>
 80074b4:	bd10      	pop	{r4, pc}
 80074b6:	5ccc      	ldrb	r4, [r1, r3]
 80074b8:	54c4      	strb	r4, [r0, r3]
 80074ba:	3301      	adds	r3, #1
 80074bc:	e7f8      	b.n	80074b0 <memcpy+0x4>

080074be <memset>:
 80074be:	0003      	movs	r3, r0
 80074c0:	1882      	adds	r2, r0, r2
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d100      	bne.n	80074c8 <memset+0xa>
 80074c6:	4770      	bx	lr
 80074c8:	7019      	strb	r1, [r3, #0]
 80074ca:	3301      	adds	r3, #1
 80074cc:	e7f9      	b.n	80074c2 <memset+0x4>
	...

080074d0 <_init>:
 80074d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d2:	46c0      	nop			; (mov r8, r8)
 80074d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074d6:	bc08      	pop	{r3}
 80074d8:	469e      	mov	lr, r3
 80074da:	4770      	bx	lr

080074dc <_fini>:
 80074dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074de:	46c0      	nop			; (mov r8, r8)
 80074e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074e2:	bc08      	pop	{r3}
 80074e4:	469e      	mov	lr, r3
 80074e6:	4770      	bx	lr
